// <auto-generated />
using System;
using Krialys.Data.EF.Univers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Krialys.Entities.Migrations
{
    [DbContext(typeof(KrialysDbContext))]
    [Migration("20211019155519_DbUnivers_13")]
    partial class DbUnivers_13
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("Krialys.Data.EF.Univers.PARALLELEU", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.ToTable("PARALLELEU");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TBD_BATCH_DEMANDES", b =>
                {
                    b.Property<int>("TBD_BATCH_DEMANDEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TBD_CODE_RETOUR")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TBD_DATE_DEBUT_EXECUTION")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TBD_DATE_FIN_EXECUTION")
                        .HasColumnType("TEXT");

                    b.Property<string>("TBD_EXECUTION")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int>("TBD_ORDRE_EXECUTION")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TD_DEMANDEID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TEB_ETAT_BATCHID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TE_ETATID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TBD_BATCH_DEMANDEID");

                    b.HasIndex("TEB_ETAT_BATCHID");

                    b.HasIndex(new[] { "TD_DEMANDEID", "TE_ETATID", "TBD_ORDRE_EXECUTION" }, "IX_TBD_BATCH_DEMANDE$TD_DEMANDES")
                        .IsUnique();

                    b.HasIndex(new[] { "TE_ETATID", "TBD_ORDRE_EXECUTION" }, "IX_TBD_BATCH_DEMANDES$ETAT_BATCH");

                    b.HasIndex(new[] { "TD_DEMANDEID" }, "IX_TBD_BATCH_DEMANDES$TD_DEMANDEID");

                    b.ToTable("TBD_BATCH_DEMANDES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TBS_BATCH_SCENARIOS", b =>
                {
                    b.Property<int>("TEB_ETAT_BATCHID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TS_SCENARIOID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TBS_ORDRE_EXECUTION")
                        .HasColumnType("INTEGER");

                    b.HasKey("TEB_ETAT_BATCHID", "TS_SCENARIOID");

                    b.HasIndex("TS_SCENARIOID");

                    b.ToTable("TBS_BATCH_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TC_CATEGORIES", b =>
                {
                    b.Property<int>("TC_CATEGORIEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TC_COMMENTAIRE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TC_DATE_CREATION")
                        .HasColumnType("TEXT");

                    b.Property<string>("TC_NOM")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("TC_CATEGORIEID")
                        .HasName("PK_CATEGORIES");

                    b.ToTable("TC_CATEGORIES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TDP_DEMANDE_PROCESS", b =>
                {
                    b.Property<int>("TDP_DEMANDE_PROCESSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TDP_ETAPE")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("TDP_EXTRA_INFO")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("TDP_NUM_ETAPE")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TDP_STATUT")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<int>("TD_DEMANDEID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TDP_DEMANDE_PROCESSID");

                    b.HasIndex("TD_DEMANDEID");

                    b.ToTable("TDP_DEMANDE_PROCESS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TDQ_DEMANDE_QUALIFS", b =>
                {
                    b.Property<int>("TDQ_DEMANDE_QUALIFID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TDQ_CODE")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("TDQ_COMMENT")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TDQ_DATASET")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TDQ_DATE_PROD")
                        .HasColumnType("TEXT");

                    b.Property<string>("TDQ_NATURE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TDQ_NOM")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TDQ_NUM_ORDRE")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TDQ_OBJECTIF")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TDQ_TYPOLOGIE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TDQ_VALEUR")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TD_DEMANDEID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TDQ_DEMANDE_QUALIFID");

                    b.HasIndex("TD_DEMANDEID");

                    b.ToTable("TDQ_DEMANDE_QUALIFS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TD_DEMANDES", b =>
                {
                    b.Property<int>("TD_DEMANDEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TD_COMMENTAIRE_GESTIONNAIRE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TD_COMMENTAIRE_UTILISATEUR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TD_DATE_AVIS_GESTIONNAIRE")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TD_DATE_DEMANDE")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TD_DATE_DERNIER_DOWNLOAD")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TD_DATE_EXECUTION_SOUHAITEE")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TD_DATE_LIVRAISON")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TD_DATE_PRISE_EN_CHARGE")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TD_DEMANDE_ORIGINEID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TD_DUREE_PRODUCTION_REEL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TD_GUID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TD_INFO_RETOUR_TRAITEMENT")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TD_PREREQUIS_DELAI_CHK")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TD_QUALIF_BILAN")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TD_QUALIF_EXIST_FILE")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TD_QUALIF_FILE_SIZE")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TD_RESULT_EXIST_FILE")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TD_RESULT_FILE_SIZE")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TD_RESULT_NB_DOWNLOAD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TD_SEND_MAIL_CLIENT")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('O')");

                    b.Property<string>("TD_SEND_MAIL_GESTIONNAIRE")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int>("TE_ETATID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TPF_PLANIF_ORIGINEID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('DB')");

                    b.Property<string>("TRU_DEMANDEURID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_GESTIONNAIRE_VALIDEURID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TSRV_SERVEURID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TS_SCENARIOID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TD_DEMANDEID");

                    b.HasIndex(new[] { "TE_ETATID" }, "IX_TD_DEMANDES$ETAT");

                    b.HasIndex(new[] { "TRU_DEMANDEURID" }, "IX_TD_DEMANDES$NUM_CP");

                    b.HasIndex(new[] { "TSRV_SERVEURID" }, "IX_TD_DEMANDES$SERVEUR");

                    b.HasIndex(new[] { "TD_DEMANDEID", "TE_ETATID" }, "UK_TD_DEMANDES_TD_DEMANDEID_TE_ETATID")
                        .IsUnique();

                    b.HasIndex(new[] { "TD_DEMANDEID", "TE_ETATID" }, "UQ_TD_DEMANDES")
                        .IsUnique();

                    b.ToTable("TD_DEMANDES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEB_ETAT_BATCHS", b =>
                {
                    b.Property<int>("TEB_ETAT_BATCHID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TEB_CMD")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TEB_DATE_CREATION")
                        .HasColumnType("TEXT");

                    b.Property<string>("TEB_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TEB_NOM_AFFICHAGE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TE_ETATID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TEB_ETAT_BATCHID");

                    b.HasIndex(new[] { "TE_ETATID" }, "IX_TEB_ETAT_BATCHS$TE_ETATS");

                    b.ToTable("TEB_ETAT_BATCHS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEL_ETAT_LOGICIELS", b =>
                {
                    b.Property<int>("TEL_ETAT_LOGICIELID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TE_ETATID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TL_LOGICIELID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TEL_ETAT_LOGICIELID");

                    b.HasIndex("TL_LOGICIELID");

                    b.HasIndex("TE_ETATID", "TL_LOGICIELID")
                        .IsUnique()
                        .HasDatabaseName("UQ_TEL_ETAT_LOGICIELS");

                    b.HasIndex(new[] { "TE_ETATID", "TL_LOGICIELID" }, "UQ_TEL_ETAT_LOGICIELS")
                        .IsUnique();

                    b.ToTable("TEL_ETAT_LOGICIELS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEMF_ETAT_MASTER_FERMES", b =>
                {
                    b.Property<int>("TEMF_ETAT_MASTER_FERMEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TEMF_DATE_AJOUT")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TEMF_DATE_SUPPRESSION")
                        .HasColumnType("TEXT");

                    b.Property<string>("TEMF_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TEMF_ORDRE_PRIORITE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("TEM_ETAT_MASTERID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TF_FERMEID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TEMF_ETAT_MASTER_FERMEID");

                    b.HasIndex("TF_FERMEID");

                    b.HasIndex(new[] { "TEM_ETAT_MASTERID", "TF_FERMEID" }, "UK_TEMF_ETAT_MASTER_FERMES")
                        .IsUnique();

                    b.HasIndex(new[] { "TEM_ETAT_MASTERID", "TF_FERMEID" }, "UQ_TEMF_ETAT_MASTER_FERMES")
                        .IsUnique();

                    b.ToTable("TEMF_ETAT_MASTER_FERMES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEM_ETAT_MASTERS", b =>
                {
                    b.Property<int>("TEM_ETAT_MASTERID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TC_CATEGORIEID")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TEM_COMMENTAIRE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TEM_DATE_CREATION")
                        .HasColumnType("TEXT");

                    b.Property<string>("TEM_ETAT_MASTER_PARENTID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TEM_GUID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TEM_NOM_ETAT_MASTER")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TP_PERIMETREID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('A')");

                    b.Property<string>("TRU_RESPONSABLE_FONCTIONNELID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_RESPONSABLE_TECHNIQUEID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("TEM_ETAT_MASTERID");

                    b.HasIndex("TC_CATEGORIEID");

                    b.HasIndex("TRST_STATUTID");

                    b.HasIndex("TRU_RESPONSABLE_FONCTIONNELID");

                    b.HasIndex("TRU_RESPONSABLE_TECHNIQUEID");

                    b.HasIndex(new[] { "TP_PERIMETREID" }, "IX_TEM_ETAT_MASTERS$PERIMETRE");

                    b.HasIndex(new[] { "TEM_NOM_ETAT_MASTER", "TP_PERIMETREID" }, "UQ_TEM_ETAT_MASTER")
                        .IsUnique();

                    b.ToTable("TEM_ETAT_MASTERS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEP_ETAT_PREREQUISS", b =>
                {
                    b.Property<int>("TEP_ETAT_PREREQUISID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TEP_COMMENTAIRE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TEP_DATE_MAJ")
                        .HasColumnType("TEXT");

                    b.Property<string>("TEP_FILEPATTERN")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TEP_IS_PATTERN")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("TEP_NATURE")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("TEP_PATH")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TE_ETATID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("TEP_ETAT_PREREQUISID");

                    b.HasIndex("TE_ETATID");

                    b.HasIndex("TRST_STATUTID");

                    b.ToTable("TEP_ETAT_PREREQUISS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TER_ETAT_RESSOURCES", b =>
                {
                    b.Property<int>("TER_ETAT_RESSOURCEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TER_COMMENTAIRE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TER_IS_PATTERN")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('N')");

                    b.Property<DateTimeOffset?>("TER_MODELE_DATE")
                        .HasColumnType("TEXT");

                    b.Property<string>("TER_MODELE_DOC")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TER_MODELE_TAILLE")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TER_NOM_FICHIER")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TER_NOM_MODELE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TER_PATH_RELATIF")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TE_ETATID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TER_ETAT_RESSOURCEID");

                    b.HasIndex(new[] { "TE_ETATID" }, "IX_TER_ETAT_RESSOURCES$ETATID");

                    b.HasIndex(new[] { "TE_ETATID", "TER_NOM_FICHIER" }, "UK_TER_ETAT_RESSOURCES$ETATIDNOM_FICHIER")
                        .IsUnique();

                    b.ToTable("TER_ETAT_RESSOURCES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TE_ETATS", b =>
                {
                    b.Property<int>("TE_ETATID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PARENT_ETATID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TEM_ETAT_MASTERID")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TE_COMMENTAIRE")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TE_DATE_DERNIERE_PRODUCTION")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TE_DATE_REVISION")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TE_DUREE_DERNIERE_PRODUCTION")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TE_DUREE_PRODUCTION_ESTIMEE")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TE_ENV_VIERGE_TAILLE")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TE_ENV_VIERGE_UPLOADED")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('N')");

                    b.Property<string>("TE_GENERE_CUBE")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("TE_GUID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int>("TE_INDICE_REVISION_L1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("TE_INDICE_REVISION_L2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TE_INDICE_REVISION_L3")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TE_INFO_REVISION")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TE_NOM_DATABASE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TE_NOM_ETAT")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TE_NOM_SERVEUR_CUBE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TE_SEND_MAIL_CLIENT")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('O')");

                    b.Property<string>("TE_SEND_MAIL_GESTIONNAIRE")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('O')");

                    b.Property<string>("TE_TYPE_SORTIE")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('M')");

                    b.Property<string>("TE_VALIDATION_IMPLICITE")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('N')");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('B')");

                    b.Property<string>("TRU_DECLARANTID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_ENV_VIERGE_AUTEURID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("TE_ETATID");

                    b.HasIndex("TRST_STATUTID");

                    b.HasIndex("TRU_DECLARANTID");

                    b.HasIndex("TRU_ENV_VIERGE_AUTEURID");

                    b.HasIndex(new[] { "TEM_ETAT_MASTERID" }, "IX_TE_ETATS$TEM_ETAT_MASTERS");

                    b.ToTable("TE_ETATS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TF_FERMES", b =>
                {
                    b.Property<int>("TF_FERMEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TF_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TF_EN_MAINTENANCE")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('N')");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('A')");

                    b.HasKey("TF_FERMEID")
                        .HasName("PK_FERMES");

                    b.HasIndex("TRST_STATUTID");

                    b.ToTable("TF_FERMES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TI_INFOS", b =>
                {
                    b.Property<int>("TI_INFOID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TI_DATE")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TI_DT_DEBUT_VALIDITE")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TI_DT_FIN_VALIDITE")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("TI_IMG")
                        .HasColumnType("BLOB");

                    b.Property<string>("TI_MSG")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TI_MSG_EN")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("TI_INFOID");

                    b.HasIndex("TRST_STATUTID");

                    b.ToTable("TI_INFOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TLEM_LOGICIEL_EDITEUR_MODELES", b =>
                {
                    b.Property<int>("TLEM_LOGICIEL_EDITEUR_MODELEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TLEM_ACTION")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("TLEM_FILENAME_PATTERN")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("TLEM_FILE_TYPE")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("TLEM_INFO")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("TLEM_PATH_NAME")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("TLE_LOGICIEL_EDITEURID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TLEM_LOGICIEL_EDITEUR_MODELEID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("TLE_LOGICIEL_EDITEURID");

                    b.ToTable("TLEM_LOGICIEL_EDITEUR_MODELES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TLE_LOGICIEL_EDITEURS", b =>
                {
                    b.Property<int>("TLE_LOGICIEL_EDITEURID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TLE_EDITEUR")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("TLE_LOGICIEL_EDITEURID");

                    b.ToTable("TLE_LOGICIEL_EDITEURS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TL_LOGICIELS", b =>
                {
                    b.Property<int>("TL_LOGICIELID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TLE_LOGICIEL_EDITEURID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TL_DATE_LOGICIEL")
                        .HasColumnType("TEXT");

                    b.Property<string>("TL_LOGICIEL_VERSION")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("TL_NOM_LOGICIEL")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("TL_LOGICIELID");

                    b.HasIndex("TLE_LOGICIEL_EDITEURID");

                    b.ToTable("TL_LOGICIELS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPD_PREREQUIS_DEMANDES", b =>
                {
                    b.Property<int>("TD_DEMANDEID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TEP_ETAT_PREREQUISID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TPD_DATE_LAST_CHECK")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TPD_DATE_VALIDATION")
                        .HasColumnType("TEXT");

                    b.Property<string>("TPD_MSG_LAST_CHECK")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TPD_NB_FILE_TROUVE")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TPD_VALIDE")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.HasKey("TD_DEMANDEID", "TEP_ETAT_PREREQUISID");

                    b.HasIndex("TEP_ETAT_PREREQUISID");

                    b.ToTable("TPD_PREREQUIS_DEMANDES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPF_PLANIFS", b =>
                {
                    b.Property<int>("TPF_PLANIFID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TPF_CRON")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("TPF_DATE_DEBUT")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TPF_DATE_FIN")
                        .HasColumnType("TEXT");

                    b.Property<int>("TPF_DEMANDE_ORIGINEID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TPF_PREREQUIS_DELAI_CHK")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_DECLARANTID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("TPF_PLANIFID");

                    b.HasIndex("TPF_DEMANDE_ORIGINEID");

                    b.HasIndex("TRST_STATUTID");

                    b.ToTable("TPF_PLANIFS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPM_PARAMS", b =>
                {
                    b.Property<string>("TPM_PARAMID")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TPM_INFO")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TPM_VALEUR")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("TPM_PARAMID");

                    b.ToTable("TPM_PARAMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPR_PROFILS", b =>
                {
                    b.Property<int>("TPR_PROFILID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TPR_LIB")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("TPR_PROFILID");

                    b.HasIndex("TRST_STATUTID");

                    b.ToTable("TPR_PROFILS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPS_PREREQUIS_SCENARIOS", b =>
                {
                    b.Property<int>("TEP_ETAT_PREREQUISID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TS_SCENARIOID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TPS_COMMENTAIRE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TPS_NB_FILE_MAX")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TPS_NB_FILE_MIN")
                        .HasColumnType("INTEGER");

                    b.HasKey("TEP_ETAT_PREREQUISID", "TS_SCENARIOID");

                    b.HasIndex("TS_SCENARIOID");

                    b.ToTable("TPS_PREREQUIS_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPUF_PARALLELEU_FERMES", b =>
                {
                    b.Property<int>("TPUF_PARALLELEU_FERMEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TF_FERMEID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TPUF_DATE_MODIFICATION")
                        .HasColumnType("TEXT");

                    b.Property<string>("TPUF_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TPU_PARALLELEUID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("TPUF_PARALLELEU_FERMEID");

                    b.HasIndex("TF_FERMEID");

                    b.HasIndex("TPU_PARALLELEUID");

                    b.HasIndex("TRST_STATUTID");

                    b.ToTable("TPUF_PARALLELEU_FERMES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPUP_PARALLELEU_PARAMS", b =>
                {
                    b.Property<int>("TPUP_PARALLELEU_PARAMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TPUP_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TPUP_KEY")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TPUP_TYPE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TPUP_VALUE")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TPU_PARALLELEUID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("TPUP_PARALLELEU_PARAMID");

                    b.HasIndex("TRST_STATUTID");

                    b.HasIndex(new[] { "TPU_PARALLELEUID", "TPUP_KEY" }, "UQ_PARALLELEU_PARAM")
                        .IsUnique();

                    b.ToTable("TPUP_PARALLELEU_PARAMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPU_PARALLELEUS", b =>
                {
                    b.Property<int>("TPU_PARALLELEUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TPU_DATE_DERNIERE_ACTIVITE")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TPU_DATE_PREMIERE_ACTIVITE")
                        .HasColumnType("TEXT");

                    b.Property<string>("TPU_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TPU_DUREE_EXPLOITATION")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TPU_INSTANCE")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("TSRV_SERVEURID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TPU_PARALLELEUID");

                    b.HasIndex("TRST_STATUTID");

                    b.HasIndex("TSRV_SERVEURID");

                    b.HasIndex(new[] { "TPU_INSTANCE", "TSRV_SERVEURID" }, "UQ_TPU_PARALLELEUS")
                        .IsUnique();

                    b.ToTable("TPU_PARALLELEUS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TP_PERIMETRES", b =>
                {
                    b.Property<int>("TP_PERIMETREID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TP_DATE_CREATION")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("TP_LOGO")
                        .HasColumnType("BLOB");

                    b.Property<string>("TP_PERIMETRE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TQM_QUALIF_MODELEID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("TP_PERIMETREID")
                        .HasName("PK_PERIMETRES");

                    b.HasIndex("TQM_QUALIF_MODELEID");

                    b.HasIndex("TRST_STATUTID");

                    b.ToTable("TP_PERIMETRES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TQM_QUALIF_MODELES", b =>
                {
                    b.Property<int>("TQM_QUALIF_MODELEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TQM_LIB")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TQM_VALEUR_MAX")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TQM_VALEUR_MIN")
                        .HasColumnType("INTEGER");

                    b.HasKey("TQM_QUALIF_MODELEID")
                        .HasName("PK_QUALIF_MODELES");

                    b.ToTable("TQM_QUALIF_MODELES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRAPLAS_APPLICATIONS_AUTH_SCENARIOS", b =>
                {
                    b.Property<int>("TRAPLAS_APPLICATIONS_AUTH_SCENARIOID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TRAS_AUTH_SCENARIOID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TRCLI_CLIENTAPPLICATIONID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TRAPLAS_APPLICATIONS_AUTH_SCENARIOID");

                    b.HasIndex("TRCLI_CLIENTAPPLICATIONID");

                    b.HasIndex("TRAS_AUTH_SCENARIOID", "TRCLI_CLIENTAPPLICATIONID")
                        .HasDatabaseName("IX_TRAPLAS_APPLICATIONS_AUTH_SCENARIOS");

                    b.ToTable("TRAPLAS_APPLICATIONS_AUTH_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRAS_AUTH_SCENARIOS", b =>
                {
                    b.Property<int>("TRAS_AUTH_SCENARIOID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRAS_DESCRIPTION")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRAS_LABEL")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("TRAS_AUTH_SCENARIOID");

                    b.ToTable("TRAS_AUTH_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRCCL_CATALOG_CLAIMS", b =>
                {
                    b.Property<int>("TRCCL_CATALOG_CLAIMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRCCL_DESCRIPTION")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCCL_KIND")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCCL_STATUS")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCCL_VALUE")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCCL_VALUE_LABEL")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("TRCL_CLAIMID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TRCCL_CATALOG_CLAIMID");

                    b.HasIndex("TRCL_CLAIMID");

                    b.ToTable("TRCCL_CATALOG_CLAIMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRCLICL_CLIENTAPPLICATIONS_CLAIMS", b =>
                {
                    b.Property<int>("TRCLICL_CLIENTAPPLICATION_CLAIMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRCLICL_CLAIM_VALUE")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCLICL_DESCRIPTION")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCLICL_STATUS")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int>("TRCLI_CLIENTAPPLICATIONID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TRCL_CLAIMID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TRCLICL_CLIENTAPPLICATION_CLAIMID");

                    b.HasIndex("TRCL_CLAIMID");

                    b.HasIndex("TRCLI_CLIENTAPPLICATIONID", "TRCL_CLAIMID")
                        .HasDatabaseName("UQ_TRCLICL_CLIENTAPPLICATIONS_CLAIMS");

                    b.ToTable("TRCLICL_CLIENTAPPLICATIONS_CLAIMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRCLI_CLIENTAPPLICATIONS", b =>
                {
                    b.Property<int>("TRCLI_CLIENTAPPLICATIONID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRCLI_AUTH_PUBLIC")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCLI_AUTH_SECRET")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCLI_DESCRIPTION")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCLI_LABEL")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCLI_STATUS")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.HasKey("TRCLI_CLIENTAPPLICATIONID");

                    b.ToTable("TRCLI_CLIENTAPPLICATIONS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRCL_CLAIMS", b =>
                {
                    b.Property<int>("TRCL_CLAIMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRCLI_MULTIVALUE")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCL_CLAIM_DESCRIPTION")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCL_CLAIM_NAME")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRCL_STATUS")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.HasKey("TRCL_CLAIMID");

                    b.ToTable("TRCL_CLAIMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRD_RESSOURCE_DEMANDES", b =>
                {
                    b.Property<int>("TRD_RESSOURCE_DEMANDEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TD_DEMANDEID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TER_ETAT_RESSOURCEID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TE_ETATID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRD_COMMENTAIRE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRD_FICHIER_PRESENT")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('N')");

                    b.Property<string>("TRD_NOM_FICHIER")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRD_NOM_FICHIER_ORIGINAL")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TRD_TAILLE_FICHIER")
                        .HasColumnType("INTEGER");

                    b.HasKey("TRD_RESSOURCE_DEMANDEID");

                    b.HasIndex("TER_ETAT_RESSOURCEID");

                    b.HasIndex(new[] { "TD_DEMANDEID", "TE_ETATID", "TRD_NOM_FICHIER" }, "IX_TRD_RESSOURCE_DEMANDES$ETAT_RESSOURCE");

                    b.HasIndex(new[] { "TE_ETATID" }, "IX_TRD_RESSOURCE_DEMANDES$TE_ETATID");

                    b.ToTable("TRD_RESSOURCE_DEMANDES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRLG_LNGS", b =>
                {
                    b.Property<string>("TRLG_LNGID")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TRLG_PREFERED_LNG")
                        .HasColumnType("INTEGER");

                    b.HasKey("TRLG_LNGID");

                    b.ToTable("TRLG_LNGS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRST_STATUTS", b =>
                {
                    b.Property<string>("TRST_STATUTID")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRST_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRST_INFO")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRST_INFO_EN")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TRST_REGLE01")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TRST_REGLE02")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TRST_REGLE03")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TRST_REGLE04")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TRST_REGLE05")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TRST_REGLE06")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TRST_REGLE07")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TRST_REGLE08")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TRST_REGLE09")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TRST_REGLE10")
                        .HasColumnType("INTEGER");

                    b.HasKey("TRST_STATUTID");

                    b.ToTable("TRST_STATUTS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRS_RESSOURCE_SCENARIOS", b =>
                {
                    b.Property<int>("TER_ETAT_RESSOURCEID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TS_SCENARIOID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRS_COMMENTAIRE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRS_FICHIER_OBLIGATOIRE")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('N')");

                    b.HasKey("TER_ETAT_RESSOURCEID", "TS_SCENARIOID");

                    b.HasIndex(new[] { "TER_ETAT_RESSOURCEID" }, "IX_TRS_RESSOURCE_SCENARIOS$ETAT_RESSOURCE");

                    b.HasIndex(new[] { "TS_SCENARIOID" }, "IX_TRS_RESSOURCE_SCENARIOS$TS_SCENARIOS");

                    b.ToTable("TRS_RESSOURCE_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRTZ_TZS", b =>
                {
                    b.Property<string>("TRTZ_TZID")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRTZ_INFO_TZ")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TRTZ_PREFERED_TZ")
                        .HasColumnType("INTEGER");

                    b.HasKey("TRTZ_TZID");

                    b.ToTable("TRTZ_TZS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRUCL_USERS_CLAIMS", b =>
                {
                    b.Property<int>("TRUCL_USER_CLAIMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TRCLI_CLIENTAPPLICATIONID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TRCL_CLAIMID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRUCL_CLAIM_VALUE")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRUCL_DESCRIPTION")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRUCL_STATUS")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_USERID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("TRUCL_USER_CLAIMID");

                    b.HasIndex("TRCLI_CLIENTAPPLICATIONID");

                    b.HasIndex("TRCL_CLAIMID");

                    b.HasIndex("TRU_USERID", "TRCL_CLAIMID")
                        .HasDatabaseName("UQ_TRUCL_USERS_CLAIMS");

                    b.ToTable("TRUCL_USERS_CLAIMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRU_USERS", b =>
                {
                    b.Property<string>("TRU_USERID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_EMAIL")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_FIRST_NAME")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_LOGIN")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_NAME")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_PWD")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TRU_STATUS")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.HasKey("TRU_USERID");

                    b.ToTable("TRU_USERS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TSL_SERVEUR_LOGICIELS", b =>
                {
                    b.Property<int>("TSL_SERVEUR_LOGICIELID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TL_LOGICIELID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TSRV_SERVEURID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TSL_SERVEUR_LOGICIELID");

                    b.HasIndex("TL_LOGICIELID");

                    b.HasIndex(new[] { "TSRV_SERVEURID", "TL_LOGICIELID" }, "UQ_SERVEUR_LOGICIEL")
                        .IsUnique();

                    b.ToTable("TSL_SERVEUR_LOGICIELS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TSP_SERVEUR_PARAMS", b =>
                {
                    b.Property<int>("TSP_SERVEUR_PARAMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("TSP_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TSP_KEY")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TSP_TYPE")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TSP_VALUE")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TSRV_SERVEURID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TSP_SERVEUR_PARAMID");

                    b.HasIndex("TRST_STATUTID");

                    b.HasIndex(new[] { "TSRV_SERVEURID", "TSP_KEY" }, "UQ_TSP_SERVEUR_PARAM")
                        .IsUnique();

                    b.ToTable("TSP_SERVEUR_PARAMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TSRV_SERVEURS", b =>
                {
                    b.Property<int>("TSRV_SERVEURID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('I')");

                    b.Property<DateTimeOffset?>("TSRV_DATE_ACTIVATION")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("TSRV_DATE_DERNIERE_ACTIVITE")
                        .HasColumnType("TEXT");

                    b.Property<string>("TSRV_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TSRV_DUREE_EXPLOITATION")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TSRV_IP")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("TSRV_NOM")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TSRV_OS")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("TSRV_SERVEURID");

                    b.HasIndex("TRST_STATUTID");

                    b.HasIndex(new[] { "TSRV_NOM" }, "UQ_TSRV_SERVEURS$TSRV_NOM")
                        .IsUnique();

                    b.ToTable("TSRV_SERVEURS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TS_SCENARIOS", b =>
                {
                    b.Property<int>("TS_SCENARIOID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TE_ETATID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRST_STATUTID")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("TS_DESCR")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TS_GUID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TS_IS_DEFAULT")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("TS_NOM_SCENARIO")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("TS_SCENARIOID");

                    b.HasIndex("TE_ETATID");

                    b.HasIndex("TRST_STATUTID");

                    b.ToTable("TS_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TTAU_AUTHENTIFICATIONS", b =>
                {
                    b.Property<int>("TTAU_AUTHENTIFICATIONID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TRU_USERID")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("TTAU_AUTH_CODE")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("TTAU_AUTH_CODE_EXP")
                        .HasColumnType("TEXT");

                    b.Property<string>("TTAU_REFRESH_TOKEN")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("TTAU_REFRESH_TOKEN_EXP")
                        .HasColumnType("TEXT");

                    b.HasKey("TTAU_AUTHENTIFICATIONID");

                    b.HasIndex("TRU_USERID");

                    b.ToTable("TTAU_AUTHENTIFICATIONS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TBD_BATCH_DEMANDES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TEB_ETAT_BATCHS", "TEB_ETAT_BATCH")
                        .WithMany("TBD_BATCH_DEMANDES")
                        .HasForeignKey("TEB_ETAT_BATCHID")
                        .HasConstraintName("FK_TBD_BATCH_DEMANDES$TEB_ETAT_BATCHS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TD_DEMANDES", "T")
                        .WithMany("TBD_BATCH_DEMANDES")
                        .HasForeignKey("TD_DEMANDEID", "TE_ETATID")
                        .HasConstraintName("FK_TBD_BATCH_DEMANDES$TD_DEMANDES")
                        .HasPrincipalKey("TD_DEMANDEID", "TE_ETATID")
                        .IsRequired();

                    b.Navigation("T");

                    b.Navigation("TEB_ETAT_BATCH");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TBS_BATCH_SCENARIOS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TEB_ETAT_BATCHS", "TEB_ETAT_BATCH")
                        .WithMany("TBS_BATCH_SCENARIOS")
                        .HasForeignKey("TEB_ETAT_BATCHID")
                        .HasConstraintName("FK_TBS_BATCH_SCENARIOS$TEB_ETAT_BATCHS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TS_SCENARIOS", "TS_SCENARIO")
                        .WithMany("TBS_BATCH_SCENARIOS")
                        .HasForeignKey("TS_SCENARIOID")
                        .HasConstraintName("FK_TBS_BATCH_SCENARIOS$TS_SCENARIOS")
                        .IsRequired();

                    b.Navigation("TEB_ETAT_BATCH");

                    b.Navigation("TS_SCENARIO");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TDP_DEMANDE_PROCESS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TD_DEMANDES", "TD_DEMANDE")
                        .WithMany("TDP_DEMANDE_PROCESS")
                        .HasForeignKey("TD_DEMANDEID")
                        .HasConstraintName("FK_TDP_DEMANDE_PROCESSS$TD_DEMANDES")
                        .IsRequired();

                    b.Navigation("TD_DEMANDE");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TDQ_DEMANDE_QUALIFS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TD_DEMANDES", "TD_DEMANDE")
                        .WithMany("TDQ_DEMANDE_QUALIFS")
                        .HasForeignKey("TD_DEMANDEID")
                        .HasConstraintName("FK_TDQ_DEMANDE_QUALIFS$TD_DEMANDES")
                        .IsRequired();

                    b.Navigation("TD_DEMANDE");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TD_DEMANDES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TE_ETATS", "TE_ETAT")
                        .WithMany("TD_DEMANDES")
                        .HasForeignKey("TE_ETATID")
                        .HasConstraintName("FK_TD_DEMANDES$TE_ETATS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TSRV_SERVEURS", "TSRV_SERVEUR")
                        .WithMany("TD_DEMANDES")
                        .HasForeignKey("TSRV_SERVEURID")
                        .HasConstraintName("FK_TD_DEMANDES$SERVEUR");

                    b.Navigation("TE_ETAT");

                    b.Navigation("TSRV_SERVEUR");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEB_ETAT_BATCHS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TE_ETATS", "TE_ETAT")
                        .WithMany("TEB_ETAT_BATCHS")
                        .HasForeignKey("TE_ETATID")
                        .HasConstraintName("FK_TEB_ETAT_BATCHS$TE_ETATS")
                        .IsRequired();

                    b.Navigation("TE_ETAT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEL_ETAT_LOGICIELS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TE_ETATS", "TE_ETAT")
                        .WithMany("TEL_ETAT_LOGICIELS")
                        .HasForeignKey("TE_ETATID")
                        .HasConstraintName("FK_TEL_ETAT_LOGICIELS$TE_ETATS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TL_LOGICIELS", "TL_LOGICIEL")
                        .WithMany("TEL_ETAT_LOGICIELS")
                        .HasForeignKey("TL_LOGICIELID")
                        .HasConstraintName("FK_TEL_ETAT_LOGICIELS$TL_LOGICIELS")
                        .IsRequired();

                    b.Navigation("TE_ETAT");

                    b.Navigation("TL_LOGICIEL");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEMF_ETAT_MASTER_FERMES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TEM_ETAT_MASTERS", "TEM_ETAT_MASTER")
                        .WithMany("TEMF_ETAT_MASTER_FERMES")
                        .HasForeignKey("TEM_ETAT_MASTERID")
                        .HasConstraintName("FK_TEMF_ETAT_MASTER_FERMES$TEM_ETAT_MASTERS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TF_FERMES", "TF_FERME")
                        .WithMany("TEMF_ETAT_MASTER_FERMES")
                        .HasForeignKey("TF_FERMEID")
                        .HasConstraintName("FK_TEMF_ETAT_MASTER_FERMES$TF_FERMES")
                        .IsRequired();

                    b.Navigation("TEM_ETAT_MASTER");

                    b.Navigation("TF_FERME");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEM_ETAT_MASTERS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TC_CATEGORIES", "TC_CATEGORIE")
                        .WithMany("TEM_ETAT_MASTERS")
                        .HasForeignKey("TC_CATEGORIEID")
                        .HasConstraintName("FK_TEM_ETAT_MASTERS$TC_CATEGORIES")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TP_PERIMETRES", "TP_PERIMETRE")
                        .WithMany("TEM_ETAT_MASTERS")
                        .HasForeignKey("TP_PERIMETREID")
                        .HasConstraintName("FK_TEM_ETAT_MASTERS$TP_PERIMETRES")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TEM_ETAT_MASTERS")
                        .HasForeignKey("TRST_STATUTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRU_USERS", "TRU_RESPONSABLE_FONCTIONNEL")
                        .WithMany("TEM_ETAT_MASTERSTRU_RESPONSABLE_FONCTIONNEL")
                        .HasForeignKey("TRU_RESPONSABLE_FONCTIONNELID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRU_USERS", "TRU_RESPONSABLE_TECHNIQUE")
                        .WithMany("TEM_ETAT_MASTERSTRU_RESPONSABLE_TECHNIQUE")
                        .HasForeignKey("TRU_RESPONSABLE_TECHNIQUEID");

                    b.Navigation("TC_CATEGORIE");

                    b.Navigation("TP_PERIMETRE");

                    b.Navigation("TRST_STATUT");

                    b.Navigation("TRU_RESPONSABLE_FONCTIONNEL");

                    b.Navigation("TRU_RESPONSABLE_TECHNIQUE");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEP_ETAT_PREREQUISS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TE_ETATS", "TE_ETAT")
                        .WithMany("TEP_ETAT_PREREQUISS")
                        .HasForeignKey("TE_ETATID")
                        .HasConstraintName("FK_TEP_PREREQUISS$TE_ETATS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TEP_ETAT_PREREQUISS")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TEP_ETAT_PREREQUISS$TRST_STATUTS")
                        .IsRequired();

                    b.Navigation("TE_ETAT");

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TER_ETAT_RESSOURCES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TE_ETATS", "TE_ETAT")
                        .WithMany("TER_ETAT_RESSOURCES")
                        .HasForeignKey("TE_ETATID")
                        .HasConstraintName("FK_TER_ETAT_RESSOURCES$TE_ETATS")
                        .IsRequired();

                    b.Navigation("TE_ETAT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TE_ETATS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TEM_ETAT_MASTERS", "TEM_ETAT_MASTER")
                        .WithMany("TE_ETATS")
                        .HasForeignKey("TEM_ETAT_MASTERID")
                        .HasConstraintName("FK_TE_ETATS$TEM_ETAT_MASTERS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TE_ETATS")
                        .HasForeignKey("TRST_STATUTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRU_USERS", "TRU_DECLARANT")
                        .WithMany("TE_ETATSTRU_DECLARANT")
                        .HasForeignKey("TRU_DECLARANTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRU_USERS", "TRU_ENV_VIERGE_AUTEUR")
                        .WithMany("TE_ETATSTRU_ENV_VIERGE_AUTEUR")
                        .HasForeignKey("TRU_ENV_VIERGE_AUTEURID");

                    b.Navigation("TEM_ETAT_MASTER");

                    b.Navigation("TRST_STATUT");

                    b.Navigation("TRU_DECLARANT");

                    b.Navigation("TRU_ENV_VIERGE_AUTEUR");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TF_FERMES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TF_FERMES")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TF_FERMES$TRST_STATUTS")
                        .IsRequired();

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TI_INFOS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TI_INFOS")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TI_INFOS$TRST_STATUTS")
                        .IsRequired();

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TLEM_LOGICIEL_EDITEUR_MODELES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TLE_LOGICIEL_EDITEURS", "TLE_LOGICIEL_EDITEUR")
                        .WithMany("TLEM_LOGICIEL_EDITEUR_MODELES")
                        .HasForeignKey("TLE_LOGICIEL_EDITEURID")
                        .HasConstraintName("FK_TLEM_LOGICIEL_EDITEUR_MODELES$TLE_LOGICIEL_EDITEURS")
                        .IsRequired();

                    b.Navigation("TLE_LOGICIEL_EDITEUR");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TL_LOGICIELS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TLE_LOGICIEL_EDITEURS", "TLE_LOGICIEL_EDITEUR")
                        .WithMany("TL_LOGICIELS")
                        .HasForeignKey("TLE_LOGICIEL_EDITEURID")
                        .HasConstraintName("FK_TL_LOGICIELS$TLE_LOGICIEL_EDITEURS");

                    b.Navigation("TLE_LOGICIEL_EDITEUR");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPD_PREREQUIS_DEMANDES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TD_DEMANDES", "TD_DEMANDE")
                        .WithMany("TPD_PREREQUIS_DEMANDES")
                        .HasForeignKey("TD_DEMANDEID")
                        .HasConstraintName("FK_TPD_PREREQUIS_DEMANDES$TD_DEMANDES")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TEP_ETAT_PREREQUISS", "TEP_ETAT_PREREQUIS")
                        .WithMany("TPD_PREREQUIS_DEMANDES")
                        .HasForeignKey("TEP_ETAT_PREREQUISID")
                        .HasConstraintName("FK_TPD_PREREQUIS_DEMANDES$TEP_ETAT_PREREQUIS")
                        .IsRequired();

                    b.Navigation("TD_DEMANDE");

                    b.Navigation("TEP_ETAT_PREREQUIS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPF_PLANIFS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TD_DEMANDES", "TPF_DEMANDE_ORIGINE")
                        .WithMany("TPF_PLANIFS")
                        .HasForeignKey("TPF_DEMANDE_ORIGINEID")
                        .HasConstraintName("FK_TPF_PLANIFS$TD_DEMANDES")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TPF_PLANIFS")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TPF_PLANIFS$TRST_STATUTS")
                        .IsRequired();

                    b.Navigation("TPF_DEMANDE_ORIGINE");

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPR_PROFILS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TPR_PROFILS")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TPR_PROFILS$TRST_STATUTS")
                        .IsRequired();

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPS_PREREQUIS_SCENARIOS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TEP_ETAT_PREREQUISS", "TEP_ETAT_PREREQUIS")
                        .WithMany("TPS_PREREQUIS_SCENARIOS")
                        .HasForeignKey("TEP_ETAT_PREREQUISID")
                        .HasConstraintName("FK_TPS_PREREQUIS_SCENARIOS$TEP_ETAT_PREREQUIS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TS_SCENARIOS", "TS_SCENARIO")
                        .WithMany("TPS_PREREQUIS_SCENARIOS")
                        .HasForeignKey("TS_SCENARIOID")
                        .HasConstraintName("FK_TPS_PREREQUIS_SCENARIOS$TS_SCENARIOS")
                        .IsRequired();

                    b.Navigation("TEP_ETAT_PREREQUIS");

                    b.Navigation("TS_SCENARIO");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPUF_PARALLELEU_FERMES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TF_FERMES", "TF_FERME")
                        .WithMany("TPUF_PARALLELEU_FERMES")
                        .HasForeignKey("TF_FERMEID")
                        .HasConstraintName("FK_TPUF_PARALLELEU_FERMES$TF_FERMES")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TPU_PARALLELEUS", "TPU_PARALLELEU")
                        .WithMany("TPUF_PARALLELEU_FERMES")
                        .HasForeignKey("TPU_PARALLELEUID")
                        .HasConstraintName("FK_TPUF_PARALLELEU_FERMES$TPU_PARALLELEUS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TPUF_PARALLELEU_FERMES")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TPUF_PARALLELEU_FERMES$TRST_STATUTS")
                        .IsRequired();

                    b.Navigation("TF_FERME");

                    b.Navigation("TPU_PARALLELEU");

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPUP_PARALLELEU_PARAMS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TPU_PARALLELEUS", "TPU_PARALLELEU")
                        .WithMany("TPUP_PARALLELEU_PARAMS")
                        .HasForeignKey("TPU_PARALLELEUID")
                        .HasConstraintName("FK_TPUF_PARALLELEU_PARAMS$TPU_PARALLELEUS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TPUP_PARALLELEU_PARAMS")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TPUP_PARALLELEU_PARAMS$TRST_STATUTS")
                        .IsRequired();

                    b.Navigation("TPU_PARALLELEU");

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPU_PARALLELEUS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TPU_PARALLELEUS")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TPU_PARALLELEUS$TRST_STATUTS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TSRV_SERVEURS", "TSRV_SERVEUR")
                        .WithMany("TPU_PARALLELEUS")
                        .HasForeignKey("TSRV_SERVEURID")
                        .HasConstraintName("FK_TPU_PARALLELEUS$SERVEUR")
                        .IsRequired();

                    b.Navigation("TRST_STATUT");

                    b.Navigation("TSRV_SERVEUR");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TP_PERIMETRES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TQM_QUALIF_MODELES", "TQM_QUALIF_MODELE")
                        .WithMany("TP_PERIMETRES")
                        .HasForeignKey("TQM_QUALIF_MODELEID")
                        .HasConstraintName("FK_TP_PERIMETRES$TQM_QUALIF_MODELES");

                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TP_PERIMETRES")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TP_PERIMETRES$TRST_STATUTS")
                        .IsRequired();

                    b.Navigation("TQM_QUALIF_MODELE");

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRAPLAS_APPLICATIONS_AUTH_SCENARIOS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRAS_AUTH_SCENARIOS", "TRAS_AUTH_SCENARIO")
                        .WithMany("TRAPLAS_APPLICATIONS_AUTH_SCENARIOS")
                        .HasForeignKey("TRAS_AUTH_SCENARIOID")
                        .HasConstraintName("FK_TRAPLAS_APPLICATIONS_AUTH_SCENARIOS_TRAS_AUTH_SCENARIO")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRCLI_CLIENTAPPLICATIONS", "TRCLI_CLIENTAPPLICATION")
                        .WithMany("TRAPLAS_APPLICATIONS_AUTH_SCENARIOS")
                        .HasForeignKey("TRCLI_CLIENTAPPLICATIONID")
                        .HasConstraintName("FK_TRAPLAS_APPLICATIONS_AUTH_SCENARIOS_TRCLI_CLIENTAPPLICATIONS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TRAS_AUTH_SCENARIO");

                    b.Navigation("TRCLI_CLIENTAPPLICATION");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRCCL_CATALOG_CLAIMS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRCL_CLAIMS", "TRCL_CLAIM")
                        .WithMany("TRCCL_CATALOG_CLAIMS")
                        .HasForeignKey("TRCL_CLAIMID")
                        .HasConstraintName("FK_RCCL_CATALOG_CLAIMS_TTRCL_CLAIMS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TRCL_CLAIM");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRCLICL_CLIENTAPPLICATIONS_CLAIMS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRCLI_CLIENTAPPLICATIONS", "TRCLI_CLIENTAPPLICATION")
                        .WithMany("TRCLICL_CLIENTAPPLICATIONS_CLAIMS")
                        .HasForeignKey("TRCLI_CLIENTAPPLICATIONID")
                        .HasConstraintName("FK_TRCLICL_CLIENTAPPLICATIONS_CLAIMS_TRCLI_CLIENTAPPLICATIONS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRCL_CLAIMS", "TRCL_CLAIM")
                        .WithMany("TRCLICL_CLIENTAPPLICATIONS_CLAIMS")
                        .HasForeignKey("TRCL_CLAIMID")
                        .HasConstraintName("FK_TRCLICL_CLIENTAPPLICATIONS_CLAIMS_TRCL_CLAIMS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TRCL_CLAIM");

                    b.Navigation("TRCLI_CLIENTAPPLICATION");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRD_RESSOURCE_DEMANDES", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TER_ETAT_RESSOURCES", "TER_ETAT_RESSOURCE")
                        .WithMany("TRD_RESSOURCE_DEMANDES")
                        .HasForeignKey("TER_ETAT_RESSOURCEID")
                        .HasConstraintName("FK_TRD_RESSOURCE_DEMANDES$TER_ETAT_RESSOURCES")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TD_DEMANDES", "T")
                        .WithMany("TRD_RESSOURCE_DEMANDES")
                        .HasForeignKey("TD_DEMANDEID", "TE_ETATID")
                        .HasConstraintName("FK_TRD_RESSOURCE_DEMANDES$TD_DEMANDES")
                        .HasPrincipalKey("TD_DEMANDEID", "TE_ETATID")
                        .IsRequired();

                    b.Navigation("T");

                    b.Navigation("TER_ETAT_RESSOURCE");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRS_RESSOURCE_SCENARIOS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TER_ETAT_RESSOURCES", "TER_ETAT_RESSOURCE")
                        .WithMany("TRS_RESSOURCE_SCENARIOS")
                        .HasForeignKey("TER_ETAT_RESSOURCEID")
                        .HasConstraintName("FK_TRS_RESSOURCE_SCENARIOS$TER_ETAT_RESSOURCES")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TS_SCENARIOS", "TS_SCENARIO")
                        .WithMany("TRS_RESSOURCE_SCENARIOS")
                        .HasForeignKey("TS_SCENARIOID")
                        .HasConstraintName("FK_TRS_RESSOURCE_SCENARIOS$TS_SCENARIOS")
                        .IsRequired();

                    b.Navigation("TER_ETAT_RESSOURCE");

                    b.Navigation("TS_SCENARIO");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRUCL_USERS_CLAIMS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRCLI_CLIENTAPPLICATIONS", "TRCLI_CLIENTAPPLICATION")
                        .WithMany("TRUCL_USERS_CLAIMS")
                        .HasForeignKey("TRCLI_CLIENTAPPLICATIONID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRCL_CLAIMS", "TRCL_CLAIM")
                        .WithMany("TRUCL_USERS_CLAIMS")
                        .HasForeignKey("TRCL_CLAIMID")
                        .HasConstraintName("FK_TRUCL_USERS_CLAIMS_TRCL_CLAIMS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRU_USERS", "TRU_USER")
                        .WithMany("TRUCL_USERS_CLAIMS")
                        .HasForeignKey("TRU_USERID")
                        .HasConstraintName("FK_TRUCL_USERS_CLAIMS_TRU_USERS");

                    b.Navigation("TRCL_CLAIM");

                    b.Navigation("TRCLI_CLIENTAPPLICATION");

                    b.Navigation("TRU_USER");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TSL_SERVEUR_LOGICIELS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TL_LOGICIELS", "TL_LOGICIEL")
                        .WithMany("TSL_SERVEUR_LOGICIELS")
                        .HasForeignKey("TL_LOGICIELID")
                        .HasConstraintName("FK_TSL_SERVEUR_LOGICIELS$TL_LOGICIELS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TSRV_SERVEURS", "TSRV_SERVEUR")
                        .WithMany("TSL_SERVEUR_LOGICIELS")
                        .HasForeignKey("TSRV_SERVEURID")
                        .HasConstraintName("FK_TSL_SERVEUR_LOGICIELS$SERVEUR")
                        .IsRequired();

                    b.Navigation("TL_LOGICIEL");

                    b.Navigation("TSRV_SERVEUR");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TSP_SERVEUR_PARAMS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TSP_SERVEUR_PARAMS")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TSP_SERVEUR_PARAMS$TRST_STATUTS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TSRV_SERVEURS", "TSRV_SERVEUR")
                        .WithMany("TSP_SERVEUR_PARAMS")
                        .HasForeignKey("TSRV_SERVEURID")
                        .HasConstraintName("FK_TSP_SERVEUR_PARAMS$SERVEUR")
                        .IsRequired();

                    b.Navigation("TRST_STATUT");

                    b.Navigation("TSRV_SERVEUR");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TSRV_SERVEURS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TSRV_SERVEURS")
                        .HasForeignKey("TRST_STATUTID")
                        .HasConstraintName("FK_TSRV_SERVEURS$TRST_STATUTS")
                        .IsRequired();

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TS_SCENARIOS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TE_ETATS", "TE_ETAT")
                        .WithMany("TS_SCENARIOS")
                        .HasForeignKey("TE_ETATID")
                        .HasConstraintName("FK_TS_SCENARIOS$TE_ETATS")
                        .IsRequired();

                    b.HasOne("Krialys.Data.EF.Univers.TRST_STATUTS", "TRST_STATUT")
                        .WithMany("TS_SCENARIOS")
                        .HasForeignKey("TRST_STATUTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TE_ETAT");

                    b.Navigation("TRST_STATUT");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TTAU_AUTHENTIFICATIONS", b =>
                {
                    b.HasOne("Krialys.Data.EF.Univers.TRU_USERS", "TRU_USER")
                        .WithMany("TTAU_AUTHENTIFICATIONS")
                        .HasForeignKey("TRU_USERID")
                        .HasConstraintName("FK_TTAU_AUTHENTIFICATIONS_TRU_USERS");

                    b.Navigation("TRU_USER");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TC_CATEGORIES", b =>
                {
                    b.Navigation("TEM_ETAT_MASTERS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TD_DEMANDES", b =>
                {
                    b.Navigation("TBD_BATCH_DEMANDES");

                    b.Navigation("TDP_DEMANDE_PROCESS");

                    b.Navigation("TDQ_DEMANDE_QUALIFS");

                    b.Navigation("TPD_PREREQUIS_DEMANDES");

                    b.Navigation("TPF_PLANIFS");

                    b.Navigation("TRD_RESSOURCE_DEMANDES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEB_ETAT_BATCHS", b =>
                {
                    b.Navigation("TBD_BATCH_DEMANDES");

                    b.Navigation("TBS_BATCH_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEM_ETAT_MASTERS", b =>
                {
                    b.Navigation("TE_ETATS");

                    b.Navigation("TEMF_ETAT_MASTER_FERMES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TEP_ETAT_PREREQUISS", b =>
                {
                    b.Navigation("TPD_PREREQUIS_DEMANDES");

                    b.Navigation("TPS_PREREQUIS_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TER_ETAT_RESSOURCES", b =>
                {
                    b.Navigation("TRD_RESSOURCE_DEMANDES");

                    b.Navigation("TRS_RESSOURCE_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TE_ETATS", b =>
                {
                    b.Navigation("TD_DEMANDES");

                    b.Navigation("TEB_ETAT_BATCHS");

                    b.Navigation("TEL_ETAT_LOGICIELS");

                    b.Navigation("TEP_ETAT_PREREQUISS");

                    b.Navigation("TER_ETAT_RESSOURCES");

                    b.Navigation("TS_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TF_FERMES", b =>
                {
                    b.Navigation("TEMF_ETAT_MASTER_FERMES");

                    b.Navigation("TPUF_PARALLELEU_FERMES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TLE_LOGICIEL_EDITEURS", b =>
                {
                    b.Navigation("TL_LOGICIELS");

                    b.Navigation("TLEM_LOGICIEL_EDITEUR_MODELES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TL_LOGICIELS", b =>
                {
                    b.Navigation("TEL_ETAT_LOGICIELS");

                    b.Navigation("TSL_SERVEUR_LOGICIELS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TPU_PARALLELEUS", b =>
                {
                    b.Navigation("TPUF_PARALLELEU_FERMES");

                    b.Navigation("TPUP_PARALLELEU_PARAMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TP_PERIMETRES", b =>
                {
                    b.Navigation("TEM_ETAT_MASTERS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TQM_QUALIF_MODELES", b =>
                {
                    b.Navigation("TP_PERIMETRES");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRAS_AUTH_SCENARIOS", b =>
                {
                    b.Navigation("TRAPLAS_APPLICATIONS_AUTH_SCENARIOS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRCLI_CLIENTAPPLICATIONS", b =>
                {
                    b.Navigation("TRAPLAS_APPLICATIONS_AUTH_SCENARIOS");

                    b.Navigation("TRCLICL_CLIENTAPPLICATIONS_CLAIMS");

                    b.Navigation("TRUCL_USERS_CLAIMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRCL_CLAIMS", b =>
                {
                    b.Navigation("TRCCL_CATALOG_CLAIMS");

                    b.Navigation("TRCLICL_CLIENTAPPLICATIONS_CLAIMS");

                    b.Navigation("TRUCL_USERS_CLAIMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRST_STATUTS", b =>
                {
                    b.Navigation("TE_ETATS");

                    b.Navigation("TEM_ETAT_MASTERS");

                    b.Navigation("TEP_ETAT_PREREQUISS");

                    b.Navigation("TF_FERMES");

                    b.Navigation("TI_INFOS");

                    b.Navigation("TP_PERIMETRES");

                    b.Navigation("TPF_PLANIFS");

                    b.Navigation("TPR_PROFILS");

                    b.Navigation("TPU_PARALLELEUS");

                    b.Navigation("TPUF_PARALLELEU_FERMES");

                    b.Navigation("TPUP_PARALLELEU_PARAMS");

                    b.Navigation("TS_SCENARIOS");

                    b.Navigation("TSP_SERVEUR_PARAMS");

                    b.Navigation("TSRV_SERVEURS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TRU_USERS", b =>
                {
                    b.Navigation("TE_ETATSTRU_DECLARANT");

                    b.Navigation("TE_ETATSTRU_ENV_VIERGE_AUTEUR");

                    b.Navigation("TEM_ETAT_MASTERSTRU_RESPONSABLE_FONCTIONNEL");

                    b.Navigation("TEM_ETAT_MASTERSTRU_RESPONSABLE_TECHNIQUE");

                    b.Navigation("TRUCL_USERS_CLAIMS");

                    b.Navigation("TTAU_AUTHENTIFICATIONS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TSRV_SERVEURS", b =>
                {
                    b.Navigation("TD_DEMANDES");

                    b.Navigation("TPU_PARALLELEUS");

                    b.Navigation("TSL_SERVEUR_LOGICIELS");

                    b.Navigation("TSP_SERVEUR_PARAMS");
                });

            modelBuilder.Entity("Krialys.Data.EF.Univers.TS_SCENARIOS", b =>
                {
                    b.Navigation("TBS_BATCH_SCENARIOS");

                    b.Navigation("TPS_PREREQUIS_SCENARIOS");

                    b.Navigation("TRS_RESSOURCE_SCENARIOS");
                });
#pragma warning restore 612, 618
        }
    }
}
