// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using Krialys.Entities.COMMON;
using Krialys.Data.EF.Univers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Krialys.Data.EF.Univers
{
    /// <summary>
    /// DbContext for UNIVERS entities
    /// </summary>
#pragma warning disable S101 // Types should be named in PascalCase
    public partial class KrialysDbContext : DbContext
#pragma warning restore S101 // Types should be named in PascalCase
    {
        public KrialysDbContext() { }

        public KrialysDbContext(DbContextOptions<KrialysDbContext> options) : base(options) { }

        protected override void OnConfiguring(DbContextOptionsBuilder options)
        {
            if (!options.IsConfigured)
                options.UseSqlite("DataSource=../../../ApiUnivers/App_Data/Database/db-Univers.db3");
        }

        //#region Authentication 
        public virtual DbSet<TRCLICL_CLIENTAPPLICATIONS_CLAIMS> TRCLICL_CLIENTAPPLICATIONS_CLAIMS { get; set; }
        public virtual DbSet<TRCLI_CLIENTAPPLICATIONS> TRCLI_CLIENTAPPLICATIONS { get; set; }
        public virtual DbSet<TRCL_CLAIMS> TRCL_CLAIMS { get; set; }
        public virtual DbSet<TRUCL_USERS_CLAIMS> TRUCL_USERS_CLAIMS { get; set; }
        public virtual DbSet<TRU_USERS> TRU_USERS { get; set; }
        public virtual DbSet<TTAU_AUTHENTIFICATIONS> TTAU_AUTHENTIFICATIONS { get; set; }

        public virtual DbSet<TRCCL_CATALOG_CLAIMS> TRCCL_CATALOG_CLAIMS { get; set; }
        public virtual DbSet<TRAPLAS_APPLICATIONS_AUTH_SCENARIOS> TRAPLAS_APPLICATIONS_AUTH_SCENARIOS { get; set; }
        public virtual DbSet<TRAS_AUTH_SCENARIOS> TRAS_AUTH_SCENARIOS { get; set; }

        //#endregion Authentication

        #region "Habilitation DTF"
        public virtual DbSet<TH_HABILITATIONS> TH_HABILITATIONS { get; set; }
        public virtual DbSet<TSG_SCENARIO_GPES> TSG_SCENARIO_GPES { get; set; }
        public virtual DbSet<TSGA_SCENARIO_GPE_ASSOCIES> TSGA_SCENARIO_GPE_ASSOCIES { get; set; }
        public virtual DbSet<TTE_TEAMS> TTE_TEAMS { get; set; }
        public virtual DbSet<TUTE_USER_TEAMS> TUTE_USER_TEAMS { get; set; }
        public virtual DbSet<VDTFH_HABILITATIONS> VDTFH_HABILITATIONS { get; set; }


        #endregion "Habilitation DTF"

        #region Orkestra
        public virtual DbSet<TBD_BATCH_DEMANDES> TBD_BATCH_DEMANDES { get; set; }
        public virtual DbSet<TBS_BATCH_SCENARIOS> TBS_BATCH_SCENARIOS { get; set; }
        public virtual DbSet<TC_CATEGORIES> TC_CATEGORIES { get; set; }
        public virtual DbSet<TDQ_DEMANDE_QUALIFS> TDQ_DEMANDE_QUALIFS { get; set; }
        public virtual DbSet<TD_DEMANDES> TD_DEMANDES { get; set; }
        public virtual DbSet<TEB_ETAT_BATCHS> TEB_ETAT_BATCHS { get; set; }
        public virtual DbSet<TEL_ETAT_LOGICIELS> TEL_ETAT_LOGICIELS { get; set; }
        public virtual DbSet<TEMF_ETAT_MASTER_FERMES> TEMF_ETAT_MASTER_FERMES { get; set; }
        public virtual DbSet<TEM_ETAT_MASTERS> TEM_ETAT_MASTERS { get; set; }
        public virtual DbSet<TEP_ETAT_PREREQUISS> TEP_ETAT_PREREQUISS { get; set; }
        public virtual DbSet<TER_ETAT_RESSOURCES> TER_ETAT_RESSOURCES { get; set; }
        public virtual DbSet<TE_ETATS> TE_ETATS { get; set; }
        public virtual DbSet<TF_FERMES> TF_FERMES { get; set; }
        public virtual DbSet<TI_INFOS> TI_INFOS { get; set; }
        public virtual DbSet<TLEM_LOGICIEL_EDITEUR_MODELES> TLEM_LOGICIEL_EDITEUR_MODELES { get; set; }
        public virtual DbSet<TLE_LOGICIEL_EDITEURS> TLE_LOGICIEL_EDITEURS { get; set; }
        public virtual DbSet<TL_LOGICIELS> TL_LOGICIELS { get; set; }
        public virtual DbSet<TPD_PREREQUIS_DEMANDES> TPD_PREREQUIS_DEMANDES { get; set; }
        public virtual DbSet<TPF_PLANIFS> TPF_PLANIFS { get; set; }
        public virtual DbSet<TPR_PROFILS> TPR_PROFILS { get; set; }
        public virtual DbSet<TPS_PREREQUIS_SCENARIOS> TPS_PREREQUIS_SCENARIOS { get; set; }
        public virtual DbSet<TPUF_PARALLELEU_FERMES> TPUF_PARALLELEU_FERMES { get; set; }
        public virtual DbSet<TPUP_PARALLELEU_PARAMS> TPUP_PARALLELEU_PARAMS { get; set; }
        public virtual DbSet<TPU_PARALLELEUS> TPU_PARALLELEUS { get; set; }
        public virtual DbSet<TP_PERIMETRES> TP_PERIMETRES { get; set; }
        public virtual DbSet<TQM_QUALIF_MODELES> TQM_QUALIF_MODELES { get; set; }
        public virtual DbSet<TRD_RESSOURCE_DEMANDES> TRD_RESSOURCE_DEMANDES { get; set; }
        public virtual DbSet<TR_LNG_Languages> TR_LNG_Languages { get; set; }
        public virtual DbSet<TRST_STATUTS> TRST_STATUTS { get; set; }
        public virtual DbSet<TRS_RESSOURCE_SCENARIOS> TRS_RESSOURCE_SCENARIOS { get; set; }
        public virtual DbSet<TRTZ_TZS> TRTZ_TZS { get; set; }
        public virtual DbSet<TSL_SERVEUR_LOGICIELS> TSL_SERVEUR_LOGICIELS { get; set; }
        public virtual DbSet<TSP_SERVEUR_PARAMS> TSP_SERVEUR_PARAMS { get; set; }
        public virtual DbSet<TSRV_SERVEURS> TSRV_SERVEURS { get; set; }
        public virtual DbSet<TS_SCENARIOS> TS_SCENARIOS { get; set; }

        public virtual DbSet<TDP_DEMANDE_PROCESS> TDP_DEMANDE_PROCESS { get; set; }

        public virtual DbSet<TR_MEL_EMail_Templates> TR_MEL_EMail_Templates { get; set; }

        /*VUES */
        public virtual DbSet<VSCU_CTRL_STRUCTURE_UPLOADS> VSCU_CTRL_STRUCTURE_UPLOADS { get; set; }

        public virtual DbSet<VDE_DEMANDES_ETENDUES> VDE_DEMANDES_ETENDUES { get; set; }

        public virtual DbSet<VDE_DEMANDES_RESSOURCES> VDE_DEMANDES_RESSOURCES { get; set; }

        public virtual DbSet<VPE_PLANIF_ENTETES> VPE_PLANIF_ENTETES { get; set; }
        public virtual DbSet<VPD_PLANIF_DETAILS> VPD_PLANIF_DETAILS { get; set; }

        #endregion Orkestra

        #region accueil
        public virtual DbSet<VACCGD_ACCUEIL_GRAPHE_DEMANDES> VACCGD_ACCUEIL_GRAPHE_DEMANDES { get; set; }
        public virtual DbSet<VACCGQ_ACCUEIL_GRAPHE_QUALITES> VACCGQ_ACCUEIL_GRAPHE_QUALITES { get; set; }

        #endregion

        #region DS CMD

        public virtual DbSet<TCMD_COMMANDES> TCMD_COMMANDES { get; set; }
        public virtual DbSet<TCMD_CR_CMD_RAISON_PHASES> TCMD_CR_CMD_RAISON_PHASES { get; set; }
        public virtual DbSet<TCMD_DA_DEMANDES_ASSOCIEES> TCMD_DA_DEMANDES_ASSOCIEES { get; set; }
        public virtual DbSet<TCMD_DOC_DOCUMENTS> TCMD_DOC_DOCUMENTS { get; set; }
        public virtual DbSet<TCMD_MC_MODE_CREATIONS> TCMD_MC_MODE_CREATIONS { get; set; }
        public virtual DbSet<TCMD_PH_PHASES> TCMD_PH_PHASES { get; set; }
        public virtual DbSet<TCMD_RP_RAISON_PHASES> TCMD_RP_RAISON_PHASES { get; set; }
        public virtual DbSet<TCMD_SP_SUIVI_PHASES> TCMD_SP_SUIVI_PHASES { get; set; }
        public virtual DbSet<TCMD_TD_TYPE_DOCUMENTS> TCMD_TD_TYPE_DOCUMENTS { get; set; }

        public virtual DbSet<TDC_DEMANDES_COMMANDES> TDC_DEMANDES_COMMANDES { get; set; }

        #endregion

        // PU
        public virtual DbSet<PARALLELEU> PARALLELEU { get; set; }
        public virtual DbSet<TM_LIC_Licence> TM_LIC_Licence { get; set; }

        public virtual DbSet<TR_WST_WebSite_Settings> TR_WST_WebSite_Settings { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyAllConfigurations<KrialysDbContext>();

            // Champs calculés en BDD
            modelBuilder.Entity<TRU_USERS>()
                   .Property(p => p.TRU_FULLNAME)
                   .HasComputedColumnSql("[TRU_NAME] || ' ' || [TRU_FIRST_NAME]");

            modelBuilder.Entity<TE_ETATS>()
                .Property(p => p.TE_VERSION)
                .HasComputedColumnSql("[TE_INDICE_REVISION_L1] || '.' || [TE_INDICE_REVISION_L2] || '.' || [TE_INDICE_REVISION_L3]");

            modelBuilder.Entity<TE_ETATS>()
               .Property(p => p.TE_FULLNAME)
               .HasComputedColumnSql("[TE_NOM_ETAT] || ' (' || [TE_INDICE_REVISION_L1] || '.' || [TE_INDICE_REVISION_L2] || '.' || [TE_INDICE_REVISION_L3] ||')'");

            #region Authentication
            modelBuilder.Entity<TRCLICL_CLIENTAPPLICATIONS_CLAIMS>(entity =>
            {
                entity.HasIndex(e => new { e.TRCLI_CLIENTAPPLICATIONID, e.TRCL_CLAIMID })
                  .HasDatabaseName("UQ_TRCLICL_CLIENTAPPLICATIONS_CLAIMS");
                // .IsUnique();

                entity.HasOne(d => d.TRCLI_CLIENTAPPLICATION)
                    .WithMany(p => p.TRCLICL_CLIENTAPPLICATIONS_CLAIMS)
                    .HasForeignKey(d => d.TRCLI_CLIENTAPPLICATIONID)
                    .HasConstraintName("FK_TRCLICL_CLIENTAPPLICATIONS_CLAIMS_TRCLI_CLIENTAPPLICATIONS");

                entity.HasOne(d => d.TRCL_CLAIM)
                    .WithMany(p => p.TRCLICL_CLIENTAPPLICATIONS_CLAIMS)
                    .HasForeignKey(d => d.TRCL_CLAIMID)
                    .HasConstraintName("FK_TRCLICL_CLIENTAPPLICATIONS_CLAIMS_TRCL_CLAIMS");
            });

            modelBuilder.Entity<TRUCL_USERS_CLAIMS>(entity =>
            {
                entity.HasIndex(e => new { e.TRU_USERID, e.TRCL_CLAIMID })
                    .HasDatabaseName("UQ_TRUCL_USERS_CLAIMS");
                //    .IsUnique();

                entity.HasOne(d => d.TRCL_CLAIM)
                    .WithMany(p => p.TRUCL_USERS_CLAIMS)
                    .HasForeignKey(d => d.TRCL_CLAIMID)
                    .HasConstraintName("FK_TRUCL_USERS_CLAIMS_TRCL_CLAIMS");

                entity.HasOne(d => d.TRU_USER)
                    .WithMany(p => p.TRUCL_USERS_CLAIMS)
                    .HasForeignKey(d => d.TRU_USERID)
                    .HasConstraintName("FK_TRUCL_USERS_CLAIMS_TRU_USERS");
            });

            modelBuilder.Entity<TTAU_AUTHENTIFICATIONS>(entity =>
            {
                entity.HasOne(d => d.TRU_USER)
                    .WithMany(p => p.TTAU_AUTHENTIFICATIONS)
                    .HasForeignKey(d => d.TRU_USERID)
                    .HasConstraintName("FK_TTAU_AUTHENTIFICATIONS_TRU_USERS");

                // *** SQLITE ***
                if (Database.ProviderName == "Microsoft.EntityFrameworkCore.Sqlite")
                {
                    entity.Property(e => e.TTAU_AUTH_CODE_EXP).HasConversion(new DateTimeOffsetToStringConverter());
                    entity.Property(e => e.TTAU_REFRESH_TOKEN_EXP).HasConversion(new DateTimeOffsetToStringConverter());
                }

            });


            modelBuilder.Entity<TRCCL_CATALOG_CLAIMS>(entity =>
            {
                entity.HasOne(d => d.TRCL_CLAIM)
                    .WithMany(p => p.TRCCL_CATALOG_CLAIMS)
                    .HasForeignKey(d => d.TRCL_CLAIMID)
                    .HasConstraintName("FK_RCCL_CATALOG_CLAIMS_TTRCL_CLAIMS");
            });

            modelBuilder.Entity<TRAPLAS_APPLICATIONS_AUTH_SCENARIOS>(entity =>
            {
                entity.HasIndex(e => new { e.TRAS_AUTH_SCENARIOID, e.TRCLI_CLIENTAPPLICATIONID })
                  .HasDatabaseName("IX_TRAPLAS_APPLICATIONS_AUTH_SCENARIOS");
                // .IsUnique();

                entity.HasOne(d => d.TRCLI_CLIENTAPPLICATION)
                    .WithMany(p => p.TRAPLAS_APPLICATIONS_AUTH_SCENARIOS)
                    .HasForeignKey(d => d.TRCLI_CLIENTAPPLICATIONID)
                    .HasConstraintName("FK_TRAPLAS_APPLICATIONS_AUTH_SCENARIOS_TRCLI_CLIENTAPPLICATIONS");

                /*decommenté 2021.04.16 */
                entity.HasOne(d => d.TRAS_AUTH_SCENARIO)
                    .WithMany(p => p.TRAPLAS_APPLICATIONS_AUTH_SCENARIOS)
                    .HasForeignKey(d => d.TRAS_AUTH_SCENARIOID)
                    .HasConstraintName("FK_TRAPLAS_APPLICATIONS_AUTH_SCENARIOS_TRAS_AUTH_SCENARIO");
            });
            #endregion Authentication

            #region Orkestra
            modelBuilder.Entity<TBD_BATCH_DEMANDES>(entity =>
            {
                entity.HasOne(d => d.TEB_ETAT_BATCH)
                    .WithMany(p => p.TBD_BATCH_DEMANDES)
                    .HasForeignKey(d => d.TEB_ETAT_BATCHID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TBD_BATCH_DEMANDES$TEB_ETAT_BATCHS");

                entity.HasOne(d => d.T)
                    .WithMany(p => p.TBD_BATCH_DEMANDES)
                    .HasPrincipalKey(p => new { p.TD_DEMANDEID, p.TE_ETATID })
                    .HasForeignKey(d => new { d.TD_DEMANDEID, d.TE_ETATID })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TBD_BATCH_DEMANDES$TD_DEMANDES");
            });

            modelBuilder.Entity<TBS_BATCH_SCENARIOS>(entity =>
            {
                entity.HasKey(e => new { e.TEB_ETAT_BATCHID, e.TS_SCENARIOID });

                entity.HasOne(d => d.TEB_ETAT_BATCH)
                    .WithMany(p => p.TBS_BATCH_SCENARIOS)
                    .HasForeignKey(d => d.TEB_ETAT_BATCHID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TBS_BATCH_SCENARIOS$TEB_ETAT_BATCHS");

                entity.HasOne(d => d.TS_SCENARIO)
                    .WithMany(p => p.TBS_BATCH_SCENARIOS)
                    .HasForeignKey(d => d.TS_SCENARIOID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TBS_BATCH_SCENARIOS$TS_SCENARIOS");
            });

            modelBuilder.Entity<TC_CATEGORIES>(entity =>
            {
                //entity.HasKey(e => new { e.TC_CATEGORIEID });
                //entity.Property(e => e.TC_CATEGORIEID).ValueGeneratedOnAdd();

                entity.HasKey(e => e.TC_CATEGORIEID)
                  .HasName("PK_CATEGORIES");

            });

            modelBuilder.Entity<TDQ_DEMANDE_QUALIFS>(entity =>
            {
                entity.HasOne(d => d.TD_DEMANDE)
                    .WithMany(p => p.TDQ_DEMANDE_QUALIFS)
                    .HasForeignKey(d => d.TD_DEMANDEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDQ_DEMANDE_QUALIFS$TD_DEMANDES");
            });

            modelBuilder.Entity<TDP_DEMANDE_PROCESS>(entity =>
            {
                entity.HasOne(d => d.TD_DEMANDE)
                    .WithMany(p => p.TDP_DEMANDE_PROCESS)
                    .HasForeignKey(d => d.TD_DEMANDEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TDP_DEMANDE_PROCESSS$TD_DEMANDES");
            });

            modelBuilder.Entity<TD_DEMANDES>(entity =>
            {
                // entity.Property(e => e.TD_DATE_DEMANDE).HasDefaultValueSql("(sysdatetimeoffset())");

                entity.Property(e => e.TD_DUREE_PRODUCTION_REEL).HasDefaultValueSql("((0))");

                entity.Property(e => e.TD_RESULT_NB_DOWNLOAD).HasDefaultValueSql("((0))");

                entity.Property(e => e.TD_SEND_MAIL_CLIENT).HasDefaultValueSql("('O')");

                entity.Property(e => e.TRST_STATUTID).HasDefaultValueSql("('DB')");

                entity.HasOne(d => d.TE_ETAT)
                    .WithMany(p => p.TD_DEMANDES)
                    .HasForeignKey(d => d.TE_ETATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TD_DEMANDES$TE_ETATS");

                entity.HasOne(d => d.TSRV_SERVEUR)
                    .WithMany(p => p.TD_DEMANDES)
                    .HasForeignKey(d => d.TSRV_SERVEURID)
                    .HasConstraintName("FK_TD_DEMANDES$SERVEUR");
            });

            modelBuilder.Entity<TEB_ETAT_BATCHS>(entity =>
            {
                // entity.Property(e => e.TEB_DATE_CREATION).HasDefaultValueSql("(sysdatetimeoffset())");

                entity.HasOne(d => d.TE_ETAT)
                    .WithMany(p => p.TEB_ETAT_BATCHS)
                    .HasForeignKey(d => d.TE_ETATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEB_ETAT_BATCHS$TE_ETATS");
            });

            modelBuilder.Entity<TEL_ETAT_LOGICIELS>(entity =>
            {
                // entity.HasKey(e => new { e.TE_ETATID, e.TL_LOGICIELID });

                entity.HasIndex(e => new { e.TE_ETATID, e.TL_LOGICIELID })
                 .HasDatabaseName("UQ_TEL_ETAT_LOGICIELS")
                 .IsUnique();

                entity.HasOne(d => d.TE_ETAT)
                    .WithMany(p => p.TEL_ETAT_LOGICIELS)
                    .HasForeignKey(d => d.TE_ETATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEL_ETAT_LOGICIELS$TE_ETATS");

                entity.HasOne(d => d.TL_LOGICIEL)
                    .WithMany(p => p.TEL_ETAT_LOGICIELS)
                    .HasForeignKey(d => d.TL_LOGICIELID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEL_ETAT_LOGICIELS$TL_LOGICIELS");
            });

            modelBuilder.Entity<TEMF_ETAT_MASTER_FERMES>(entity =>
            {
                entity.Property(e => e.TEMF_ORDRE_PRIORITE).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TEM_ETAT_MASTER)
                    .WithMany(p => p.TEMF_ETAT_MASTER_FERMES)
                    .HasForeignKey(d => d.TEM_ETAT_MASTERID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMF_ETAT_MASTER_FERMES$TEM_ETAT_MASTERS");

                entity.HasOne(d => d.TF_FERME)
                    .WithMany(p => p.TEMF_ETAT_MASTER_FERMES)
                    .HasForeignKey(d => d.TF_FERMEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEMF_ETAT_MASTER_FERMES$TF_FERMES");
            });

            modelBuilder.Entity<TEM_ETAT_MASTERS>(entity =>
            {
                // entity.Property(e => e.TEM_DATE_CREATION).HasDefaultValueSql("(sysdatetimeoffset())");

                entity.Property(e => e.TRST_STATUTID).HasDefaultValueSql("('A')");

                entity.HasOne(d => d.TP_PERIMETRE)
                    .WithMany(p => p.TEM_ETAT_MASTERS)
                    .HasForeignKey(d => d.TP_PERIMETREID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEM_ETAT_MASTERS$TP_PERIMETRES");

                entity.HasOne(d => d.TC_CATEGORIE)
                    .WithMany(p => p.TEM_ETAT_MASTERS)
                    .HasForeignKey(d => d.TC_CATEGORIEID)
                    .HasConstraintName("FK_TEM_ETAT_MASTERS$TC_CATEGORIES");
            });

            modelBuilder.Entity<TEP_ETAT_PREREQUISS>(entity =>
            {
                entity.HasOne(d => d.TE_ETAT)
                    .WithMany(p => p.TEP_ETAT_PREREQUISS)
                    .HasForeignKey(d => d.TE_ETATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEP_PREREQUISS$TE_ETATS");

                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TEP_ETAT_PREREQUISS)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEP_ETAT_PREREQUISS$TRST_STATUTS");
            });

            modelBuilder.Entity<TER_ETAT_RESSOURCES>(entity =>
            {
                entity.Property(e => e.TER_IS_PATTERN).HasDefaultValueSql("('N')");

                entity.HasOne(d => d.TE_ETAT)
                    .WithMany(p => p.TER_ETAT_RESSOURCES)
                    .HasForeignKey(d => d.TE_ETATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TER_ETAT_RESSOURCES$TE_ETATS");
            });

            modelBuilder.Entity<TE_ETATS>(entity =>
            {
                // entity.Property(e => e.TE_DATE_REVISION).HasDefaultValueSql("(sysdatetimeoffset())");

                entity.Property(e => e.TE_ENV_VIERGE_UPLOADED).HasDefaultValueSql("('N')");

                entity.Property(e => e.TE_INDICE_REVISION_L1).HasDefaultValueSql("((1))");

                entity.Property(e => e.TE_SEND_MAIL_CLIENT).HasDefaultValueSql("('O')");

                entity.Property(e => e.TE_SEND_MAIL_GESTIONNAIRE).HasDefaultValueSql("('O')");

                entity.Property(e => e.TE_TYPE_SORTIE).HasDefaultValueSql("('M')");

                entity.Property(e => e.TE_VALIDATION_IMPLICITE).HasDefaultValueSql("('N')");

                entity.Property(e => e.TRST_STATUTID).HasDefaultValueSql("('B')");

                entity.HasOne(d => d.TEM_ETAT_MASTER)
                    .WithMany(p => p.TE_ETATS)
                    .HasForeignKey(d => d.TEM_ETAT_MASTERID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TE_ETATS$TEM_ETAT_MASTERS");
            });

            modelBuilder.Entity<TF_FERMES>(entity =>
            {
                entity.HasKey(e => e.TF_FERMEID)
                    .HasName("PK_FERMES");

                entity.Property(e => e.TF_EN_MAINTENANCE).HasDefaultValueSql("('N')");

                entity.Property(e => e.TRST_STATUTID).HasDefaultValueSql("('A')");

                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TF_FERMES)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TF_FERMES$TRST_STATUTS");
            });

            modelBuilder.Entity<TI_INFOS>(entity =>
            {
                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TI_INFOS)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TI_INFOS$TRST_STATUTS");
            });

            modelBuilder.Entity<TLEM_LOGICIEL_EDITEUR_MODELES>(entity =>
            {
                entity.HasKey(e => e.TLEM_LOGICIEL_EDITEUR_MODELEID);//.IsClustered(false); this avoids SQL Server EF library nuget as long as we are only using SQLITE

                entity.HasOne(d => d.TLE_LOGICIEL_EDITEUR)
                    .WithMany(p => p.TLEM_LOGICIEL_EDITEUR_MODELES)
                    .HasForeignKey(d => d.TLE_LOGICIEL_EDITEURID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TLEM_LOGICIEL_EDITEUR_MODELES$TLE_LOGICIEL_EDITEURS");
            });

            modelBuilder.Entity<TL_LOGICIELS>(entity =>
            {
                entity.HasOne(d => d.TLE_LOGICIEL_EDITEUR)
                    .WithMany(p => p.TL_LOGICIELS)
                    .HasForeignKey(d => d.TLE_LOGICIEL_EDITEURID)
                    .HasConstraintName("FK_TL_LOGICIELS$TLE_LOGICIEL_EDITEURS");
            });

            modelBuilder.Entity<TPD_PREREQUIS_DEMANDES>(entity =>
            {
                entity.HasKey(e => new { e.TPD_PREREQUIS_DEMANDEID });

                entity.HasOne(d => d.TD_DEMANDE)
                    .WithMany(p => p.TPD_PREREQUIS_DEMANDES)
                    .HasForeignKey(d => d.TD_DEMANDEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPD_PREREQUIS_DEMANDES$TD_DEMANDES");

                entity.HasOne(d => d.TEP_ETAT_PREREQUIS)
                    .WithMany(p => p.TPD_PREREQUIS_DEMANDES)
                    .HasForeignKey(d => d.TEP_ETAT_PREREQUISID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPD_PREREQUIS_DEMANDES$TEP_ETAT_PREREQUIS");
            });

            modelBuilder.Entity<TPF_PLANIFS>(entity =>
            {
                entity.HasOne(d => d.TPF_DEMANDE_ORIGINE)
                    .WithMany(p => p.TPF_PLANIFS)
                    .HasForeignKey(d => d.TPF_DEMANDE_ORIGINEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPF_PLANIFS$TD_DEMANDES");

                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TPF_PLANIFS)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPF_PLANIFS$TRST_STATUTS");
            });

            modelBuilder.Entity<TPR_PROFILS>(entity =>
            {
                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TPR_PROFILS)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPR_PROFILS$TRST_STATUTS");
            });

            modelBuilder.Entity<TPS_PREREQUIS_SCENARIOS>(entity =>
            {
                entity.HasKey(e => new { e.TEP_ETAT_PREREQUISID, e.TS_SCENARIOID });

                entity.HasOne(d => d.TEP_ETAT_PREREQUIS)
                    .WithMany(p => p.TPS_PREREQUIS_SCENARIOS)
                    .HasForeignKey(d => d.TEP_ETAT_PREREQUISID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPS_PREREQUIS_SCENARIOS$TEP_ETAT_PREREQUIS");

                entity.HasOne(d => d.TS_SCENARIO)
                    .WithMany(p => p.TPS_PREREQUIS_SCENARIOS)
                    .HasForeignKey(d => d.TS_SCENARIOID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPS_PREREQUIS_SCENARIOS$TS_SCENARIOS");
            });

            modelBuilder.Entity<TPUF_PARALLELEU_FERMES>(entity =>
            {
                entity.HasOne(d => d.TF_FERME)
                    .WithMany(p => p.TPUF_PARALLELEU_FERMES)
                    .HasForeignKey(d => d.TF_FERMEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPUF_PARALLELEU_FERMES$TF_FERMES");

                entity.HasOne(d => d.TPU_PARALLELEU)
                    .WithMany(p => p.TPUF_PARALLELEU_FERMES)
                    .HasForeignKey(d => d.TPU_PARALLELEUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPUF_PARALLELEU_FERMES$TPU_PARALLELEUS");

                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TPUF_PARALLELEU_FERMES)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPUF_PARALLELEU_FERMES$TRST_STATUTS");
            });

            modelBuilder.Entity<TPUP_PARALLELEU_PARAMS>(entity =>
            {
                entity.HasOne(d => d.TPU_PARALLELEU)
                    .WithMany(p => p.TPUP_PARALLELEU_PARAMS)
                    .HasForeignKey(d => d.TPU_PARALLELEUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPUF_PARALLELEU_PARAMS$TPU_PARALLELEUS");

                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TPUP_PARALLELEU_PARAMS)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPUP_PARALLELEU_PARAMS$TRST_STATUTS");
            });

            modelBuilder.Entity<TPU_PARALLELEUS>(entity =>
            {
                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TPU_PARALLELEUS)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPU_PARALLELEUS$TRST_STATUTS");

                entity.HasOne(d => d.TSRV_SERVEUR)
                    .WithMany(p => p.TPU_PARALLELEUS)
                    .HasForeignKey(d => d.TSRV_SERVEURID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TPU_PARALLELEUS$SERVEUR");
            });

            modelBuilder.Entity<TP_PERIMETRES>(entity =>
            {
                entity.HasKey(e => e.TP_PERIMETREID)
                    .HasName("PK_PERIMETRES");

                entity.HasOne(d => d.TQM_QUALIF_MODELE)
                    .WithMany(p => p.TP_PERIMETRES)
                    .HasForeignKey(d => d.TQM_QUALIF_MODELEID)
                    .HasConstraintName("FK_TP_PERIMETRES$TQM_QUALIF_MODELES");

                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TP_PERIMETRES)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TP_PERIMETRES$TRST_STATUTS");
            });

            modelBuilder.Entity<TQM_QUALIF_MODELES>(entity =>
            {
                entity.HasKey(e => e.TQM_QUALIF_MODELEID)
                    .HasName("PK_QUALIF_MODELES");
            });

            modelBuilder.Entity<TRD_RESSOURCE_DEMANDES>(entity =>
            {
                entity.Property(e => e.TRD_FICHIER_PRESENT).HasDefaultValueSql("('N')");

                entity.HasOne(d => d.TER_ETAT_RESSOURCE)
                    .WithMany(p => p.TRD_RESSOURCE_DEMANDES)
                    .HasForeignKey(d => d.TER_ETAT_RESSOURCEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRD_RESSOURCE_DEMANDES$TER_ETAT_RESSOURCES");

                entity.HasOne(d => d.T)
                    .WithMany(p => p.TRD_RESSOURCE_DEMANDES)
                    .HasPrincipalKey(p => new { p.TD_DEMANDEID, p.TE_ETATID })
                    .HasForeignKey(d => new { d.TD_DEMANDEID, d.TE_ETATID })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRD_RESSOURCE_DEMANDES$TD_DEMANDES");
            });

            modelBuilder.Entity<TRS_RESSOURCE_SCENARIOS>(entity =>
            {
                entity.HasKey(e => new { e.TER_ETAT_RESSOURCEID, e.TS_SCENARIOID });

                //entity.Property(e => e.TRS_FICHIER_OBLIGATOIRE).HasDefaultValueSql("('N')");

                entity.HasOne(d => d.TER_ETAT_RESSOURCE)
                    .WithMany(p => p.TRS_RESSOURCE_SCENARIOS)
                    .HasForeignKey(d => d.TER_ETAT_RESSOURCEID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRS_RESSOURCE_SCENARIOS$TER_ETAT_RESSOURCES");

                entity.HasOne(d => d.TS_SCENARIO)
                    .WithMany(p => p.TRS_RESSOURCE_SCENARIOS)
                    .HasForeignKey(d => d.TS_SCENARIOID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRS_RESSOURCE_SCENARIOS$TS_SCENARIOS");
            });

            modelBuilder.Entity<TSL_SERVEUR_LOGICIELS>(entity =>
            {
                entity.HasOne(d => d.TL_LOGICIEL)
                    .WithMany(p => p.TSL_SERVEUR_LOGICIELS)
                    .HasForeignKey(d => d.TL_LOGICIELID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSL_SERVEUR_LOGICIELS$TL_LOGICIELS");

                entity.HasOne(d => d.TSRV_SERVEUR)
                    .WithMany(p => p.TSL_SERVEUR_LOGICIELS)
                    .HasForeignKey(d => d.TSRV_SERVEURID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSL_SERVEUR_LOGICIELS$SERVEUR");
            });

            modelBuilder.Entity<TSP_SERVEUR_PARAMS>(entity =>
            {
                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TSP_SERVEUR_PARAMS)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSP_SERVEUR_PARAMS$TRST_STATUTS");

                entity.HasOne(d => d.TSRV_SERVEUR)
                    .WithMany(p => p.TSP_SERVEUR_PARAMS)
                    .HasForeignKey(d => d.TSRV_SERVEURID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSP_SERVEUR_PARAMS$SERVEUR");
            });

            modelBuilder.Entity<TSRV_SERVEURS>(entity =>
            {
                entity.Property(e => e.TRST_STATUTID).HasDefaultValueSql("('I')");

                entity.Property(e => e.TSRV_DUREE_EXPLOITATION).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.TRST_STATUT)
                    .WithMany(p => p.TSRV_SERVEURS)
                    .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TSRV_SERVEURS$TRST_STATUTS");
            });

            modelBuilder.Entity<TS_SCENARIOS>(entity =>
            {
                entity.HasOne(d => d.TE_ETAT)
                    .WithMany(p => p.TS_SCENARIOS)
                    .HasForeignKey(d => d.TE_ETATID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TS_SCENARIOS$TE_ETATS");
            });

            modelBuilder.Entity<VSCU_CTRL_STRUCTURE_UPLOADS>(entity =>
            {
                entity.HasKey(e => new
                {
                    e.TE_ETATID,
                    e.TLEM_ACTION,
                    e.TLEM_FILE_TYPE,
                    e.TLEM_PATH_NAME,
                    e.TLEM_FILENAME_PATTERN
                })
                    .HasName("UQ_VSCU_CTRL_STRUCTURE_UPLOADS");

                entity.ToView(nameof(VSCU_CTRL_STRUCTURE_UPLOADS));
            });

            modelBuilder.Entity<VDE_DEMANDES_ETENDUES>(entity =>
            {
                entity.HasKey(e => new
                {
                    e.TD_DEMANDEID
                })
                    .HasName("UQ_VDE_DEMANDES_ETENDUES");

                entity.ToView(nameof(VDE_DEMANDES_ETENDUES));
            });

            modelBuilder.Entity<VDE_DEMANDES_RESSOURCES>(entity =>
            {
                entity.HasKey(e => new
                {
                    e.TD_DEMANDEID,
                    e.TER_ETAT_RESSOURCEID,
                    e.TRD_NOM_FICHIER_ORIGINAL
                })
                    .HasName("UQ_VDE_DEMANDES_RESSOURCES");

                entity.ToView(nameof(VDE_DEMANDES_RESSOURCES));
            });

            modelBuilder.Entity<VPE_PLANIF_ENTETES>(entity =>
            {
                entity.HasKey(e => new
                {
                    e.TS_SCENARIOID
                })
                    .HasName("UQ_VPE_PLANIF_ENTETES");

                entity.ToView(nameof(VPE_PLANIF_ENTETES));
            });

            modelBuilder.Entity<VPD_PLANIF_DETAILS>(entity =>
            {
                entity.HasKey(e => new
                {
                    e.TPF_PLANIFID
                })
                    .HasName("UQ_VPD_PLANIF_DETAILS");

                entity.ToView(nameof(VPD_PLANIF_DETAILS));
            });

            #endregion Orkestra

            #region HOME

            modelBuilder.Entity<VACCGD_ACCUEIL_GRAPHE_DEMANDES>(entity =>
            {
                entity.HasKey(e => new
                {
                    e.PERIODE
                })
                .HasName("UQ_VACCGD_ACCUEIL_GRAPHE_DEMANDES");

                entity.ToView(nameof(VACCGD_ACCUEIL_GRAPHE_DEMANDES));
            });

            modelBuilder.Entity<VACCGQ_ACCUEIL_GRAPHE_QUALITES>(entity =>
            {
                entity.HasKey(e => new
                {
                    e.QUALIFID
                })
                .HasName("UQ_VACCGQ_ACCUEIL_GRAPHE_QUALITES");

                entity.ToView(nameof(VACCGQ_ACCUEIL_GRAPHE_QUALITES));
            });

            #endregion

            #region Habilitation DTF

            modelBuilder.Entity<TH_HABILITATIONS>(entity =>
            {
                entity.HasOne(d => d.TS_SCENARIO)
                       .WithMany(p => p.TH_HABILITATION)
                       .HasForeignKey(d => d.TS_SCENARIOID)
                       .OnDelete(DeleteBehavior.ClientSetNull)
                       .HasConstraintName("FK_TH_HABILITATIONS$TS_SCENARIOS");

                entity.HasOne(d => d.TRU_USER)
                    .WithMany(p => p.TH_HABILITATION)
                    .HasForeignKey(d => d.TRU_USERID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TH_HABILITATIONS$TRU_USERS");

                entity.HasOne(d => d.TRU_INITIALISATION_AUTEUR)
                    .WithMany(p => p.TRU_INITIALISATION_AUTEUR_TH_HABILITATION)
                    .HasForeignKey(d => d.TRU_INITIALISATION_AUTEURID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TH_HABILITATIONS$TRU_USERS$INITIALISATION_AUTEUR");

                entity.HasOne(d => d.TRU_MAJ_AUTEUR)
                    .WithMany(p => p.TRU_MAJ_AUTEUR_TH_HABILITATION)
                    .HasForeignKey(d => d.TRU_MAJ_AUTEURID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TH_HABILITATIONS$TRU_USERS$MAJ_AUTEUR");

                entity.HasOne(d => d.TS_SCENARIO)
                      .WithMany(p => p.TH_HABILITATION)
                      .HasForeignKey(d => d.TS_SCENARIOID)
                      .OnDelete(DeleteBehavior.ClientSetNull)
                      .HasConstraintName("FK_TH_HABILITATIONS$TS_SCENARIOS");

                entity.HasOne(d => d.TTE_TEAM)
                    .WithMany(p => p.TH_HABILITATIONS)
                    .HasForeignKey(d => d.TTE_TEAMID)
                     .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TH_HABILITATIONS$TTE_TEAMS");

                entity.HasOne(d => d.TRST_STATUT)
                   .WithMany(p => p.TH_HABILITATION)
                   .HasForeignKey(d => d.TRST_STATUTID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                   .HasConstraintName("FK_TH_HABILITATIONS$TRST_STATUTS");
            });

            modelBuilder.Entity<TSG_SCENARIO_GPES>(entity =>
            {
                entity.HasOne(d => d.TRST_STATUT)
                  .WithMany(p => p.TSG_SCENARIO_GPE)
                  .HasForeignKey(d => d.TRST_STATUTID)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK_TSG_SCENARIO_GPES$TRST_STATUTS");
            });

            modelBuilder.Entity<TSGA_SCENARIO_GPE_ASSOCIES>(entity =>
            {
                entity.HasOne(d => d.TRST_STATUT)
                  .WithMany(p => p.TSGA_SCENARIO_GPE_ASSOCIE)
                  .HasForeignKey(d => d.TRST_STATUTID)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK_TSGA_SCENARIO_GPE_ASSOCIES$TRST_STATUTS");

                entity.HasOne(d => d.TSG_SCENARIO_GPE)
                .WithMany(p => p.TSGA_SCENARIO_GPE_ASSOCIE)
                .HasForeignKey(d => d.TSG_SCENARIO_GPEID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSGA_SCENARIO_GPE_ASSOCIES$TSG_SCENARIO_GPES");

                entity.HasOne(d => d.TS_SCENARIO)
                .WithMany(p => p.TSGA_SCENARIO_GPE_ASSOCIE)
                .HasForeignKey(d => d.TS_SCENARIOID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSGA_SCENARIO_GPE_ASSOCIES$TS_SCENARIOS");
            });

            modelBuilder.Entity<TTE_TEAMS>(entity =>
            {
                entity.HasOne(d => d.TRST_STATUT)
                  .WithMany(p => p.TTE_TEAM)
                  .HasForeignKey(d => d.TRST_STATUTID)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK_TTE_TEAMS$TRST_STATUTS");
            });

            modelBuilder.Entity<TUTE_USER_TEAMS>(entity =>
            {
                entity.HasOne(d => d.TRST_STATUT)
                  .WithMany(p => p.TUTE_USER_TEAM)
                  .HasForeignKey(d => d.TRST_STATUTID)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK_TUTE_USER_TEAMSS$TRST_STATUTS");

                entity.HasOne(d => d.TRU_USER)
                  .WithMany(p => p.TUTE_USER_TEAM)
                  .HasForeignKey(d => d.TRU_USERID)
                   .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK_TUTE_USER_TEAMSS$TRU_USERS");

                entity.HasOne(d => d.TTE_TEAM)
                    .WithMany(p => p.TUTE_USER_TEAMS)
                    .HasForeignKey(d => d.TTE_TEAMID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TUTE_USER_TEAMSS$TTE_TEAM");
            });

            modelBuilder.Entity<VDTFH_HABILITATIONS>(entity =>
            {
                entity.HasKey(e => new
                {
                    e.TRU_USERID,
                    e.TS_SCENARIOID
                })
                    .HasName("UQ_VDTFH_HABILITATIONS");

                entity.ToView(nameof(VDTFH_HABILITATIONS));
            });

            #endregion

            #region DS CMD

            modelBuilder.Entity<TCMD_COMMANDES>(entity =>
            {
                entity.HasOne(d => d.TCMD_MC_MODE_CREATION)
                    .WithMany(p => p.TCMD_COMMANDES)
                    .HasForeignKey(d => d.TCMD_MC_MODE_CREATIONID)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TCMD_ORIGINE)
                    .WithMany(p => p.InverseTCMD_ORIGINE)
                    .HasForeignKey(d => d.TCMD_ORIGINEID)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TCMD_PH_PHASE)
                    .WithMany(p => p.TCMD_COMMANDES)
                    .HasForeignKey(d => d.TCMD_PH_PHASEID)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRU_COMMANDITAIRE)
                   .WithMany(p => p.TCMD_COMMANDES_TRU_COMMANDITAIRE)
                   .HasForeignKey(d => d.TRU_COMMANDITAIREID)
                   .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRU_EXPLOITANT)
                  .WithMany(p => p.TCMD_COMMANDES_TRU_EXPLOITANT)
                  .HasForeignKey(d => d.TRU_EXPLOITANTID)
                  .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<TCMD_CR_CMD_RAISON_PHASES>(entity =>
            {
                entity.HasOne(d => d.TCMD_RP_RAISON_PHASE)
                    .WithMany(p => p.TCMD_CR_CMD_RAISON_PHASES)
                    .HasForeignKey(d => d.TCMD_RP_RAISON_PHASEID)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TCMD_SP_SUIVI_PHASE)
                    .WithMany(p => p.TCMD_CR_CMD_RAISON_PHASES)
                    .HasForeignKey(d => d.TCMD_SP_SUIVI_PHASEID)
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<TCMD_DA_DEMANDES_ASSOCIEES>(entity =>
            {
                entity.Property(e => e.TCMD_DA_VERSION_NOTABLE).HasDefaultValueSql("0");

                entity.HasOne(d => d.TCMD_COMMANDE)
                    .WithMany(p => p.TCMD_DA_DEMANDES_ASSOCIEES)
                    .HasForeignKey(d => d.TCMD_COMMANDEID)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRU_AUTEUR)
                 .WithMany(p => p.TCMD_DA_DEMANDES_ASSOCIEES_TRU_AUTEUR)
                 .HasForeignKey(d => d.TRU_AUTEURID)
                 .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<TCMD_DOC_DOCUMENTS>(entity =>
            {
                entity.HasOne(d => d.TCMD_COMMANDE)
                    .WithMany(p => p.TCMD_DOC_DOCUMENTS)
                    .HasForeignKey(d => d.TCMD_COMMANDEID)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TCMD_TD_TYPE_DOCUMENT)
                    .WithMany(p => p.TCMD_DOC_DOCUMENTS)
                    .HasForeignKey(d => d.TCMD_TD_TYPE_DOCUMENTID)
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<TCMD_RP_RAISON_PHASES>(entity =>
            {
                entity.HasOne(d => d.TCMD_PH_PHASE)
                    .WithMany(p => p.TCMD_RP_RAISON_PHASES)
                    .HasForeignKey(d => d.TCMD_PH_PHASEID)
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<TCMD_SP_SUIVI_PHASES>(entity =>
            {
                entity.HasOne(d => d.TCMD_COMMANDE)
                    .WithMany(p => p.TCMD_SP_SUIVI_PHASES)
                    .HasForeignKey(d => d.TCMD_COMMANDEID)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TCMD_PH_PHASE_APRES)
                    .WithMany(p => p.TCMD_SP_SUIVI_PHASESTCMD_PH_PHASE_APRES)
                    .HasForeignKey(d => d.TCMD_PH_PHASE_APRESID)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TCMD_PH_PHASE_AVANT)
                    .WithMany(p => p.TCMD_SP_SUIVI_PHASESTCMD_PH_PHASE_AVANT)
                    .HasForeignKey(d => d.TCMD_PH_PHASE_AVANTID)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRU_AUTEUR_MODIF)
                 .WithMany(p => p.TCMD_SP_SUIVI_PHASES_TRU_AUTEUR_MODIF)
                 .HasForeignKey(d => d.TRU_AUTEUR_MODIFID)
                 .OnDelete(DeleteBehavior.Restrict);

            });

            #endregion

            OnModelCreatingPartial(modelBuilder);

            base.OnModelCreating(modelBuilder);
        }
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}