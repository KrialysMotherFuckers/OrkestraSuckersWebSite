
// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Krialys.Entities.COMMON;
using Microsoft.EntityFrameworkCore;

namespace Krialys.Data.EF.Mso
{
    /// <summary>
    /// DbContext for MSO entities
    /// </summary>
#pragma warning disable S101 // Types should be named in PascalCase
    public partial class KrialysDbContext : DbContext
#pragma warning restore S101 // Types should be named in PascalCase
    {
        #region CONSTRUCTORS

        public KrialysDbContext() { }
        public KrialysDbContext(DbContextOptions<KrialysDbContext> options) : base(options) { }
        protected override void OnConfiguring(DbContextOptionsBuilder options)
        {
            if (!options.IsConfigured)
                options.UseSqlite("DataSource=../../../ApiUnivers/App_Data/Database/db-MSO.db3");
        }

        #endregion

        public virtual DbSet<TRAPL_APPLICATIONS> TRAPL_APPLICATIONS { get; set; }
        public virtual DbSet<TRAP_ATTENDUS_PLANIFS> TRAP_ATTENDUS_PLANIFS { get; set; }
        public virtual DbSet<TRA_ATTENDUS> TRA_ATTENDUS { get; set; }
        public virtual DbSet<TRC_CRITICITES> TRC_CRITICITES { get; set; }
        public virtual DbSet<TRNF_NATURES_FLUX> TRNF_NATURES_FLUX { get; set; }
        public virtual DbSet<TRNT_NATURES_TRAITEMENTS> TRNT_NATURES_TRAITEMENTS { get; set; }
        public virtual DbSet<TRP_PLANIFS> TRP_PLANIFS { get; set; }
        public virtual DbSet<TRR_RESULTATS> TRR_RESULTATS { get; set; }
        public virtual DbSet<TRTT_TECHNOS_TRAITEMENTS> TRTT_TECHNOS_TRAITEMENTS { get; set; }
        public virtual DbSet<TTL_LOGS> TTL_LOGS { get; set; }

        public virtual DbSet<TRC_CONTRATS> TRC_CONTRATS { get; set; }

        #region UNUSED

        //        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //        {
        //            if (!optionsBuilder.IsConfigured)
        //            {
        //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
        //                optionsBuilder.UseSqlServer("Data Source=Krialys.net;Initial Catalog=MSO_DEV;Persist Security Info=True;User ID=Kdev;Password=Kribou20!");
        //            }
        //        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyAllConfigurations<KrialysDbContext>();

            modelBuilder.Entity<TRAP_ATTENDUS_PLANIFS>(entity =>
            {
                entity.HasIndex(e => new { e.TRA_ATTENDUID, e.TRP_PLANIFID })
                    .HasDatabaseName("UK_TRAP_ATTENDUS_PLANIFS")
                    .IsUnique();

                entity.HasOne(d => d.TRA_ATTENDU)
                    .WithMany(p => p.TRAP_ATTENDUS_PLANIFS)
                    .HasForeignKey(d => d.TRA_ATTENDUID)
                    .HasConstraintName("FK_TRA_ATTENDUS")
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRP_PLANIF)
                    .WithMany(p => p.TRAP_ATTENDUS_PLANIFS)
                    .HasForeignKey(d => d.TRP_PLANIFID)
                    .HasConstraintName("FK_TRP_PLANIFS")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<TRA_ATTENDUS>(entity =>
            {
                entity.HasIndex(e => new { e.TRA_CODE, e.TRA_DEBUT_VALIDITE, e.TRA_FIN_VALIDITE })
                    .HasDatabaseName("UK_TRA_ATTENDUS")
                    .IsUnique();

                entity.HasOne(d => d.TRAPL_APPLICATION)
                    .WithMany(p => p.TRA_ATTENDUS)
                    .HasForeignKey(d => d.TRAPL_APPLICATIONID)
                    .HasConstraintName("FK_TRAPL_APPLICATIONS")
                   .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRC_CRITICITE)
                    .WithMany(p => p.TRA_ATTENDUS)
                    .HasForeignKey(d => d.TRC_CRITICITEID)
                    .HasConstraintName("FK_TRC_CRITICITES")
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRNF_NATURE_DESTINATION)
                    .WithMany(p => p.TRA_ATTENDUSTRNF_NATURE_DESTINATION)
                    .HasForeignKey(d => d.TRNF_NATURE_DESTINATIONID)
                    .HasConstraintName("FK_TRNF_NATURES_FLUX_DEST")
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRNF_NATURE_ORIGINE)
                    .WithMany(p => p.TRA_ATTENDUSTRNF_NATURE_ORIGINE)
                    .HasForeignKey(d => d.TRNF_NATURE_ORIGINEID)
                    .HasConstraintName("FK_TRNF_NATURES_FLUX_ORI")
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRNT_NATURE_TRAITEMENT)
                    .WithMany(p => p.TRA_ATTENDUS)
                    .HasForeignKey(d => d.TRNT_NATURE_TRAITEMENTID)
                    .HasConstraintName("FK_TRNT_NATURES_TRAITEMENTS")
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRR_RESULTAT)
                    .WithMany(p => p.TRA_ATTENDUS)
                    .HasForeignKey(d => d.TRR_RESULTATID)
                    .HasConstraintName("FK_TRR_RESULTATS")
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRTT_TECHNO_TRAITEMENT)
                    .WithMany(p => p.TRA_ATTENDUS)
                    .HasForeignKey(d => d.TRTT_TECHNO_TRAITEMENTID)
                    .HasConstraintName("FK_TRTT_TECHNOS_TRAITEMENTS")
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.TRC_CONTRAT)
                   .WithMany(p => p.TRA_ATTENDUS)
                   .HasForeignKey(d => d.TRC_CONTRATID)
                   .HasConstraintName("FK_TRC_CONTRATS")
                   .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<TTL_LOGS>(entity =>
            {
                entity.Property(e => e.TTL_RESULTAT).HasDefaultValueSql("('NA')");
            });

            modelBuilder.Entity<TRC_CONTRATS>(entity =>
            {
                entity.HasIndex(e => new { e.TRC_CONTRAT_CODE })
                    .HasDatabaseName("UK_TRC_CONTRAT_CODE")
                    .IsUnique();
            });

            // OnModelCreatingPartial(modelBuilder);

            base.OnModelCreating(modelBuilder);
        }

        //partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        #endregion
    }
}