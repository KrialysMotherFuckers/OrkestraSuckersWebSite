@* Customisable datagrid parameters *@
<OrkaGenericGridComponent TEntity="TOBJR_OBJET_REGLES"
                       @ref="_refTobjrObjetRegles"
                       SuffixId=@ObjetEtiquetteId.ToString()
                       AllowResizing="true"
                       AllowPdfExport="false"
                       AllowExcelExport="true"
                       AllowCsvExport="false"
                       EnablePersistence="false"
                       AllowGrouping="false"
                       Query="GridQuery"
                       AutoGenerateColumns="false">

    <GridColumns>
        <GridColumn Field=@nameof(TOBJR_OBJET_REGLES.TOBJR_OBJET_REGLEID) Visible="false" AllowAdding="false" AllowEditing="false" IsPrimaryKey="true"> </GridColumn>
        <GridColumn Field=@nameof(TOBJR_OBJET_REGLES.TOBJE_OBJET_ETIQUETTEID) Visible="false" AllowAdding="false" AllowEditing="false"> </GridColumn>

        @{var field = nameof(TOBJR_OBJET_REGLES.TRGL_REGLEID);
            var prop = _refTobjrObjetRegles.GridColumnParametersList.FirstOrDefault(x => x.IsInGrid && x.Field == field);
            @if (prop is not null)
            {
                <GridForeignColumn Field="@prop.Field"
                                   HeaderText="@prop.HeaderText"
                                   ForeignKeyField="Id"
                                   ForeignKeyValue="Label"
                                   ForeignDataSource="@prop.ForeignValuesList"
                                   AutoFit="@prop.Autofit"
                                   MinWidth="150"
                                   Width="300"
                                   Visible="true"
                                   AllowEditing="false"
                                   AllowAdding="false"/>
            }
        }
        

        @{var fieldRegleValeur = nameof(TOBJR_OBJET_REGLES.TRGLRV_REGLES_VALEURID);
            var propfieldRegleValeur = _refTobjrObjetRegles.GridColumnParametersList.FirstOrDefault(x => x.IsInGrid && x.Field == fieldRegleValeur);
            @if (propfieldRegleValeur is not null)
            {
                <GridForeignColumn Field="@propfieldRegleValeur.Field"
                                   HeaderText="@propfieldRegleValeur.HeaderText"
                                   ForeignKeyField="Id"
                                   ForeignKeyValue="Label"
                                   ForeignDataSource="@propfieldRegleValeur.ForeignValuesList"
                                   AutoFit="@propfieldRegleValeur.Autofit"
                                   MinWidth="150"
                                   Width="300"
                                   Visible="true"
                                   AllowEditing="false"
                                   AllowAdding="false"/>
            }
        }

        <GridColumn Field=@nameof(TOBJR_OBJET_REGLES.TOBJR_APPLICABLE) Visible="true" AllowAdding="false" AllowEditing="false" Width="100">
            <Template>
                @{
                    var tobjrObjetRegle = ((TOBJR_OBJET_REGLES)context).TOBJR_APPLICABLE;
                    if (tobjrObjetRegle is not null)
                    {
                        @Trad.Keys[$"BOOL:{tobjrObjetRegle}"]
                    }
                }
            </Template>
            <EditTemplate>
                @{
                    if (context is TOBJR_OBJET_REGLES tobjrObjetRegle && tobjrObjetRegle.TOBJR_OBJET_REGLEID != 0)
                    {
                        <div class="control-section">
                            <div class="radio-control">
                                <h6 class="row">Changer l'état de la règle en : </h6>
                                <div class="row">
                                    <SfRadioButton Label="Aucun changement" Name="statut" Value="Unchanged" Checked="@CheckedValueStatut" @onchange="SfRadioButtonStatutOnChange"></SfRadioButton>
                                    <p></p>
                                </div>

                                @switch (tobjrObjetRegle.TOBJR_APPLICABLE)
                                {
                                    case StatusLiteral.Yes: // oui applicable
                                        <SfRadioButton Label="Rendre inapplicable" Name="statut" Value=@StatusLiteral.No Checked="@CheckedValueStatut" @onchange="SfRadioButtonStatutOnChange"></SfRadioButton>
                                        <p></p>
                                        break;

                                    case StatusLiteral.No: // non applicable
                                        <SfRadioButton Label="Rendre applicable" Name="statut" Value=@StatusLiteral.Yes Checked="@CheckedValueStatut" @onchange="SfRadioButtonStatutOnChange"></SfRadioButton>
                                        <p></p>
                                        break;
                                }

                            </div>
                        </div>
                    }
                }
            </EditTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(TOBJR_OBJET_REGLES.TOBJR_ECHEANCE_DUREE) Visible="true" AllowAdding="false" AllowEditing="true" Width="100">
            <Template>
                @{if (context is TOBJR_OBJET_REGLES {TOBJR_ECHEANCE_DUREE: > 0 } tobjrObjetRegle)
                {
                    <text>
                        <label>
                            @tobjrObjetRegle.TOBJR_ECHEANCE_DUREE
                        </label>
                        <label></label>
                    </text>
                    @Trad.Keys["COMMON:Day"]
                }
                @*nbAns = maDureeJour \ 365.25
                nbMois = (maDureeJour Mod 365.25) \ 30.4375
                nbJours = (maDureeJour Mod 365.25) Mod 30.4375*@
                }
            </Template>
        </GridColumn>

    </GridColumns>

    <ChildContent>
        @* Customisable datagrid events *@
        <GridEvents TValue="TOBJR_OBJET_REGLES"
                    OnToolbarClick="@_refTobjrObjetRegles.OnToolbarClickAsync"
                    ContextMenuItemClicked="@_refTobjrObjetRegles.OnContextMenuItemClickedAsync"
                    OnActionBegin="OnActionBegin"
                    OnActionFailure=_refTobjrObjetRegles.ActionFailureAsync OnLoad=_refTobjrObjetRegles.OnLoadHandler Destroyed=_refTobjrObjetRegles.OnDestroyed />

        <GridEditSettings AllowAdding="false"
                          AllowEditing="true"
                          AllowDeleting="false"
                          ShowConfirmDialog="true"
                          ShowDeleteConfirmDialog="true"
                          Mode="EditMode.Dialog"
                          Dialog="@Extends.GridEditSettingDialog"
                          AllowEditOnDblClick="true">

            <HeaderTemplate>
                @{
                    var text = GetHeader((context as TOBJR_OBJET_REGLES));
                    <span>@text</span>
                }
            </HeaderTemplate>

            @* Customisable edit/save/cancel dialog events *@
            <FooterTemplate Context="entity">
                <SfButton IsPrimary="true"
                          CssClass="e-success"
                          OnClick="@(() => SaveAsync(_refTobjrObjetRegles, entity))">
                    @_refTobjrObjetRegles.EditButtonText
                </SfButton>
                <SfButton OnClick="@(() => _refTobjrObjetRegles.DataGrid.CloseEditAsync())">
                    @_refTobjrObjetRegles.CancelButtonText
                </SfButton>
            </FooterTemplate>

        </GridEditSettings>
    </ChildContent>
</OrkaGenericGridComponent>

