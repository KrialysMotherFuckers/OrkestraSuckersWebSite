using Krialys.Common;
using Krialys.Common.Extensions;
using Krialys.Common.Literals;
using Krialys.Orkestra.Web.Common.ApiClient;
using Microsoft.AspNetCore.Components;
using MudBlazor;
using Syncfusion.Blazor.Data;
using Syncfusion.Blazor.DropDowns;
using Syncfusion.Blazor.Grids;
using System.Diagnostics;
using System.Text.Json;

namespace Krialys.Orkestra.Web.Module.ADM.Pages.RefManager;

public partial class RefExploitation
{
    #region parameters
    [Inject] private IRefManagerClient RefManagerClient { get; set; }

    internal class CustomStringEqualityComparer : IEqualityComparer<RefExploitation.LabelItem>
    {
        private char LabelPrefix => RefExploitation.LabelPrefix.ToCharArray()[0];

        public bool Equals(RefExploitation.LabelItem x, RefExploitation.LabelItem y)
            => x.Value.TrimStart(LabelPrefix).Equals(y.Value.TrimStart(LabelPrefix), StringComparison.Ordinal);

        public int GetHashCode(RefExploitation.LabelItem obj)
            => obj.Value.TrimStart(LabelPrefix).GetHashCode();
    }

    // Labels
    private static string LabelPrefix = "$";
    private string AllLabels => Trad.Keys["RefManager:Management_Labels_All"];

    // Referentials
    private string Standard => Trad.Keys["RefManager:Management_Referentials"];
    private string Cloned => Trad.Keys["RefManager:Management_Referentials_Editable"];
    private string NotCloned => Trad.Keys["RefManager:Management_Referentials_Original"];

    internal class LabelItem
    {
        public LabelItem(string id, string value, string category)
        {
            Id = id; Value = value; Category = category;
        }

        public string Id { get; set; }
        public string Value { get; set; }
        public string Category { get; set; }
    }

    private LabelItem DefaultLabelDropDownValue;

    private readonly string[] _toolbarItems = { "Add", "Edit", "Delete", /*"Update", "Cancel",*/ "Search", "ExcelExport" };
    private readonly string _gridId = $"{Litterals.Portail}DEV_GDB_ExpandoObject";
    private List<DynamicDictionary> _dataSource;
    private SfGrid<DynamicDictionary> _sfGrid;

    internal class ReferentialSettings : Krialys.Data.EF.RefManager.TM_RFS_ReferentialSettings
    {
        public ReferentialSettings() { }

        public string Code { get; set; } = default!;
    };
    private IList<ReferentialSettings> _refTableList = new List<ReferentialSettings>();
    private ReferentialSettings _refTableSelected;
    private IDictionary<string, ReferentialTableDataModel> _dicoModel;
    private IEnumerable<LabelItem> _refLabelList = Enumerable.Empty<LabelItem>();
    private HashSet<string> _dataFields;

    private object _codeEtq; // TODO for etiquettes
    private bool _searchInProgress;
    private bool _showResult;
    private string _loadingText;
    private string _refTableName;
    private string _labelColName;
    private string _labelColNameSelected;

    private bool _allowAdding = true;
    private bool _allowEditing = true;
    private bool _allowDeleting = true;

    private string EditButtonText => Trad.Keys["GridSource:EditButtonText"];
    private string CancelButtonText => Trad.Keys["GridSource:CancelButtonText"];

    private Stopwatch _stopWatch = new Stopwatch();
    #endregion

    protected override async Task OnInitializedAsync()
    {
        DefaultLabelDropDownValue = new LabelItem("0", AllLabels, Standard);

        var data = await ProxyCore.GetEnumerableAsync<Krialys.Data.EF.RefManager.TM_RFS_ReferentialSettings>(
                $"?$filter={nameof(Data.EF.RefManager.TM_RFS_ReferentialSettings.Rfs_StatusCode)} eq '{StatusLiteral.Available}'" +
                $"&$orderby={nameof(Data.EF.RefManager.TM_RFS_ReferentialSettings.Rfs_TableName)}"
                , useCache: false);

        foreach (var value in from item in data
                              let value = JsonSerializer.Deserialize<ReferentialSettings>(JsonSerializer.Serialize(item))
                              select value)
        {
            value.Code = value.Rfs_TableTypology switch
            {
                Data.Model.RefManagerTypologyType.WithLabel => Trad.Keys["RefManager:Settings_Typology_WithLabel"],
                Data.Model.RefManagerTypologyType.WithoutLabelUpdate => Trad.Keys["RefManager:Settings_Typology_WithoutLabelUpdate"],
                Data.Model.RefManagerTypologyType.WithoutLabelAddReplace => Trad.Keys["RefManager:Settings_Typology_WithoutLabelAddReplace"],
                _ => Trad.Keys["RefManager:Settings_Typology_None"]
            };
            _refTableList.Add(value);
        }
    }

    private void OnChangeReferential(ChangeEventArgs<ReferentialSettings, ReferentialSettings> args)
    {
        _refLabelList = Enumerable.Empty<LabelItem>();
        _showResult = false;
        _refTableName = args.ItemData.Rfs_TableName;
        _allowAdding = _allowEditing = _allowDeleting = true;
    }

    private async Task OnChangeLabelAsync(ChangeEventArgs<LabelItem, LabelItem> args)
    {
        if (args.Value == null || _sfGrid == null)
            return;

        if (string.IsNullOrEmpty(args.Value?.Value) || args.Value.Value == AllLabels)
        {
            _labelColNameSelected = null;
            await _sfGrid.ClearFilteringAsync();
        }
        else
        {
            _labelColNameSelected = args.Value.Value;
            await _sfGrid.FilterByColumnAsync(_labelColName, "equal", _labelColNameSelected);

            // Rewire when clonage will be ok
            //_allowAdding = _allowEditing = _allowDeleting = _labelColNameSelected[..1] == LabelPrefix;
        }
    }

    private async Task DisplayResult()
    {
        // Anti con
        if (_searchInProgress)
            return;

        _showResult = false;
        _searchInProgress = true;
        _loadingText = Trad.Keys["RefManager:Management_Info_Loading"];
        _dataFields = new HashSet<string>(capacity: 0);
        _dicoModel = new Dictionary<string, ReferentialTableDataModel>(capacity: 0);
        _refLabelList = Enumerable.Empty<LabelItem>();
        _labelColNameSelected = null;

        var resultTable = RefManagerClient.GetReferentialTableInfoAsync(_refTableSelected.Rfs_id);
        var refTable = RefManagerClient.GetReferentialTableDataAsync(_refTableSelected.Rfs_id);
        await Task.WhenAll(resultTable, refTable);

        if (resultTable.Result.DataModel == null)
        {
            Snackbar.Add(string.Format(Trad.Keys["RefManager:Management_Alert_GridNotLoaded"], _refTableName), Severity.Info);
        }
        else
        {
            // Capture model
            foreach (var el in resultTable.Result.DataModel)
                _dicoModel.Add(el.ColumnName, el);

            _dataFields.UnionWith(resultTable.Result.DataModel.Select(e => e.ColumnName));

            // Reveal datas
            _dataSource = (List<DynamicDictionary>)refTable.Result
                .ToDynamicDictionary(_dicoModel.ToDictionary(key => key.Key, value => (Krialys.Common.Enums.ManagedTypes)value.Value.ManagedType));

            _labelColName = (await ProxyCore.GetEnumerableAsync<Krialys.Data.EF.RefManager.TM_RFS_ReferentialSettings>
                (
                    $"?$filter={nameof(Data.EF.RefManager.TM_RFS_ReferentialSettings.Rfs_id)} eq {_refTableSelected.Rfs_id}" +
                    $"&$select={nameof(Data.EF.RefManager.TM_RFS_ReferentialSettings.Rfs_LabelCodeFieldName)}"
                , useCache: false)
                ).FirstOrDefault().Rfs_LabelCodeFieldName;

            // Get all label list when any
            GetLabelList(_labelColName);

            if (_sfGrid != null)
                await _sfGrid.Refresh();

            _showResult = true;
        }

        _searchInProgress = false;
    }

    private void GetLabelList(string labelColName)
    {
        if (string.IsNullOrEmpty(labelColName))
            return;

        var labelList = new List<LabelItem>();
        var label = new HashSet<string>();

        _dataSource.ForEach(e =>
        {
            var value = e.GetValue(labelColName)?.ToString();
            if (label.Add(value))
                labelList.Add(new LabelItem(e.GetValue("GUID")?.ToString(), value, value[..1] == LabelPrefix ? Cloned : NotCloned));
        });

        labelList = labelList.Distinct(new CustomStringEqualityComparer())
            ?.ToList().OrderByDescending(e => e.Value).ToList();

        _refLabelList = new List<LabelItem> { new LabelItem("0", AllLabels, Standard) }.Union(labelList).ToList();
        DefaultLabelDropDownValue = _refLabelList.FirstOrDefault();
        StateHasChanged();
    }

    #region Internal
    private async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Equals($"{_gridId}_excelexport", StringComparison.Ordinal)) //Id is combination of Grid's ID and itemname
            await _sfGrid.ExportToExcelAsync();
    }

    private async Task CloneLabelObjectCodeEntriesAsync()
    {
        if (_refTableSelected.Rfs_TableTypology == Data.Model.RefManagerTypologyType.WithLabel)
        {
            if (string.IsNullOrEmpty(_labelColNameSelected))
                Snackbar.Add(Trad.Keys["RefManager:Management_Alert_SelectLabelObjectCode"], Severity.Info);
            else
            {
                var entries = 0;

                if (_labelColNameSelected[..1] != LabelPrefix)
                    entries = await RefManagerClient.CloneLabelObjectCodeEntriesAsync(_refTableSelected.Rfs_id, _labelColNameSelected);

                switch (entries)
                {
                    case -2:
                        Snackbar.Add(string.Format(Trad.Keys["RefManager:Management_Alert_ErrorCloningValues"], _labelColNameSelected), Severity.Error);
                        break;

                    case -1:
                        Snackbar.Add(string.Format(Trad.Keys["RefManager:Management_Alert_MissingParameter"], _labelColNameSelected), Severity.Warning);
                        break;

                    case 0:
                        Snackbar.Add(string.Format(Trad.Keys["RefManager:Management_Alert_AlreadyCloned"], _labelColNameSelected), Severity.Info);
                        break;

                    default:
                        var selected = _labelColNameSelected[..1] != LabelPrefix ? $"{LabelPrefix}{_labelColNameSelected}" : _labelColNameSelected;
                        Snackbar.Add(string.Format(Trad.Keys["RefManager:Management_Alert_SuccessfullyCloned"], selected, entries), Severity.Success);
                        await DisplayResult();
                        _labelColNameSelected = selected;
                        break;
                }
            }
        }
    }

    /// <summary>
    /// Manage Delete
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task ActionBeginHandlerAsync(ActionEventArgs<DynamicDictionary> args)
    {
        if (args.Action != null && args.Action.Equals("Delete", StringComparison.Ordinal))
            await FooterSaveEditAsync(args.Data, args.Data.GetValue(JsonExtensions.Id), true);
    }

    /// <summary>
    /// Manage Add, Update and Delete item from the datagrid + apply modifications to the database
    /// Compare data before saving (only when data differ)
    /// </summary>
    /// <param name="newData"></param>
    /// <param name="id"></param>
    /// <param name="delete"></param>
    /// <returns></returns>
    private async Task FooterSaveEditAsync(DynamicDictionary newData, object id, bool delete)
    {
        // Looking for mandatory fields
        if (string.IsNullOrEmpty(_labelColName)
            && _dicoModel.Keys.Any(field => _dicoModel[field].IsColumnKey && Equals(newData.GetValue(field), null)))
        {
            await _sfGrid.EndEditAsync();
            return;
        }

        // Add missing fields (else there is a defect in SF when adding a new entry)
        foreach (var field in _dataFields.Except(newData.GetDynamicMemberNames()))
            newData.TryAddMember(field, null);

        // Specific case for Labels when 'cloned' they don't have any label yet, so we assign it a value
        if (!string.IsNullOrEmpty(_labelColName))
        {
            if (newData.GetValue(_labelColName) == null)
            {
                if (!string.IsNullOrEmpty(_labelColNameSelected))
                {
                    var nameSelected = _labelColNameSelected;

                    _labelColNameSelected = _labelColNameSelected[..1] == LabelPrefix
                        ? _labelColNameSelected
                        : $"{LabelPrefix}{_labelColNameSelected}";

                    newData.TryAddMember(_labelColName, _labelColNameSelected);

                    if (!_refLabelList.Any(e => e.Value == _labelColNameSelected))
                    {
                        var tmpList = _refLabelList.ToList();
                        tmpList.Insert(1, new LabelItem(_labelColNameSelected, _labelColNameSelected, nameSelected[..1] == LabelPrefix ? Cloned : NotCloned));
                        _refLabelList = tmpList.OrderBy(e => e.Value).ToList();
                    }
                }
                else
                {
                    await _sfGrid.CloseEditAsync(); // don't save data because no 'Label' has been scoped
                    return;
                }
            }
        }

        // Save grid data?
        if (delete == false && _sfGrid.DataSource.GetDictionary(JsonExtensions.Id, id).SequenceEqual(newData))
        {
            await _sfGrid.CloseEditAsync(); // don't save data
            return;
        }
        else
        {
            var update = delete ? null : _dataSource.GetDictionary(JsonExtensions.Id, id);

            _stopWatch.Start();

            if (await RefManagerClient.UpdateReferentialTableDataAsync(_refTableSelected.Rfs_id,
                false,
                new List<DynamicDictionary> { newData }.ConvertToByteArray(Convert.ToByte(delete ? 2 : (update != null ? 1 : 0)), _codeEtq)))
            {
                Snackbar.Add(string.Format(Trad.Keys[$"RefManager:Management_Alert_TableUpdated"],
                    (_stopWatch.Elapsed.TotalSeconds == 0 ? 1 : _stopWatch.Elapsed.TotalSeconds)),
                    Severity.Success);

                await _sfGrid.EndEditAsync(); // save datagrid matrix
            }
            else
            {
                await _sfGrid.CloseEditAsync(); // don't save data
            }

            _stopWatch.Reset();
        }
    }

    /// <summary>
    /// Validate/approve datas
    /// </summary>
    /// <returns></returns>
    private async Task ApproveAsync()
    {
        if (_sfGrid?.DataSource == null || !_sfGrid.DataSource.Any())
        {
            Snackbar.Add(Trad.Keys["RefManager:Management_Alert_GridNotLoaded"], Severity.Warning);
            return;
        }

        _stopWatch.Start();

        var success = await RefManagerClient.UpdateReferentialTableDataAsync(_refTableSelected.Rfs_id, true, Array.Empty<byte>());
        if (_stopWatch.IsRunning)
            _stopWatch.Stop();

        Snackbar.Add(string.Format(Trad.Keys[$"RefManager:{(success ? "Management_Alert_TableApproved" : "Management_Alert_TableNotApproved")}"],
            _stopWatch.Elapsed.TotalSeconds),
            success ? Severity.Success : Severity.Warning);

        _stopWatch.Reset();
    }
    #endregion
}