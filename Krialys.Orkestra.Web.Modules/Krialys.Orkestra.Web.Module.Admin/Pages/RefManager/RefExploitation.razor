@page "/RefManager_Exploitation"

@using System.Dynamic;
@using Krialys.Common.Extensions;

<div style="width:auto">
    @* Actions *@
    <div class="row">
        <div class="col-12">
            <MudCard>
                <MudCardContent>
                    <div class="row">

                        <div class="col-2">
                            <SfDropDownList @bind-Value="@_refTableSelected"
                                            TValue="ReferentialSettings"
                                            TItem="ReferentialSettings"
                                            Placeholder=@Trad.Keys["RefManager:Management_Referentials"]
                                            FloatLabelType=FloatLabelType.Always
                                            DataSource="@_refTableList">

                                <DropDownListEvents TValue="ReferentialSettings"
                                                    TItem="ReferentialSettings"
                                                    ValueChange="OnChangeReferential" />

                                <DropDownListFieldSettings Value=@nameof(ReferentialSettings)
                                                           Text=@nameof(ReferentialSettings.Rfs_TableName)
                                                           GroupBy=@nameof(ReferentialSettings.Code) />
                            </SfDropDownList>
                        </div>

                        <div class="col-1" style="align-self: self-end;">
                            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.InstallDesktop"
                                       Disabled=@(_refTableSelected == null)
                                       OnClick="() => DisplayResult()">@Trad.Keys["RefManager:Management_Button_Show"]</MudButton>
                        </div>
                        &nbsp;
                        <div class="col-2" style='@(_refTableSelected != null && _refTableSelected.Rfs_TableTypology == Data.Model.RefManagerTypologyType.WithLabel ? "" : "display:none")'>
                            <SfDropDownList TItem="LabelItem" TValue="LabelItem"
                                            Placeholder=@Trad.Keys["RefManager:Management_Labels"]
                                            FloatLabelType=FloatLabelType.Always
                                            DataSource="@_refLabelList"
                                            @bind-Value="@DefaultLabelDropDownValue">

                                <DropDownListEvents TValue="LabelItem"
                                                    TItem="LabelItem"
                                                    ValueChange="OnChangeLabelAsync" />

                                <DropDownListFieldSettings Value=@nameof(LabelItem)
                                                           Text=@nameof(LabelItem.Value)
                                                           GroupBy=@nameof(LabelItem.Category) />
                            </SfDropDownList>
                        </div>

                        <div class="col-4" style='@(_refTableSelected != null ? "align-self: self-end;" : "display:none")'>
                            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CreateNewFolder"
                                       Disabled=@(!(_refTableSelected != null
                                       && _refTableSelected.Rfs_TableTypology == Data.Model.RefManagerTypologyType.WithLabel
                                       && _refLabelList.Any()
                                       && _labelColNameSelected != null))
                                       OnClick="() => CloneLabelObjectCodeEntriesAsync()">@Trad.Keys["RefManager:Management_Button_Clone"]</MudButton>
                            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Tertiary"
                                       StartIcon="@Icons.Material.Filled.Approval"
                                       Disabled=@(!_showResult)
                                       OnClick="() => ApproveAsync()">@Trad.Keys["RefManager:Management_Button_Validate"]</MudButton>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </div>
    </div>

    @* Spinner *@
    <br />
    <SpinnerComponent SmallSpinner="true" IsLoading="@_searchInProgress" LoadingText="@_loadingText" />

    @* Datagrid *@
    <div class="row" style='@(_showResult ? "" : "display:none")'>
        <div class="col-12">
            @if (_dataFields != null && _showResult && _dataSource != null)
            {
                <SfGrid @ref=@_sfGrid
                        DataSource=@_dataSource
                        ID=@_gridId
                        Height="100%"
                        Width="100%"
                        EnableAdaptiveUI=false
                        RowHeight=@Litterals.RowHeight
                        Toolbar=@_toolbarItems
                        AllowExcelExport=true
                        AllowFiltering=true
                        AllowMultiSorting=true
                        AllowPaging=true
                        AllowReordering=false
                        AllowSelection=true
                        AllowSorting=true
                        AllowResizing=true
                        ColumnQueryMode=ColumnQueryModeType.ExcludeHidden
                        ClipMode=Syncfusion.Blazor.Grids.ClipMode.Ellipsis
                        AdaptiveUIMode=AdaptiveMode.Desktop
                        AllowGrouping=false
                        GridLines=GridLine.Both
                        ShowColumnMenu=false
                        ShowColumnChooser=false
                        EnablePersistence=false>

                    <GridPageSettings PageSize=14 />

                    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Both" />

                    @* Filter settings *@
                    <GridFilterSettings Type=Syncfusion.Blazor.Grids.FilterType.Excel
                                        IgnoreAccent=true
                                        ShowFilterBarStatus=true />

                    <GridEvents TValue="Krialys.Common.DynamicDictionary"
                                OnActionBegin="ActionBeginHandlerAsync"
                                OnToolbarClick="ToolbarClickHandler" />

                    <GridEditSettings AllowAdding=@_allowAdding
                                      AllowEditing=@_allowEditing
                                      AllowDeleting=@_allowDeleting
                                      ShowConfirmDialog=false
                                      ShowDeleteConfirmDialog=true
                                      Mode=EditMode.Dialog
                                      Dialog="@Extends.GridEditSettingDialog">

                        <HeaderTemplate>
                            <span>@Trad.Keys[$"RefManager:Management_Edit_Referentials"]</span>
                        </HeaderTemplate>

                        @* Customisable edit/save/cancel dialog events *@
                        <FooterTemplate>
                            <SfButton IsPrimary=true
                                      CssClass="e-success"
                                      OnClick=@(() => FooterSaveEditAsync(context as Krialys.Common.DynamicDictionary, ((Krialys.Common.DynamicDictionary)context).GetValue(JsonExtensions.Id), false))>
                                @EditButtonText
                            </SfButton>
                            <SfButton OnClick=@(() => _sfGrid.CloseEditAsync())>
                                @CancelButtonText
                            </SfButton>
                        </FooterTemplate>
                    </GridEditSettings>

                    <GridColumns>
                        @{
                            if (_dataFields != null && _dataFields.Any() && _dicoModel != null)
                            {
                                foreach (var field in _dataFields)
                                {
                                    if (_dicoModel[field].ColumnId == 0) // Unique key aka GUID
                                    {
                                        <GridColumn Field=@field
                                                    HeaderText=@field
                                                    Visible=false
                                                    IsPrimaryKey=true
                                                    IsIdentity=true
                                                    AllowSearching=false
                                                    AllowAdding=false
                                                    AllowEditing=false
                                                    AllowFiltering=false
                                                    AllowSorting=false
                                                    ValidationRules=@(new ValidationRules{ Required = true })
                                                    DefaultValue=@(Guid.NewGuid().ToString("N").ToUpper())
                                                    Width="1" />
                                    }
                                    else
                                    {
                                        <GridColumn Field=@field
                                                    HeaderText=@field
                                                    Visible=true
                                                    IsPrimaryKey="@_dicoModel[field].IsColumnKey"
                                                    IsIdentity=false
                                                    AllowSearching=true
                                                    AllowAdding="@(_labelColName != field)"
                                                    AllowEditing="@(!_dicoModel[field].IsColumnKey)"
                                                    AllowFiltering="@(_labelColName != field)"
                                                    AllowSorting=true
                                                    EditType=@((EditType)_dicoModel[field].EditType) Format="g"
                                                    Type=@((ColumnType)_dicoModel[field].ColumnType)
                                                    ValidationRules=@(new ValidationRules{ Required = (!_dicoModel[field].IsNullable || _dicoModel[field].IsColumnKey ? true : null) })
                                                    TextAlign="@(_dicoModel[field].ColumnType == Web.Common.ApiClient.ColumnType.String || _dicoModel[field].ColumnType == Web.Common.ApiClient.ColumnType.None ? Syncfusion.Blazor.Grids.TextAlign.Left : Syncfusion.Blazor.Grids.TextAlign.Center)"
                                                    Width="185" />
                                    }
                                }
                            }
                        }
                    </GridColumns>
                </SfGrid>
            }
        </div>
    </div>
</div>