@using Krialys.Common.Literals;
@using Krialys.Orkestra.Web.Common.Models
@using Syncfusion.Blazor.DropDowns;
@using System.Reflection;

<SfDropDownList TValue="string" TItem="StatusItem" @bind-Value="@ItemStatus" DataSource="@StatusList">
    <DropDownListFieldSettings Value="Code" Text="Label"></DropDownListFieldSettings>
    <DropDownListEvents TValue="string" TItem="StatusItem" ValueChange="OnValueChanged"></DropDownListEvents>
</SfDropDownList>

@code {

    public enum ModuleType
    {
        Job = 1,
        Version = 2,
        Scenario = 3
    }

    [Parameter] public ModuleType Module { get; set; } = ModuleType.Job;

    [Parameter] public string JobStatus { get; set; } = string.Empty;
    [Parameter] public string VersionStatus { get; set; } = string.Empty;

    [Parameter] public string ItemStatus { get; set; }
    [Parameter] public EventCallback<string> ItemStatusChanged { get; set; }

    List<StatusItem> StatusList = new();

    public void OnValueChanged(ChangeEventArgs<string, StatusItem> args)
    {
        ItemStatusChanged.InvokeAsync(ItemStatus);
    }

    public async Task OnItemStatusChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        ItemStatus = e.Value.ToString();
        await ItemStatusChanged.InvokeAsync(ItemStatus);
    }

    protected override void OnInitialized()
    {
        //Add Current Status
        StatusList.Add(new StatusItem() { Label = @Trad.Keys[$"STATUS:{ItemStatus}"], Code = ItemStatus });

        if (Module == ModuleType.Job)
        {
            if (new[] { StatusLiteral.Draft, StatusLiteral.Prototype }.Contains(ItemStatus))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:A"], Code = StatusLiteral.Available });
            }

            if (StatusLiteral.Available.Contains(ItemStatus))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:I"], Code = StatusLiteral.Deactivated });
            }

            if (StatusLiteral.Prototype.Contains(ItemStatus))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:B"], Code = StatusLiteral.Draft });
            }

            if (StatusLiteral.Draft.Contains(ItemStatus))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:P"], Code = StatusLiteral.Prototype });
            }

            if (new[] { StatusLiteral.Draft, StatusLiteral.Prototype }.Contains(ItemStatus))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:C"], Code = StatusLiteral.Canceled });
            }
        }
        else if (Module == ModuleType.Version)
        {
            if (new[] { StatusLiteral.Draft, StatusLiteral.Prototype }.Contains(ItemStatus))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:A"], Code = StatusLiteral.Available });
            }

            if (StatusLiteral.Available.Contains(ItemStatus))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:I"], Code = StatusLiteral.Deactivated });
            }

            if (StatusLiteral.Prototype.Contains(ItemStatus) || (JobStatus == StatusLiteral.Available && VersionStatus == StatusLiteral.Available))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:B"], Code = StatusLiteral.Draft });
            }

            if (StatusLiteral.Draft.Contains(ItemStatus))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:P"], Code = StatusLiteral.Prototype });
            }

            if (new[] { StatusLiteral.Draft, StatusLiteral.Prototype }.Contains(ItemStatus))
            {
                StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:C"], Code = StatusLiteral.Canceled });
            }
        }
        else if (Module == ModuleType.Scenario)
        {
            if (VersionStatus == StatusLiteral.Draft)
            {
                if (new[] { StatusLiteral.Draft }.Contains(ItemStatus))
                {
                    StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:A"], Code = StatusLiteral.Available });
                    StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:I"], Code = StatusLiteral.Deactivated });
                }

                if (new[] { StatusLiteral.Deactivated }.Contains(ItemStatus))
                {
                    StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:A"], Code = StatusLiteral.Available });
                    StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:B"], Code = StatusLiteral.Draft });
                }
            }

            if (VersionStatus == StatusLiteral.Prototype)
            {
                if (new[] { StatusLiteral.Draft }.Contains(ItemStatus))
                {
                    StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:A"], Code = StatusLiteral.Available });
                    StatusList.Add(new StatusItem() { Label = @Trad.Keys["STATUS:I"], Code = StatusLiteral.Deactivated });
                }
            }
        }
    }
}