//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Krialys.Orkestra.Web.Common.ApiClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICatalogClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogApi> InvokeApiCatalogAsync(string functionId, string apiVersion, int? metaData, System.Collections.Generic.IDictionary<string, object> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogApi> InvokeApiCatalogAsync(string functionId, string apiVersion, int? metaData, System.Collections.Generic.IDictionary<string, object> body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogApi> GetAuthenticationTokenAsync(string applicationId, string apiVersion);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogApi> GetAuthenticationTokenAsync(string applicationId, string apiVersion, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CatalogClient : ICatalogClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public CatalogClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CatalogApi> InvokeApiCatalogAsync(string functionId, string apiVersion, int? metaData, System.Collections.Generic.IDictionary<string, object> body)
        {
            return InvokeApiCatalogAsync(functionId, apiVersion, metaData, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CatalogApi> InvokeApiCatalogAsync(string functionId, string apiVersion, int? metaData, System.Collections.Generic.IDictionary<string, object> body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/catalog/InvokeApiCatalog"
                    urlBuilder_.Append("api/catalog/InvokeApiCatalog");
                    urlBuilder_.Append('?');
                    if (functionId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("functionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(functionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (apiVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("apiVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(apiVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (metaData != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("metaData")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(metaData, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CatalogApi>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CatalogApi> GetAuthenticationTokenAsync(string applicationId, string apiVersion)
        {
            return GetAuthenticationTokenAsync(applicationId, apiVersion, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CatalogApi> GetAuthenticationTokenAsync(string applicationId, string apiVersion, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/catalog/GetAuthenticationToken"
                    urlBuilder_.Append("api/catalog/GetAuthenticationToken");
                    urlBuilder_.Append('?');
                    if (applicationId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("applicationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (apiVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("apiVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(apiVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CatalogApi>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICommonClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<byte[]> GetApiUniversAppSettingsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<byte[]> GetApiUniversAppSettingsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerNode>> GetOnlineCPUAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerNode>> GetOnlineCPUAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommonClient : ICommonClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public CommonClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<byte[]> GetApiUniversAppSettingsAsync()
        {
            return GetApiUniversAppSettingsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<byte[]> GetApiUniversAppSettingsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/common/v1/GetApiUniversAppSettings"
                    urlBuilder_.Append("api/common/v1/GetApiUniversAppSettings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<byte[]>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerNode>> GetOnlineCPUAsync()
        {
            return GetOnlineCPUAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkerNode>> GetOnlineCPUAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/common/v1/GetOnlineCPU"
                    urlBuilder_.Append("api/common/v1/GetOnlineCPU");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WorkerNode>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ICpuClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GetCpuStatusAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GetCpuStatusAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> StopCmdAsync(string connectionid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> StopCmdAsync(string connectionid, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CpuClient : ICpuClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public CpuClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> GetCpuStatusAsync()
        {
            return GetCpuStatusAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> GetCpuStatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Cpu/GetCpuStatus"
                    urlBuilder_.Append("api/univers/v1/Cpu/GetCpuStatus");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> StopCmdAsync(string connectionid)
        {
            return StopCmdAsync(connectionid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> StopCmdAsync(string connectionid, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Cpu/StopCmd"
                    urlBuilder_.Append("api/univers/v1/Cpu/StopCmd");
                    urlBuilder_.Append('?');
                    if (connectionid != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("connectionid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(connectionid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEmailClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SendGenericMailAsync(EmailTemplate body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SendGenericMailAsync(EmailTemplate body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SendAutomatedMailForRequestAsync(int? demandeId, string typeCode);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SendAutomatedMailForRequestAsync(int? demandeId, string typeCode, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SendAutomatedMailForOrderAsync(int? orderId, string statusTypeCode);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SendAutomatedMailForOrderAsync(int? orderId, string statusTypeCode, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TR_MEL_EMail_Templates>> GetEmailTemplateListAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TR_MEL_EMail_Templates>> GetEmailTemplateListAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailClient : IEmailClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public EmailClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> SendGenericMailAsync(EmailTemplate body)
        {
            return SendGenericMailAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> SendGenericMailAsync(EmailTemplate body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Email/SendGenericMail"
                    urlBuilder_.Append("api/univers/v1/Email/SendGenericMail");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> SendAutomatedMailForRequestAsync(int? demandeId, string typeCode)
        {
            return SendAutomatedMailForRequestAsync(demandeId, typeCode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> SendAutomatedMailForRequestAsync(int? demandeId, string typeCode, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Email/SendAutomatedMailForRequest"
                    urlBuilder_.Append("api/univers/v1/Email/SendAutomatedMailForRequest");
                    urlBuilder_.Append('?');
                    if (demandeId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("demandeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(demandeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (typeCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("typeCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(typeCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> SendAutomatedMailForOrderAsync(int? orderId, string statusTypeCode)
        {
            return SendAutomatedMailForOrderAsync(orderId, statusTypeCode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> SendAutomatedMailForOrderAsync(int? orderId, string statusTypeCode, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Email/SendAutomatedMailForOrder"
                    urlBuilder_.Append("api/univers/v1/Email/SendAutomatedMailForOrder");
                    urlBuilder_.Append('?');
                    if (orderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (statusTypeCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusTypeCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(statusTypeCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TR_MEL_EMail_Templates>> GetEmailTemplateListAsync()
        {
            return GetEmailTemplateListAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TR_MEL_EMail_Templates>> GetEmailTemplateListAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Email/GetEmailTemplateList"
                    urlBuilder_.Append("api/univers/v1/Email/GetEmailTemplateList");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TR_MEL_EMail_Templates>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFileClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> FileOperationsAsync(FileManagerDirectoryContent body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> FileOperationsAsync(FileManagerDirectoryContent body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetImageAsync(string envId, string path, string action, string newName, System.Collections.Generic.IEnumerable<string> names, string name, long? size, string previousName, System.DateTimeOffset? dateModified, System.DateTimeOffset? dateCreated, bool? hasChild, bool? isFile, string type, string id, string filterPath, string filterId, string parentId, string targetPath, System.Collections.Generic.IEnumerable<string> renameFiles, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, bool? caseSensitive, string searchString, bool? showHiddenItems, bool? showFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> data, string targetData_Path, string targetData_Action, string targetData_NewName, System.Collections.Generic.IEnumerable<string> targetData_Names, string targetData_Name, long? targetData_Size, string targetData_PreviousName, System.DateTimeOffset? targetData_DateModified, System.DateTimeOffset? targetData_DateCreated, bool? targetData_HasChild, bool? targetData_IsFile, string targetData_Type, string targetData_Id, string targetData_FilterPath, string targetData_FilterId, string targetData_ParentId, string targetData_TargetPath, System.Collections.Generic.IEnumerable<string> targetData_RenameFiles, System.Collections.Generic.IEnumerable<FileParameter> targetData_UploadFiles, bool? targetData_CaseSensitive, string targetData_SearchString, bool? targetData_ShowHiddenItems, bool? targetData_ShowFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> targetData_Data, string targetData_TargetData_Path, string targetData_TargetData_Action, string targetData_TargetData_NewName, System.Collections.Generic.IEnumerable<string> targetData_TargetData_Names, string targetData_TargetData_Name, long? targetData_TargetData_Size, string targetData_TargetData_PreviousName, System.DateTimeOffset? targetData_TargetData_DateModified, System.DateTimeOffset? targetData_TargetData_DateCreated, bool? targetData_TargetData_HasChild, bool? targetData_TargetData_IsFile, string targetData_TargetData_Type, string targetData_TargetData_Id, string targetData_TargetData_FilterPath, string targetData_TargetData_FilterId, string targetData_TargetData_ParentId, string targetData_TargetData_TargetPath, System.Collections.Generic.IEnumerable<string> targetData_TargetData_RenameFiles, System.Collections.Generic.IEnumerable<FileParameter> targetData_TargetData_UploadFiles, bool? targetData_TargetData_CaseSensitive, string targetData_TargetData_SearchString, bool? targetData_TargetData_ShowHiddenItems, bool? targetData_TargetData_ShowFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> targetData_TargetData_Data, FileManagerDirectoryContent targetData_TargetData_TargetData, AccessPermission targetData_TargetData_Permission, AccessPermission targetData_Permission, AccessPermission permission);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetImageAsync(string envId, string path, string action, string newName, System.Collections.Generic.IEnumerable<string> names, string name, long? size, string previousName, System.DateTimeOffset? dateModified, System.DateTimeOffset? dateCreated, bool? hasChild, bool? isFile, string type, string id, string filterPath, string filterId, string parentId, string targetPath, System.Collections.Generic.IEnumerable<string> renameFiles, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, bool? caseSensitive, string searchString, bool? showHiddenItems, bool? showFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> data, string targetData_Path, string targetData_Action, string targetData_NewName, System.Collections.Generic.IEnumerable<string> targetData_Names, string targetData_Name, long? targetData_Size, string targetData_PreviousName, System.DateTimeOffset? targetData_DateModified, System.DateTimeOffset? targetData_DateCreated, bool? targetData_HasChild, bool? targetData_IsFile, string targetData_Type, string targetData_Id, string targetData_FilterPath, string targetData_FilterId, string targetData_ParentId, string targetData_TargetPath, System.Collections.Generic.IEnumerable<string> targetData_RenameFiles, System.Collections.Generic.IEnumerable<FileParameter> targetData_UploadFiles, bool? targetData_CaseSensitive, string targetData_SearchString, bool? targetData_ShowHiddenItems, bool? targetData_ShowFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> targetData_Data, string targetData_TargetData_Path, string targetData_TargetData_Action, string targetData_TargetData_NewName, System.Collections.Generic.IEnumerable<string> targetData_TargetData_Names, string targetData_TargetData_Name, long? targetData_TargetData_Size, string targetData_TargetData_PreviousName, System.DateTimeOffset? targetData_TargetData_DateModified, System.DateTimeOffset? targetData_TargetData_DateCreated, bool? targetData_TargetData_HasChild, bool? targetData_TargetData_IsFile, string targetData_TargetData_Type, string targetData_TargetData_Id, string targetData_TargetData_FilterPath, string targetData_TargetData_FilterId, string targetData_TargetData_ParentId, string targetData_TargetData_TargetPath, System.Collections.Generic.IEnumerable<string> targetData_TargetData_RenameFiles, System.Collections.Generic.IEnumerable<FileParameter> targetData_TargetData_UploadFiles, bool? targetData_TargetData_CaseSensitive, string targetData_TargetData_SearchString, bool? targetData_TargetData_ShowHiddenItems, bool? targetData_TargetData_ShowFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> targetData_TargetData_Data, FileManagerDirectoryContent targetData_TargetData_TargetData, AccessPermission targetData_TargetData_Permission, AccessPermission targetData_Permission, AccessPermission permission, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadAsync(string path, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, string action);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadAsync(string path, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, string action, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DownloadAsync(string envId, string downloadInput);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DownloadAsync(string envId, string downloadInput, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DownloadEnvironmentZipAsync(string envId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DownloadEnvironmentZipAsync(string envId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DownloadFileAsync(string fromPath, string fileName, string downloadFileName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DownloadFileAsync(string fromPath, string fileName, string downloadFileName, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> GetEnvironmentTocAsync(string envId, bool? checkOnly);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> GetEnvironmentTocAsync(string envId, bool? checkOnly, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadNewEmptyEnvironmentZipAsync(string envId, System.Collections.Generic.IEnumerable<FileParameter> chunkFile, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadNewEmptyEnvironmentZipAsync(string envId, System.Collections.Generic.IEnumerable<FileParameter> chunkFile, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadFileNewAsync(string fileNameId, string targetPath, string etatId, System.Collections.Generic.IEnumerable<FileParameter> chunkFile, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadFileNewAsync(string fileNameId, string targetPath, string etatId, System.Collections.Generic.IEnumerable<FileParameter> chunkFile, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveFilesAsync(string basePath, string filePath, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveFilesAsync(string basePath, string filePath, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveRawFileAsync(string basePath, string filePath, string uploadFiles);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveRawFileAsync(string basePath, string filePath, string uploadFiles, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KeyValuePair_2OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> DeleteDirectoryFilesAsync(string folderName, string fileNames, bool? deleteFolder);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KeyValuePair_2OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> DeleteDirectoryFilesAsync(string folderName, string fileNames, bool? deleteFolder, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> RemoveEmptyEnvironmentZipAsync(string envId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> RemoveEmptyEnvironmentZipAsync(string envId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> EmptyEnvironmentInitAsync(string envId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> EmptyEnvironmentInitAsync(string envId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> EmptyEnvironmentValidationAsync(string envId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> EmptyEnvironmentValidationAsync(string envId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileClient : IFileClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public FileClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> FileOperationsAsync(FileManagerDirectoryContent body)
        {
            return FileOperationsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> FileOperationsAsync(FileManagerDirectoryContent body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/FileOperations"
                    urlBuilder_.Append("api/univers/v1/File/FileOperations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetImageAsync(string envId, string path, string action, string newName, System.Collections.Generic.IEnumerable<string> names, string name, long? size, string previousName, System.DateTimeOffset? dateModified, System.DateTimeOffset? dateCreated, bool? hasChild, bool? isFile, string type, string id, string filterPath, string filterId, string parentId, string targetPath, System.Collections.Generic.IEnumerable<string> renameFiles, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, bool? caseSensitive, string searchString, bool? showHiddenItems, bool? showFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> data, string targetData_Path, string targetData_Action, string targetData_NewName, System.Collections.Generic.IEnumerable<string> targetData_Names, string targetData_Name, long? targetData_Size, string targetData_PreviousName, System.DateTimeOffset? targetData_DateModified, System.DateTimeOffset? targetData_DateCreated, bool? targetData_HasChild, bool? targetData_IsFile, string targetData_Type, string targetData_Id, string targetData_FilterPath, string targetData_FilterId, string targetData_ParentId, string targetData_TargetPath, System.Collections.Generic.IEnumerable<string> targetData_RenameFiles, System.Collections.Generic.IEnumerable<FileParameter> targetData_UploadFiles, bool? targetData_CaseSensitive, string targetData_SearchString, bool? targetData_ShowHiddenItems, bool? targetData_ShowFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> targetData_Data, string targetData_TargetData_Path, string targetData_TargetData_Action, string targetData_TargetData_NewName, System.Collections.Generic.IEnumerable<string> targetData_TargetData_Names, string targetData_TargetData_Name, long? targetData_TargetData_Size, string targetData_TargetData_PreviousName, System.DateTimeOffset? targetData_TargetData_DateModified, System.DateTimeOffset? targetData_TargetData_DateCreated, bool? targetData_TargetData_HasChild, bool? targetData_TargetData_IsFile, string targetData_TargetData_Type, string targetData_TargetData_Id, string targetData_TargetData_FilterPath, string targetData_TargetData_FilterId, string targetData_TargetData_ParentId, string targetData_TargetData_TargetPath, System.Collections.Generic.IEnumerable<string> targetData_TargetData_RenameFiles, System.Collections.Generic.IEnumerable<FileParameter> targetData_TargetData_UploadFiles, bool? targetData_TargetData_CaseSensitive, string targetData_TargetData_SearchString, bool? targetData_TargetData_ShowHiddenItems, bool? targetData_TargetData_ShowFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> targetData_TargetData_Data, FileManagerDirectoryContent targetData_TargetData_TargetData, AccessPermission targetData_TargetData_Permission, AccessPermission targetData_Permission, AccessPermission permission)
        {
            return GetImageAsync(envId, path, action, newName, names, name, size, previousName, dateModified, dateCreated, hasChild, isFile, type, id, filterPath, filterId, parentId, targetPath, renameFiles, uploadFiles, caseSensitive, searchString, showHiddenItems, showFileExtension, data, targetData_Path, targetData_Action, targetData_NewName, targetData_Names, targetData_Name, targetData_Size, targetData_PreviousName, targetData_DateModified, targetData_DateCreated, targetData_HasChild, targetData_IsFile, targetData_Type, targetData_Id, targetData_FilterPath, targetData_FilterId, targetData_ParentId, targetData_TargetPath, targetData_RenameFiles, targetData_UploadFiles, targetData_CaseSensitive, targetData_SearchString, targetData_ShowHiddenItems, targetData_ShowFileExtension, targetData_Data, targetData_TargetData_Path, targetData_TargetData_Action, targetData_TargetData_NewName, targetData_TargetData_Names, targetData_TargetData_Name, targetData_TargetData_Size, targetData_TargetData_PreviousName, targetData_TargetData_DateModified, targetData_TargetData_DateCreated, targetData_TargetData_HasChild, targetData_TargetData_IsFile, targetData_TargetData_Type, targetData_TargetData_Id, targetData_TargetData_FilterPath, targetData_TargetData_FilterId, targetData_TargetData_ParentId, targetData_TargetData_TargetPath, targetData_TargetData_RenameFiles, targetData_TargetData_UploadFiles, targetData_TargetData_CaseSensitive, targetData_TargetData_SearchString, targetData_TargetData_ShowHiddenItems, targetData_TargetData_ShowFileExtension, targetData_TargetData_Data, targetData_TargetData_TargetData, targetData_TargetData_Permission, targetData_Permission, permission, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetImageAsync(string envId, string path, string action, string newName, System.Collections.Generic.IEnumerable<string> names, string name, long? size, string previousName, System.DateTimeOffset? dateModified, System.DateTimeOffset? dateCreated, bool? hasChild, bool? isFile, string type, string id, string filterPath, string filterId, string parentId, string targetPath, System.Collections.Generic.IEnumerable<string> renameFiles, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, bool? caseSensitive, string searchString, bool? showHiddenItems, bool? showFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> data, string targetData_Path, string targetData_Action, string targetData_NewName, System.Collections.Generic.IEnumerable<string> targetData_Names, string targetData_Name, long? targetData_Size, string targetData_PreviousName, System.DateTimeOffset? targetData_DateModified, System.DateTimeOffset? targetData_DateCreated, bool? targetData_HasChild, bool? targetData_IsFile, string targetData_Type, string targetData_Id, string targetData_FilterPath, string targetData_FilterId, string targetData_ParentId, string targetData_TargetPath, System.Collections.Generic.IEnumerable<string> targetData_RenameFiles, System.Collections.Generic.IEnumerable<FileParameter> targetData_UploadFiles, bool? targetData_CaseSensitive, string targetData_SearchString, bool? targetData_ShowHiddenItems, bool? targetData_ShowFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> targetData_Data, string targetData_TargetData_Path, string targetData_TargetData_Action, string targetData_TargetData_NewName, System.Collections.Generic.IEnumerable<string> targetData_TargetData_Names, string targetData_TargetData_Name, long? targetData_TargetData_Size, string targetData_TargetData_PreviousName, System.DateTimeOffset? targetData_TargetData_DateModified, System.DateTimeOffset? targetData_TargetData_DateCreated, bool? targetData_TargetData_HasChild, bool? targetData_TargetData_IsFile, string targetData_TargetData_Type, string targetData_TargetData_Id, string targetData_TargetData_FilterPath, string targetData_TargetData_FilterId, string targetData_TargetData_ParentId, string targetData_TargetData_TargetPath, System.Collections.Generic.IEnumerable<string> targetData_TargetData_RenameFiles, System.Collections.Generic.IEnumerable<FileParameter> targetData_TargetData_UploadFiles, bool? targetData_TargetData_CaseSensitive, string targetData_TargetData_SearchString, bool? targetData_TargetData_ShowHiddenItems, bool? targetData_TargetData_ShowFileExtension, System.Collections.Generic.IEnumerable<FileManagerDirectoryContent> targetData_TargetData_Data, FileManagerDirectoryContent targetData_TargetData_TargetData, AccessPermission targetData_TargetData_Permission, AccessPermission targetData_Permission, AccessPermission permission, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (path == null)
                        throw new System.ArgumentNullException("path");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)), "Path");
                    }

                    if (action == null)
                        throw new System.ArgumentNullException("action");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(action, System.Globalization.CultureInfo.InvariantCulture)), "Action");
                    }

                    if (newName == null)
                        throw new System.ArgumentNullException("newName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(newName, System.Globalization.CultureInfo.InvariantCulture)), "NewName");
                    }

                    if (names == null)
                        throw new System.ArgumentNullException("names");
                    else
                    {
                        foreach (var item_ in names)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "Names");
                        }
                    }

                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "Name");
                    }

                    if (size == null)
                        throw new System.ArgumentNullException("size");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture)), "Size");
                    }

                    if (previousName == null)
                        throw new System.ArgumentNullException("previousName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(previousName, System.Globalization.CultureInfo.InvariantCulture)), "PreviousName");
                    }

                    if (dateModified == null)
                        throw new System.ArgumentNullException("dateModified");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(dateModified, System.Globalization.CultureInfo.InvariantCulture)), "DateModified");
                    }

                    if (dateCreated == null)
                        throw new System.ArgumentNullException("dateCreated");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(dateCreated, System.Globalization.CultureInfo.InvariantCulture)), "DateCreated");
                    }

                    if (hasChild == null)
                        throw new System.ArgumentNullException("hasChild");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(hasChild, System.Globalization.CultureInfo.InvariantCulture)), "HasChild");
                    }

                    if (isFile == null)
                        throw new System.ArgumentNullException("isFile");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(isFile, System.Globalization.CultureInfo.InvariantCulture)), "IsFile");
                    }

                    if (type == null)
                        throw new System.ArgumentNullException("type");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture)), "Type");
                    }

                    if (id == null)
                        throw new System.ArgumentNullException("id");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)), "Id");
                    }

                    if (filterPath == null)
                        throw new System.ArgumentNullException("filterPath");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterPath, System.Globalization.CultureInfo.InvariantCulture)), "FilterPath");
                    }

                    if (filterId == null)
                        throw new System.ArgumentNullException("filterId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filterId, System.Globalization.CultureInfo.InvariantCulture)), "FilterId");
                    }

                    if (parentId == null)
                        throw new System.ArgumentNullException("parentId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(parentId, System.Globalization.CultureInfo.InvariantCulture)), "ParentId");
                    }

                    if (targetPath == null)
                        throw new System.ArgumentNullException("targetPath");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetPath, System.Globalization.CultureInfo.InvariantCulture)), "TargetPath");
                    }

                    if (renameFiles == null)
                        throw new System.ArgumentNullException("renameFiles");
                    else
                    {
                        foreach (var item_ in renameFiles)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "RenameFiles");
                        }
                    }

                    if (uploadFiles == null)
                        throw new System.ArgumentNullException("uploadFiles");
                    else
                    {
                        foreach (var item_ in uploadFiles)
                        {
                            var content_uploadFiles_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_uploadFiles_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_uploadFiles_, "UploadFiles", item_.FileName ?? "UploadFiles");
                        }
                    }

                    if (caseSensitive == null)
                        throw new System.ArgumentNullException("caseSensitive");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(caseSensitive, System.Globalization.CultureInfo.InvariantCulture)), "CaseSensitive");
                    }

                    if (searchString == null)
                        throw new System.ArgumentNullException("searchString");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(searchString, System.Globalization.CultureInfo.InvariantCulture)), "SearchString");
                    }

                    if (showHiddenItems == null)
                        throw new System.ArgumentNullException("showHiddenItems");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(showHiddenItems, System.Globalization.CultureInfo.InvariantCulture)), "ShowHiddenItems");
                    }

                    if (showFileExtension == null)
                        throw new System.ArgumentNullException("showFileExtension");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(showFileExtension, System.Globalization.CultureInfo.InvariantCulture)), "ShowFileExtension");
                    }

                    if (data == null)
                        throw new System.ArgumentNullException("data");
                    else
                    {
                        foreach (var item_ in data)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "Data");
                        }
                    }

                    if (targetData_Path == null)
                        throw new System.ArgumentNullException("targetData_Path");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_Path, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.Path");
                    }

                    if (targetData_Action == null)
                        throw new System.ArgumentNullException("targetData_Action");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_Action, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.Action");
                    }

                    if (targetData_NewName == null)
                        throw new System.ArgumentNullException("targetData_NewName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_NewName, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.NewName");
                    }

                    if (targetData_Names == null)
                        throw new System.ArgumentNullException("targetData_Names");
                    else
                    {
                        foreach (var item_ in targetData_Names)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.Names");
                        }
                    }

                    if (targetData_Name == null)
                        throw new System.ArgumentNullException("targetData_Name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_Name, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.Name");
                    }

                    if (targetData_Size == null)
                        throw new System.ArgumentNullException("targetData_Size");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_Size, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.Size");
                    }

                    if (targetData_PreviousName == null)
                        throw new System.ArgumentNullException("targetData_PreviousName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_PreviousName, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.PreviousName");
                    }

                    if (targetData_DateModified == null)
                        throw new System.ArgumentNullException("targetData_DateModified");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_DateModified, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.DateModified");
                    }

                    if (targetData_DateCreated == null)
                        throw new System.ArgumentNullException("targetData_DateCreated");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_DateCreated, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.DateCreated");
                    }

                    if (targetData_HasChild == null)
                        throw new System.ArgumentNullException("targetData_HasChild");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_HasChild, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.HasChild");
                    }

                    if (targetData_IsFile == null)
                        throw new System.ArgumentNullException("targetData_IsFile");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_IsFile, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.IsFile");
                    }

                    if (targetData_Type == null)
                        throw new System.ArgumentNullException("targetData_Type");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_Type, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.Type");
                    }

                    if (targetData_Id == null)
                        throw new System.ArgumentNullException("targetData_Id");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_Id, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.Id");
                    }

                    if (targetData_FilterPath == null)
                        throw new System.ArgumentNullException("targetData_FilterPath");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_FilterPath, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.FilterPath");
                    }

                    if (targetData_FilterId == null)
                        throw new System.ArgumentNullException("targetData_FilterId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_FilterId, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.FilterId");
                    }

                    if (targetData_ParentId == null)
                        throw new System.ArgumentNullException("targetData_ParentId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_ParentId, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.ParentId");
                    }

                    if (targetData_TargetPath == null)
                        throw new System.ArgumentNullException("targetData_TargetPath");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetPath, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetPath");
                    }

                    if (targetData_RenameFiles == null)
                        throw new System.ArgumentNullException("targetData_RenameFiles");
                    else
                    {
                        foreach (var item_ in targetData_RenameFiles)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.RenameFiles");
                        }
                    }

                    if (targetData_UploadFiles == null)
                        throw new System.ArgumentNullException("targetData_UploadFiles");
                    else
                    {
                        foreach (var item_ in targetData_UploadFiles)
                        {
                            var content_targetData_UploadFiles_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_targetData_UploadFiles_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_targetData_UploadFiles_, "TargetData.UploadFiles", item_.FileName ?? "TargetData.UploadFiles");
                        }
                    }

                    if (targetData_CaseSensitive == null)
                        throw new System.ArgumentNullException("targetData_CaseSensitive");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_CaseSensitive, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.CaseSensitive");
                    }

                    if (targetData_SearchString == null)
                        throw new System.ArgumentNullException("targetData_SearchString");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_SearchString, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.SearchString");
                    }

                    if (targetData_ShowHiddenItems == null)
                        throw new System.ArgumentNullException("targetData_ShowHiddenItems");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_ShowHiddenItems, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.ShowHiddenItems");
                    }

                    if (targetData_ShowFileExtension == null)
                        throw new System.ArgumentNullException("targetData_ShowFileExtension");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_ShowFileExtension, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.ShowFileExtension");
                    }

                    if (targetData_Data == null)
                        throw new System.ArgumentNullException("targetData_Data");
                    else
                    {
                        foreach (var item_ in targetData_Data)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.Data");
                        }
                    }

                    if (targetData_TargetData_Path == null)
                        throw new System.ArgumentNullException("targetData_TargetData_Path");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_Path, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.Path");
                    }

                    if (targetData_TargetData_Action == null)
                        throw new System.ArgumentNullException("targetData_TargetData_Action");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_Action, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.Action");
                    }

                    if (targetData_TargetData_NewName == null)
                        throw new System.ArgumentNullException("targetData_TargetData_NewName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_NewName, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.NewName");
                    }

                    if (targetData_TargetData_Names == null)
                        throw new System.ArgumentNullException("targetData_TargetData_Names");
                    else
                    {
                        foreach (var item_ in targetData_TargetData_Names)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.Names");
                        }
                    }

                    if (targetData_TargetData_Name == null)
                        throw new System.ArgumentNullException("targetData_TargetData_Name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_Name, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.Name");
                    }

                    if (targetData_TargetData_Size == null)
                        throw new System.ArgumentNullException("targetData_TargetData_Size");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_Size, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.Size");
                    }

                    if (targetData_TargetData_PreviousName == null)
                        throw new System.ArgumentNullException("targetData_TargetData_PreviousName");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_PreviousName, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.PreviousName");
                    }

                    if (targetData_TargetData_DateModified == null)
                        throw new System.ArgumentNullException("targetData_TargetData_DateModified");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_DateModified, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.DateModified");
                    }

                    if (targetData_TargetData_DateCreated == null)
                        throw new System.ArgumentNullException("targetData_TargetData_DateCreated");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_DateCreated, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.DateCreated");
                    }

                    if (targetData_TargetData_HasChild == null)
                        throw new System.ArgumentNullException("targetData_TargetData_HasChild");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_HasChild, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.HasChild");
                    }

                    if (targetData_TargetData_IsFile == null)
                        throw new System.ArgumentNullException("targetData_TargetData_IsFile");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_IsFile, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.IsFile");
                    }

                    if (targetData_TargetData_Type == null)
                        throw new System.ArgumentNullException("targetData_TargetData_Type");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_Type, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.Type");
                    }

                    if (targetData_TargetData_Id == null)
                        throw new System.ArgumentNullException("targetData_TargetData_Id");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_Id, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.Id");
                    }

                    if (targetData_TargetData_FilterPath == null)
                        throw new System.ArgumentNullException("targetData_TargetData_FilterPath");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_FilterPath, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.FilterPath");
                    }

                    if (targetData_TargetData_FilterId == null)
                        throw new System.ArgumentNullException("targetData_TargetData_FilterId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_FilterId, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.FilterId");
                    }

                    if (targetData_TargetData_ParentId == null)
                        throw new System.ArgumentNullException("targetData_TargetData_ParentId");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_ParentId, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.ParentId");
                    }

                    if (targetData_TargetData_TargetPath == null)
                        throw new System.ArgumentNullException("targetData_TargetData_TargetPath");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_TargetPath, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.TargetPath");
                    }

                    if (targetData_TargetData_RenameFiles == null)
                        throw new System.ArgumentNullException("targetData_TargetData_RenameFiles");
                    else
                    {
                        foreach (var item_ in targetData_TargetData_RenameFiles)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.RenameFiles");
                        }
                    }

                    if (targetData_TargetData_UploadFiles == null)
                        throw new System.ArgumentNullException("targetData_TargetData_UploadFiles");
                    else
                    {
                        foreach (var item_ in targetData_TargetData_UploadFiles)
                        {
                            var content_targetData_TargetData_UploadFiles_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_targetData_TargetData_UploadFiles_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_targetData_TargetData_UploadFiles_, "TargetData.TargetData.UploadFiles", item_.FileName ?? "TargetData.TargetData.UploadFiles");
                        }
                    }

                    if (targetData_TargetData_CaseSensitive == null)
                        throw new System.ArgumentNullException("targetData_TargetData_CaseSensitive");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_CaseSensitive, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.CaseSensitive");
                    }

                    if (targetData_TargetData_SearchString == null)
                        throw new System.ArgumentNullException("targetData_TargetData_SearchString");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_SearchString, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.SearchString");
                    }

                    if (targetData_TargetData_ShowHiddenItems == null)
                        throw new System.ArgumentNullException("targetData_TargetData_ShowHiddenItems");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_ShowHiddenItems, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.ShowHiddenItems");
                    }

                    if (targetData_TargetData_ShowFileExtension == null)
                        throw new System.ArgumentNullException("targetData_TargetData_ShowFileExtension");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(targetData_TargetData_ShowFileExtension, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.ShowFileExtension");
                    }

                    if (targetData_TargetData_Data == null)
                        throw new System.ArgumentNullException("targetData_TargetData_Data");
                    else
                    {
                        foreach (var item_ in targetData_TargetData_Data)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "TargetData.TargetData.Data");
                        }
                    }

                    if (targetData_TargetData_TargetData == null)
                        throw new System.ArgumentNullException("targetData_TargetData_TargetData");
                    else
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(targetData_TargetData_TargetData, _settings.Value);
                        content_.Add(new System.Net.Http.ByteArrayContent(json_), "TargetData.TargetData.TargetData");
                    }

                    if (targetData_TargetData_Permission == null)
                        throw new System.ArgumentNullException("targetData_TargetData_Permission");
                    else
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(targetData_TargetData_Permission, _settings.Value);
                        content_.Add(new System.Net.Http.ByteArrayContent(json_), "TargetData.TargetData.Permission");
                    }

                    if (targetData_Permission == null)
                        throw new System.ArgumentNullException("targetData_Permission");
                    else
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(targetData_Permission, _settings.Value);
                        content_.Add(new System.Net.Http.ByteArrayContent(json_), "TargetData.Permission");
                    }

                    if (permission == null)
                        throw new System.ArgumentNullException("permission");
                    else
                    {
                        var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(permission, _settings.Value);
                        content_.Add(new System.Net.Http.ByteArrayContent(json_), "Permission");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/GetImage"
                    urlBuilder_.Append("api/univers/v1/File/GetImage");
                    urlBuilder_.Append('?');
                    if (envId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("envId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(envId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UploadAsync(string path, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, string action)
        {
            return UploadAsync(path, uploadFiles, action, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UploadAsync(string path, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, string action, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (path == null)
                        throw new System.ArgumentNullException("path");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture)), "path");
                    }

                    if (uploadFiles == null)
                        throw new System.ArgumentNullException("uploadFiles");
                    else
                    {
                        foreach (var item_ in uploadFiles)
                        {
                            var content_uploadFiles_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_uploadFiles_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_uploadFiles_, "uploadFiles", item_.FileName ?? "uploadFiles");
                        }
                    }

                    if (action == null)
                        throw new System.ArgumentNullException("action");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(action, System.Globalization.CultureInfo.InvariantCulture)), "action");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/Upload"
                    urlBuilder_.Append("api/univers/v1/File/Upload");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DownloadAsync(string envId, string downloadInput)
        {
            return DownloadAsync(envId, downloadInput, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DownloadAsync(string envId, string downloadInput, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (downloadInput == null)
                        throw new System.ArgumentNullException("downloadInput");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(downloadInput, System.Globalization.CultureInfo.InvariantCulture)), "downloadInput");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/Download"
                    urlBuilder_.Append("api/univers/v1/File/Download");
                    urlBuilder_.Append('?');
                    if (envId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("envId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(envId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DownloadEnvironmentZipAsync(string envId)
        {
            return DownloadEnvironmentZipAsync(envId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DownloadEnvironmentZipAsync(string envId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/DownloadEnvironmentZip"
                    urlBuilder_.Append("api/univers/v1/File/DownloadEnvironmentZip");
                    urlBuilder_.Append('?');
                    if (envId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("envId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(envId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DownloadFileAsync(string fromPath, string fileName, string downloadFileName)
        {
            return DownloadFileAsync(fromPath, fileName, downloadFileName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DownloadFileAsync(string fromPath, string fileName, string downloadFileName, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/DownloadFile"
                    urlBuilder_.Append("api/univers/v1/File/DownloadFile");
                    urlBuilder_.Append('?');
                    if (fromPath != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fromPath")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fromPath, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fileName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fileName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (downloadFileName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("downloadFileName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(downloadFileName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> GetEnvironmentTocAsync(string envId, bool? checkOnly)
        {
            return GetEnvironmentTocAsync(envId, checkOnly, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> GetEnvironmentTocAsync(string envId, bool? checkOnly, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/GetEnvironmentToc"
                    urlBuilder_.Append("api/univers/v1/File/GetEnvironmentToc");
                    urlBuilder_.Append('?');
                    if (envId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("envId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(envId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (checkOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("checkOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(checkOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UploadNewEmptyEnvironmentZipAsync(string envId, System.Collections.Generic.IEnumerable<FileParameter> chunkFile, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles)
        {
            return UploadNewEmptyEnvironmentZipAsync(envId, chunkFile, uploadFiles, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UploadNewEmptyEnvironmentZipAsync(string envId, System.Collections.Generic.IEnumerable<FileParameter> chunkFile, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (chunkFile == null)
                        throw new System.ArgumentNullException("chunkFile");
                    else
                    {
                        foreach (var item_ in chunkFile)
                        {
                            var content_chunkFile_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_chunkFile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_chunkFile_, "chunkFile", item_.FileName ?? "chunkFile");
                        }
                    }

                    if (uploadFiles == null)
                        throw new System.ArgumentNullException("uploadFiles");
                    else
                    {
                        foreach (var item_ in uploadFiles)
                        {
                            var content_uploadFiles_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_uploadFiles_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_uploadFiles_, "uploadFiles", item_.FileName ?? "uploadFiles");
                        }
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/UploadNewEmptyEnvironmentZip"
                    urlBuilder_.Append("api/univers/v1/File/UploadNewEmptyEnvironmentZip");
                    urlBuilder_.Append('?');
                    if (envId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("envId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(envId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UploadFileNewAsync(string fileNameId, string targetPath, string etatId, System.Collections.Generic.IEnumerable<FileParameter> chunkFile, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles)
        {
            return UploadFileNewAsync(fileNameId, targetPath, etatId, chunkFile, uploadFiles, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UploadFileNewAsync(string fileNameId, string targetPath, string etatId, System.Collections.Generic.IEnumerable<FileParameter> chunkFile, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (chunkFile == null)
                        throw new System.ArgumentNullException("chunkFile");
                    else
                    {
                        foreach (var item_ in chunkFile)
                        {
                            var content_chunkFile_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_chunkFile_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_chunkFile_, "chunkFile", item_.FileName ?? "chunkFile");
                        }
                    }

                    if (uploadFiles == null)
                        throw new System.ArgumentNullException("uploadFiles");
                    else
                    {
                        foreach (var item_ in uploadFiles)
                        {
                            var content_uploadFiles_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_uploadFiles_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_uploadFiles_, "uploadFiles", item_.FileName ?? "uploadFiles");
                        }
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/UploadFileNew"
                    urlBuilder_.Append("api/univers/v1/File/UploadFileNew");
                    urlBuilder_.Append('?');
                    if (fileNameId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fileNameId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileNameId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (targetPath != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("targetPath")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(targetPath, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (etatId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("etatId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(etatId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RemoveFilesAsync(string basePath, string filePath, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles)
        {
            return RemoveFilesAsync(basePath, filePath, uploadFiles, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RemoveFilesAsync(string basePath, string filePath, System.Collections.Generic.IEnumerable<FileParameter> uploadFiles, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (uploadFiles == null)
                        throw new System.ArgumentNullException("uploadFiles");
                    else
                    {
                        foreach (var item_ in uploadFiles)
                        {
                            var content_uploadFiles_ = new System.Net.Http.StreamContent(item_.Data);
                            if (!string.IsNullOrEmpty(item_.ContentType))
                                content_uploadFiles_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(item_.ContentType);
                            content_.Add(content_uploadFiles_, "uploadFiles", item_.FileName ?? "uploadFiles");
                        }
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/RemoveFiles"
                    urlBuilder_.Append("api/univers/v1/File/RemoveFiles");
                    urlBuilder_.Append('?');
                    if (basePath != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("basePath")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(basePath, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filePath != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("filePath")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filePath, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RemoveRawFileAsync(string basePath, string filePath, string uploadFiles)
        {
            return RemoveRawFileAsync(basePath, filePath, uploadFiles, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RemoveRawFileAsync(string basePath, string filePath, string uploadFiles, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (uploadFiles == null)
                        throw new System.ArgumentNullException("uploadFiles");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(uploadFiles, System.Globalization.CultureInfo.InvariantCulture)), "uploadFiles");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/RemoveRawFile"
                    urlBuilder_.Append("api/univers/v1/File/RemoveRawFile");
                    urlBuilder_.Append('?');
                    if (basePath != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("basePath")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(basePath, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filePath != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("filePath")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filePath, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<KeyValuePair_2OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> DeleteDirectoryFilesAsync(string folderName, string fileNames, bool? deleteFolder)
        {
            return DeleteDirectoryFilesAsync(folderName, fileNames, deleteFolder, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<KeyValuePair_2OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> DeleteDirectoryFilesAsync(string folderName, string fileNames, bool? deleteFolder, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/DeleteDirectoryFiles"
                    urlBuilder_.Append("api/univers/v1/File/DeleteDirectoryFiles");
                    urlBuilder_.Append('?');
                    if (folderName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fileNames != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fileNames")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileNames, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (deleteFolder != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deleteFolder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deleteFolder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<KeyValuePair_2OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> RemoveEmptyEnvironmentZipAsync(string envId)
        {
            return RemoveEmptyEnvironmentZipAsync(envId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> RemoveEmptyEnvironmentZipAsync(string envId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/RemoveEmptyEnvironmentZip"
                    urlBuilder_.Append("api/univers/v1/File/RemoveEmptyEnvironmentZip");
                    urlBuilder_.Append('?');
                    if (envId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("envId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(envId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> EmptyEnvironmentInitAsync(string envId)
        {
            return EmptyEnvironmentInitAsync(envId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> EmptyEnvironmentInitAsync(string envId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/EmptyEnvironmentInit"
                    urlBuilder_.Append("api/univers/v1/File/EmptyEnvironmentInit");
                    urlBuilder_.Append('?');
                    if (envId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("envId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(envId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> EmptyEnvironmentValidationAsync(string envId)
        {
            return EmptyEnvironmentValidationAsync(envId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> EmptyEnvironmentValidationAsync(string envId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/File/EmptyEnvironmentValidation"
                    urlBuilder_.Append("api/univers/v1/File/EmptyEnvironmentValidation");
                    urlBuilder_.Append('?');
                    if (envId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("envId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(envId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IJobClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TEM_ETAT_MASTERS>> GetAllAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TEM_ETAT_MASTERS>> GetAllAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> ExportAsync(int? jobId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> ExportAsync(int? jobId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ImportAsync(string jsonJob);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ImportAsync(string jsonJob, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JobClient : IJobClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public JobClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TEM_ETAT_MASTERS>> GetAllAsync()
        {
            return GetAllAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TEM_ETAT_MASTERS>> GetAllAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Job/GetAll"
                    urlBuilder_.Append("api/univers/v1/Job/GetAll");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TEM_ETAT_MASTERS>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ExportAsync(int? jobId)
        {
            return ExportAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ExportAsync(int? jobId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Job/Export"
                    urlBuilder_.Append("api/univers/v1/Job/Export");
                    urlBuilder_.Append('?');
                    if (jobId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("jobId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> ImportAsync(string jsonJob)
        {
            return ImportAsync(jsonJob, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> ImportAsync(string jsonJob, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Job/Import"
                    urlBuilder_.Append("api/univers/v1/Job/Import");
                    urlBuilder_.Append('?');
                    if (jsonJob != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("JsonJob")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(jsonJob, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ILicenseClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GenerateLicenseKeyAsync(bool? isTrialVersion, string customerName, string customerRefCode, string customerEmail, int? defaultExpirationTimeInDays, System.DateTimeOffset? endValidationDate, bool? isActive, string licenseKey, LicenseType? licenseType, string licenseMessage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GenerateLicenseKeyAsync(bool? isTrialVersion, string customerName, string customerRefCode, string customerEmail, int? defaultExpirationTimeInDays, System.DateTimeOffset? endValidationDate, bool? isActive, string licenseKey, LicenseType? licenseType, string licenseMessage, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Licence> DecryptLicenseKeyAsync(string licenceKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Licence> DecryptLicenseKeyAsync(string licenceKey, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Licence> IsActualLicenseValidAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Licence> IsActualLicenseValidAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsLicenseKeyValidAsync(bool? isTrialVersion, string customerName, string customerRefCode, string customerEmail, int? defaultExpirationTimeInDays, System.DateTimeOffset? endValidationDate, bool? isActive, string licenseKey, LicenseType? licenseType, string licenseMessage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> IsLicenseKeyValidAsync(bool? isTrialVersion, string customerName, string customerRefCode, string customerEmail, int? defaultExpirationTimeInDays, System.DateTimeOffset? endValidationDate, bool? isActive, string licenseKey, LicenseType? licenseType, string licenseMessage, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> UpdateLicenseAsync(string licence);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> UpdateLicenseAsync(string licence, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LicenseClient : ILicenseClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public LicenseClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GenerateLicenseKeyAsync(bool? isTrialVersion, string customerName, string customerRefCode, string customerEmail, int? defaultExpirationTimeInDays, System.DateTimeOffset? endValidationDate, bool? isActive, string licenseKey, LicenseType? licenseType, string licenseMessage)
        {
            return GenerateLicenseKeyAsync(isTrialVersion, customerName, customerRefCode, customerEmail, defaultExpirationTimeInDays, endValidationDate, isActive, licenseKey, licenseType, licenseMessage, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GenerateLicenseKeyAsync(bool? isTrialVersion, string customerName, string customerRefCode, string customerEmail, int? defaultExpirationTimeInDays, System.DateTimeOffset? endValidationDate, bool? isActive, string licenseKey, LicenseType? licenseType, string licenseMessage, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/License/GenerateLicenseKeyAsync"
                    urlBuilder_.Append("api/univers/v1/License/GenerateLicenseKeyAsync");
                    urlBuilder_.Append('?');
                    if (isTrialVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("IsTrialVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isTrialVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customerName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CustomerName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customerRefCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CustomerRefCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerRefCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customerEmail != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CustomerEmail")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerEmail, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (defaultExpirationTimeInDays != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DefaultExpirationTimeInDays")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(defaultExpirationTimeInDays, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endValidationDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("EndValidationDate")).Append('=').Append(System.Uri.EscapeDataString(endValidationDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isActive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("IsActive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isActive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (licenseKey != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LicenseKey")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseKey, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (licenseType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LicenseType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (licenseMessage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LicenseMessage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseMessage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Licence> DecryptLicenseKeyAsync(string licenceKey)
        {
            return DecryptLicenseKeyAsync(licenceKey, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Licence> DecryptLicenseKeyAsync(string licenceKey, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/License/DecryptLicenseKeyAsync"
                    urlBuilder_.Append("api/univers/v1/License/DecryptLicenseKeyAsync");
                    urlBuilder_.Append('?');
                    if (licenceKey != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licenceKey")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenceKey, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Licence>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Licence> IsActualLicenseValidAsync()
        {
            return IsActualLicenseValidAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Licence> IsActualLicenseValidAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/License/IsActualLicenseValidAsync"
                    urlBuilder_.Append("api/univers/v1/License/IsActualLicenseValidAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Licence>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> IsLicenseKeyValidAsync(bool? isTrialVersion, string customerName, string customerRefCode, string customerEmail, int? defaultExpirationTimeInDays, System.DateTimeOffset? endValidationDate, bool? isActive, string licenseKey, LicenseType? licenseType, string licenseMessage)
        {
            return IsLicenseKeyValidAsync(isTrialVersion, customerName, customerRefCode, customerEmail, defaultExpirationTimeInDays, endValidationDate, isActive, licenseKey, licenseType, licenseMessage, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> IsLicenseKeyValidAsync(bool? isTrialVersion, string customerName, string customerRefCode, string customerEmail, int? defaultExpirationTimeInDays, System.DateTimeOffset? endValidationDate, bool? isActive, string licenseKey, LicenseType? licenseType, string licenseMessage, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/License/IsLicenseKeyValidAsync"
                    urlBuilder_.Append("api/univers/v1/License/IsLicenseKeyValidAsync");
                    urlBuilder_.Append('?');
                    if (isTrialVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("IsTrialVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isTrialVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customerName != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CustomerName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customerRefCode != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CustomerRefCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerRefCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customerEmail != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("CustomerEmail")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerEmail, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (defaultExpirationTimeInDays != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("DefaultExpirationTimeInDays")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(defaultExpirationTimeInDays, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (endValidationDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("EndValidationDate")).Append('=').Append(System.Uri.EscapeDataString(endValidationDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isActive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("IsActive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isActive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (licenseKey != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LicenseKey")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseKey, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (licenseType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LicenseType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (licenseMessage != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("LicenseMessage")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licenseMessage, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> UpdateLicenseAsync(string licence)
        {
            return UpdateLicenseAsync(licence, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> UpdateLicenseAsync(string licence, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/License/UpdateLicenseAsync"
                    urlBuilder_.Append("api/univers/v1/License/UpdateLicenseAsync");
                    urlBuilder_.Append('?');
                    if (licence != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("licence")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(licence, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IPersonalClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDetailsDto> GetProfileAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDetailsDto> GetProfileAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateProfileAsync(UpdateUserRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateProfileAsync(UpdateUserRequest body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangePasswordAsync(ChangePasswordRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangePasswordAsync(ChangePasswordRequest body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonalClient : IPersonalClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public PersonalClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserDetailsDto> GetProfileAsync()
        {
            return GetProfileAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserDetailsDto> GetProfileAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Personal/GetProfileAsync"
                    urlBuilder_.Append("api/univers/v1/Personal/GetProfileAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserDetailsDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateProfileAsync(UpdateUserRequest body)
        {
            return UpdateProfileAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateProfileAsync(UpdateUserRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Personal/UpdateProfileAsync"
                    urlBuilder_.Append("api/univers/v1/Personal/UpdateProfileAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ChangePasswordAsync(ChangePasswordRequest body)
        {
            return ChangePasswordAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChangePasswordAsync(ChangePasswordRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Personal/change-password"
                    urlBuilder_.Append("api/univers/v1/Personal/change-password");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResult>("Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync()
        {
            return GetPermissionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetPermissionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Personal/GetPermissionsAsync"
                    urlBuilder_.Append("api/univers/v1/Personal/GetPermissionsAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IRefManagerClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RefreshDataAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RefreshDataAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReferentialTableInfo> GetReferentialTableInfoAsync(int? referentialTableId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReferentialTableInfo> GetReferentialTableInfoAsync(int? referentialTableId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<byte[]> GetReferentialTableDataAsync(int? referentialTableId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<byte[]> GetReferentialTableDataAsync(int? referentialTableId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> UpdateReferentialTableDataAsync(int? referentialTableId, bool? approved, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> UpdateReferentialTableDataAsync(int? referentialTableId, bool? approved, byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CloneLabelObjectCodeEntriesAsync(int? referentialTableId, string labelcodeObject);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> CloneLabelObjectCodeEntriesAsync(int? referentialTableId, string labelcodeObject, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> UpdateReferentialAsync(ReferentialTable body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> UpdateReferentialAsync(ReferentialTable body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApproveReferentialAsync(TM_RFS_ReferentialSettings body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ApproveReferentialAsync(TM_RFS_ReferentialSettings body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddOrUpdateHistoryAsync(TM_RFH_ReferentialHistorical body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddOrUpdateHistoryAsync(TM_RFH_ReferentialHistorical body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GdbRequestToHandle> GetGdbRequestTohandleAsync(GdbRequestAction? action);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GdbRequestToHandle> GetGdbRequestTohandleAsync(GdbRequestAction? action, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GdbRequestHandledAsync(GdbRequestHandled body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> GdbRequestHandledAsync(GdbRequestHandled body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefManagerClient : IRefManagerClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public RefManagerClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RefreshDataAsync()
        {
            return RefreshDataAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RefreshDataAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/RefreshData"
                    urlBuilder_.Append("api/univers/v1/RefManager/RefreshData");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReferentialTableInfo> GetReferentialTableInfoAsync(int? referentialTableId)
        {
            return GetReferentialTableInfoAsync(referentialTableId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReferentialTableInfo> GetReferentialTableInfoAsync(int? referentialTableId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/GetReferentialTableInfo"
                    urlBuilder_.Append("api/univers/v1/RefManager/GetReferentialTableInfo");
                    urlBuilder_.Append('?');
                    if (referentialTableId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("referentialTableId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(referentialTableId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReferentialTableInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<byte[]> GetReferentialTableDataAsync(int? referentialTableId)
        {
            return GetReferentialTableDataAsync(referentialTableId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<byte[]> GetReferentialTableDataAsync(int? referentialTableId, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/GetReferentialTableData"
                    urlBuilder_.Append("api/univers/v1/RefManager/GetReferentialTableData");
                    urlBuilder_.Append('?');
                    if (referentialTableId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("referentialTableId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(referentialTableId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<byte[]>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> UpdateReferentialTableDataAsync(int? referentialTableId, bool? approved, byte[] body)
        {
            return UpdateReferentialTableDataAsync(referentialTableId, approved, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> UpdateReferentialTableDataAsync(int? referentialTableId, bool? approved, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/UpdateReferentialTableData"
                    urlBuilder_.Append("api/univers/v1/RefManager/UpdateReferentialTableData");
                    urlBuilder_.Append('?');
                    if (referentialTableId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("referentialTableId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(referentialTableId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (approved != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("approved")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(approved, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<int> CloneLabelObjectCodeEntriesAsync(int? referentialTableId, string labelcodeObject)
        {
            return CloneLabelObjectCodeEntriesAsync(referentialTableId, labelcodeObject, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> CloneLabelObjectCodeEntriesAsync(int? referentialTableId, string labelcodeObject, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/CloneLabelObjectCodeEntries"
                    urlBuilder_.Append("api/univers/v1/RefManager/CloneLabelObjectCodeEntries");
                    urlBuilder_.Append('?');
                    if (referentialTableId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("referentialTableId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(referentialTableId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (labelcodeObject != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("labelcodeObject")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(labelcodeObject, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> UpdateReferentialAsync(ReferentialTable body)
        {
            return UpdateReferentialAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> UpdateReferentialAsync(ReferentialTable body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/UpdateReferential"
                    urlBuilder_.Append("api/univers/v1/RefManager/UpdateReferential");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> ApproveReferentialAsync(TM_RFS_ReferentialSettings body)
        {
            return ApproveReferentialAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> ApproveReferentialAsync(TM_RFS_ReferentialSettings body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/ApproveReferential"
                    urlBuilder_.Append("api/univers/v1/RefManager/ApproveReferential");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddOrUpdateHistoryAsync(TM_RFH_ReferentialHistorical body)
        {
            return AddOrUpdateHistoryAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddOrUpdateHistoryAsync(TM_RFH_ReferentialHistorical body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/AddOrUpdateHistory"
                    urlBuilder_.Append("api/univers/v1/RefManager/AddOrUpdateHistory");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GdbRequestToHandle> GetGdbRequestTohandleAsync(GdbRequestAction? action)
        {
            return GetGdbRequestTohandleAsync(action, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GdbRequestToHandle> GetGdbRequestTohandleAsync(GdbRequestAction? action, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/GetGdbRequestTohandle"
                    urlBuilder_.Append("api/univers/v1/RefManager/GetGdbRequestTohandle");
                    urlBuilder_.Append('?');
                    if (action != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("action")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(action, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GdbRequestToHandle>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> GdbRequestHandledAsync(GdbRequestHandled body)
        {
            return GdbRequestHandledAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> GdbRequestHandledAsync(GdbRequestHandled body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/RefManager/GdbRequestHandled"
                    urlBuilder_.Append("api/univers/v1/RefManager/GdbRequestHandled");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITechnicalClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DatabasePurgeAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DatabasePurgeAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OrkestraNodeWorkerUpdateCheckAsync(int? majorVersion, int? minorVersion, int? buildVersion, int? revisionVersion, System.DateTimeOffset? fileCreationDateUtc);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> OrkestraNodeWorkerUpdateCheckAsync(int? majorVersion, int? minorVersion, int? buildVersion, int? revisionVersion, System.DateTimeOffset? fileCreationDateUtc, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> OrkestraNodeWorkerFileNameGetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> OrkestraNodeWorkerFileNameGetAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> OrkestraNodeWorkerGetUpdateAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> OrkestraNodeWorkerGetUpdateAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateDetails> OrkestraWebSiteUpdateCheckAsync(int? majorVersion, int? minorVersion, int? buildVersion, int? revisionVersion);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateDetails> OrkestraWebSiteUpdateCheckAsync(int? majorVersion, int? minorVersion, int? buildVersion, int? revisionVersion, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TechnicalClient : ITechnicalClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public TechnicalClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> DatabasePurgeAsync()
        {
            return DatabasePurgeAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> DatabasePurgeAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Technical/DatabasePurgeAsync"
                    urlBuilder_.Append("api/univers/v1/Technical/DatabasePurgeAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> OrkestraNodeWorkerUpdateCheckAsync(int? majorVersion, int? minorVersion, int? buildVersion, int? revisionVersion, System.DateTimeOffset? fileCreationDateUtc)
        {
            return OrkestraNodeWorkerUpdateCheckAsync(majorVersion, minorVersion, buildVersion, revisionVersion, fileCreationDateUtc, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> OrkestraNodeWorkerUpdateCheckAsync(int? majorVersion, int? minorVersion, int? buildVersion, int? revisionVersion, System.DateTimeOffset? fileCreationDateUtc, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Technical/OrkestraNodeWorkerUpdateCheck"
                    urlBuilder_.Append("api/univers/v1/Technical/OrkestraNodeWorkerUpdateCheck");
                    urlBuilder_.Append('?');
                    if (majorVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MajorVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(majorVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minorVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MinorVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minorVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (buildVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("BuildVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(buildVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (revisionVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RevisionVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(revisionVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fileCreationDateUtc != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fileCreationDateUtc")).Append('=').Append(System.Uri.EscapeDataString(fileCreationDateUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> OrkestraNodeWorkerFileNameGetAsync()
        {
            return OrkestraNodeWorkerFileNameGetAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> OrkestraNodeWorkerFileNameGetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Technical/OrkestraNodeWorkerFileNameGet"
                    urlBuilder_.Append("api/univers/v1/Technical/OrkestraNodeWorkerFileNameGet");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> OrkestraNodeWorkerGetUpdateAsync()
        {
            return OrkestraNodeWorkerGetUpdateAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> OrkestraNodeWorkerGetUpdateAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Technical/OrkestraNodeWorkerGetUpdate"
                    urlBuilder_.Append("api/univers/v1/Technical/OrkestraNodeWorkerGetUpdate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateDetails> OrkestraWebSiteUpdateCheckAsync(int? majorVersion, int? minorVersion, int? buildVersion, int? revisionVersion)
        {
            return OrkestraWebSiteUpdateCheckAsync(majorVersion, minorVersion, buildVersion, revisionVersion, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateDetails> OrkestraWebSiteUpdateCheckAsync(int? majorVersion, int? minorVersion, int? buildVersion, int? revisionVersion, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Technical/OrkestraWebSiteUpdateCheck"
                    urlBuilder_.Append("api/univers/v1/Technical/OrkestraWebSiteUpdateCheck");
                    urlBuilder_.Append('?');
                    if (majorVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MajorVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(majorVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minorVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("MinorVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minorVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (buildVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("BuildVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(buildVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (revisionVersion != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("RevisionVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(revisionVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITM_RFH_ReferentialHistoricalClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TM_RFH_ReferentialHistoricalClient : ITM_RFH_ReferentialHistoricalClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public TM_RFH_ReferentialHistoricalClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body)
        {
            return InsertAsync(modebulk, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (modebulk != null)
                        request_.Headers.TryAddWithoutValidation("modebulk", ConvertToString(modebulk, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFH_ReferentialHistorical/InsertAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFH_ReferentialHistorical/InsertAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body)
        {
            return GetAllSqlRawAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFH_ReferentialHistorical/GetAllSqlRawAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFH_ReferentialHistorical/GetAllSqlRawAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body)
        {
            return UpdateAsync(modebulk, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (modebulk != null)
                        request_.Headers.TryAddWithoutValidation("modebulk", ConvertToString(modebulk, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFH_ReferentialHistorical/UpdateAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFH_ReferentialHistorical/UpdateAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body)
        {
            return PatchAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFH_ReferentialHistorical/PatchAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFH_ReferentialHistorical/PatchAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body)
        {
            return DeleteAsync(modebulk, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (modebulk != null)
                        request_.Headers.TryAddWithoutValidation("modebulk", ConvertToString(modebulk, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFH_ReferentialHistorical/DeleteAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFH_ReferentialHistorical/DeleteAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITM_RFS_ReferentialSettingsClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResponse_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null> TM_RFS_ReferentialSettingsListPagedResponseAsync(DataManagerRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResponse_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null> TM_RFS_ReferentialSettingsListPagedResponseAsync(DataManagerRequest body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TM_RFS_ReferentialSettingsUpdateAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TM_RFS_ReferentialSettingsUpdateAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TM_RFS_ReferentialSettingsAddAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TM_RFS_ReferentialSettingsAddAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TM_RFS_ReferentialSettingsRemoveAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TM_RFS_ReferentialSettingsRemoveAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> TM_RFS_ReferentialSettingsAsync(PatchDoc body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> TM_RFS_ReferentialSettingsAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TM_RFS_ReferentialSettingsClient : ITM_RFS_ReferentialSettingsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public TM_RFS_ReferentialSettingsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PagedResponse_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null> TM_RFS_ReferentialSettingsListPagedResponseAsync(DataManagerRequest body)
        {
            return TM_RFS_ReferentialSettingsListPagedResponseAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedResponse_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null> TM_RFS_ReferentialSettingsListPagedResponseAsync(DataManagerRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TM_RFS_ReferentialSettingsListPagedResponse"
                    urlBuilder_.Append("TM_RFS_ReferentialSettingsListPagedResponse");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedResponse_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TM_RFS_ReferentialSettingsUpdateAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body)
        {
            return TM_RFS_ReferentialSettingsUpdateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TM_RFS_ReferentialSettingsUpdateAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TM_RFS_ReferentialSettingsUpdate"
                    urlBuilder_.Append("TM_RFS_ReferentialSettingsUpdate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TM_RFS_ReferentialSettingsAddAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body)
        {
            return TM_RFS_ReferentialSettingsAddAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TM_RFS_ReferentialSettingsAddAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TM_RFS_ReferentialSettingsAdd"
                    urlBuilder_.Append("TM_RFS_ReferentialSettingsAdd");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TM_RFS_ReferentialSettingsRemoveAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body)
        {
            return TM_RFS_ReferentialSettingsRemoveAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TM_RFS_ReferentialSettingsRemoveAsync(CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TM_RFS_ReferentialSettingsRemove"
                    urlBuilder_.Append("TM_RFS_ReferentialSettingsRemove");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body)
        {
            return InsertAsync(modebulk, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (modebulk != null)
                        request_.Headers.TryAddWithoutValidation("modebulk", ConvertToString(modebulk, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFS_ReferentialSettings/InsertAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFS_ReferentialSettings/InsertAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body)
        {
            return GetAllSqlRawAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFS_ReferentialSettings/GetAllSqlRawAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFS_ReferentialSettings/GetAllSqlRawAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body)
        {
            return UpdateAsync(modebulk, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (modebulk != null)
                        request_.Headers.TryAddWithoutValidation("modebulk", ConvertToString(modebulk, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFS_ReferentialSettings/UpdateAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFS_ReferentialSettings/UpdateAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body)
        {
            return PatchAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFS_ReferentialSettings/PatchAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFS_ReferentialSettings/PatchAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> TM_RFS_ReferentialSettingsAsync(PatchDoc body)
        {
            return TM_RFS_ReferentialSettingsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> TM_RFS_ReferentialSettingsAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/RefManager/v1/TM_RFS_ReferentialSettings"
                    urlBuilder_.Append("api/RefManager/v1/TM_RFS_ReferentialSettings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body)
        {
            return DeleteAsync(modebulk, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (modebulk != null)
                        request_.Headers.TryAddWithoutValidation("modebulk", ConvertToString(modebulk, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TM_RFS_ReferentialSettings/DeleteAsync"
                    urlBuilder_.Append("api/refManager/v1/TM_RFS_ReferentialSettings/DeleteAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITokensClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenResponse> GetTokenAsync(TokenRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenResponse> GetTokenAsync(TokenRequest body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenResponse> RefreshAsync(RefreshTokenRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenResponse> RefreshAsync(RefreshTokenRequest body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokensClient : ITokensClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public TokensClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenResponse> GetTokenAsync(TokenRequest body)
        {
            return GetTokenAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenResponse> GetTokenAsync(TokenRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Tokens/GetTokenAsync"
                    urlBuilder_.Append("api/univers/v1/Tokens/GetTokenAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenResponse> RefreshAsync(RefreshTokenRequest body)
        {
            return RefreshAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenResponse> RefreshAsync(RefreshTokenRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Tokens/refresh"
                    urlBuilder_.Append("api/univers/v1/Tokens/refresh");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITR_CNX_ConnectionsClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResponse_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null> TR_CNX_ConnectionsListPagedResponseAsync(DataManagerRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResponse_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null> TR_CNX_ConnectionsListPagedResponseAsync(DataManagerRequest body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_CNX_ConnectionsUpdateAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_CNX_ConnectionsUpdateAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_CNX_ConnectionsAddAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_CNX_ConnectionsAddAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_CNX_ConnectionsRemoveAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_CNX_ConnectionsRemoveAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> TR_CNX_ConnectionsAsync(PatchDoc body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> TR_CNX_ConnectionsAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TR_CNX_ConnectionsClient : ITR_CNX_ConnectionsClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public TR_CNX_ConnectionsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PagedResponse_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null> TR_CNX_ConnectionsListPagedResponseAsync(DataManagerRequest body)
        {
            return TR_CNX_ConnectionsListPagedResponseAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedResponse_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null> TR_CNX_ConnectionsListPagedResponseAsync(DataManagerRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TR_CNX_ConnectionsListPagedResponse"
                    urlBuilder_.Append("TR_CNX_ConnectionsListPagedResponse");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedResponse_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TR_CNX_ConnectionsUpdateAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body)
        {
            return TR_CNX_ConnectionsUpdateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TR_CNX_ConnectionsUpdateAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TR_CNX_ConnectionsUpdate"
                    urlBuilder_.Append("TR_CNX_ConnectionsUpdate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TR_CNX_ConnectionsAddAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body)
        {
            return TR_CNX_ConnectionsAddAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TR_CNX_ConnectionsAddAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TR_CNX_ConnectionsAdd"
                    urlBuilder_.Append("TR_CNX_ConnectionsAdd");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TR_CNX_ConnectionsRemoveAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body)
        {
            return TR_CNX_ConnectionsRemoveAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TR_CNX_ConnectionsRemoveAsync(CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TR_CNX_ConnectionsRemove"
                    urlBuilder_.Append("TR_CNX_ConnectionsRemove");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body)
        {
            return InsertAsync(modebulk, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> InsertAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (modebulk != null)
                        request_.Headers.TryAddWithoutValidation("modebulk", ConvertToString(modebulk, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TR_CNX_Connections/InsertAsync"
                    urlBuilder_.Append("api/refManager/v1/TR_CNX_Connections/InsertAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body)
        {
            return GetAllSqlRawAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetAllSqlRawAsync(byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TR_CNX_Connections/GetAllSqlRawAsync"
                    urlBuilder_.Append("api/refManager/v1/TR_CNX_Connections/GetAllSqlRawAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body)
        {
            return UpdateAsync(modebulk, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> UpdateAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (modebulk != null)
                        request_.Headers.TryAddWithoutValidation("modebulk", ConvertToString(modebulk, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TR_CNX_Connections/UpdateAsync"
                    urlBuilder_.Append("api/refManager/v1/TR_CNX_Connections/UpdateAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body)
        {
            return PatchAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> PatchAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TR_CNX_Connections/PatchAsync"
                    urlBuilder_.Append("api/refManager/v1/TR_CNX_Connections/PatchAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> TR_CNX_ConnectionsAsync(PatchDoc body)
        {
            return TR_CNX_ConnectionsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> TR_CNX_ConnectionsAsync(PatchDoc body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/RefManager/v1/TR_CNX_Connections"
                    urlBuilder_.Append("api/RefManager/v1/TR_CNX_Connections");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body)
        {
            return DeleteAsync(modebulk, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApiResult> DeleteAsync(int? modebulk, byte[] body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (modebulk != null)
                        request_.Headers.TryAddWithoutValidation("modebulk", ConvertToString(modebulk, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/refManager/v1/TR_CNX_Connections/DeleteAsync"
                    urlBuilder_.Append("api/refManager/v1/TR_CNX_Connections/DeleteAsync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApiResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITR_MEL_EMail_TemplatesClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResponse_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null> TR_MEL_EMail_TemplatesListPagedResponseAsync(DataManagerRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResponse_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null> TR_MEL_EMail_TemplatesListPagedResponseAsync(DataManagerRequest body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_MEL_EMail_TemplatesUpdateAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_MEL_EMail_TemplatesUpdateAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_MEL_EMail_TemplatesAddAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_MEL_EMail_TemplatesAddAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_MEL_EMail_TemplatesRemoveAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TR_MEL_EMail_TemplatesRemoveAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TR_MEL_EMail_TemplatesClient : ITR_MEL_EMail_TemplatesClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public TR_MEL_EMail_TemplatesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PagedResponse_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null> TR_MEL_EMail_TemplatesListPagedResponseAsync(DataManagerRequest body)
        {
            return TR_MEL_EMail_TemplatesListPagedResponseAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedResponse_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null> TR_MEL_EMail_TemplatesListPagedResponseAsync(DataManagerRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TR_MEL_EMail_TemplatesListPagedResponse"
                    urlBuilder_.Append("TR_MEL_EMail_TemplatesListPagedResponse");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedResponse_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TR_MEL_EMail_TemplatesUpdateAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body)
        {
            return TR_MEL_EMail_TemplatesUpdateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TR_MEL_EMail_TemplatesUpdateAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TR_MEL_EMail_TemplatesUpdate"
                    urlBuilder_.Append("TR_MEL_EMail_TemplatesUpdate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TR_MEL_EMail_TemplatesAddAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body)
        {
            return TR_MEL_EMail_TemplatesAddAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TR_MEL_EMail_TemplatesAddAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TR_MEL_EMail_TemplatesAdd"
                    urlBuilder_.Append("TR_MEL_EMail_TemplatesAdd");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TR_MEL_EMail_TemplatesRemoveAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body)
        {
            return TR_MEL_EMail_TemplatesRemoveAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TR_MEL_EMail_TemplatesRemoveAsync(CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "TR_MEL_EMail_TemplatesRemove"
                    urlBuilder_.Append("TR_MEL_EMail_TemplatesRemove");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IUserClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMenu>> GetUserMenuAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMenu>> GetUserMenuAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMenu>> GetMenuSettingsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMenu>> GetMenuSettingsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SaveMenuSettingsAsync(System.Collections.Generic.IEnumerable<UserMenu> body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> SaveMenuSettingsAsync(System.Collections.Generic.IEnumerable<UserMenu> body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserClient : IUserClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public UserClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMenu>> GetUserMenuAsync()
        {
            return GetUserMenuAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMenu>> GetUserMenuAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/User/GetUserMenu"
                    urlBuilder_.Append("api/univers/v1/User/GetUserMenu");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserMenu>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMenu>> GetMenuSettingsAsync()
        {
            return GetMenuSettingsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMenu>> GetMenuSettingsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/User/GetMenuSettings"
                    urlBuilder_.Append("api/univers/v1/User/GetMenuSettings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserMenu>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> SaveMenuSettingsAsync(System.Collections.Generic.IEnumerable<UserMenu> body)
        {
            return SaveMenuSettingsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> SaveMenuSettingsAsync(System.Collections.Generic.IEnumerable<UserMenu> body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/User/SaveMenuSettings"
                    urlBuilder_.Append("api/univers/v1/User/SaveMenuSettings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IVersionClient : IOrkaApiClient
    {
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DuplicateAsync(int? dpuIdToDuplicate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DuplicateAsync(int? dpuIdToDuplicate, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionClient : IVersionClient
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

        public VersionClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<bool> DuplicateAsync(int? dpuIdToDuplicate)
        {
            return DuplicateAsync(dpuIdToDuplicate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> DuplicateAsync(int? dpuIdToDuplicate, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json;odata.metadata=minimal;odata.streaming=true");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;odata.metadata=minimal;odata.streaming=true"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/univers/v1/Version/Duplicate"
                    urlBuilder_.Append("api/univers/v1/Version/Duplicate");
                    urlBuilder_.Append('?');
                    if (dpuIdToDuplicate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dpuIdToDuplicate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dpuIdToDuplicate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ManagedTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Null")]
        Null = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Int32")]
        Int32 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Int64")]
        Int64 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Decimal")]
        Decimal = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTimeOffset")]
        DateTimeOffset = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TM_RFH_ReferentialHistorical
    {

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_id")]
        public int Rfh_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_id")]
        public int Rfs_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_TableName")]
        public string Rfh_TableName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_TableFunctionalName")]
        public string Rfh_TableFunctionalName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_Description")]
        public string Rfh_Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_StatusCode")]
        public string Rfh_StatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_UpdateDate")]
        public System.DateTimeOffset? Rfh_UpdateDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_UpdateBy")]
        public string Rfh_UpdateBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_ProcessType")]
        public string Rfh_ProcessType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_ProcessStatus")]
        public string Rfh_ProcessStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_LabelCode")]
        public string Rfh_LabelCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_LabelCodeGenerated")]
        public string Rfh_LabelCodeGenerated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_RequestId")]
        public int? Rfh_RequestId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_TreatmentId")]
        public string Rfh_TreatmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfh_ErrorMessage")]
        public string Rfh_ErrorMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TM_RFS_ReferentialSettings")]
        public TM_RFS_ReferentialSettings TM_RFS_ReferentialSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TM_RFS_ReferentialSettings
    {

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_id")]
        public int Rfs_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rfs_TableName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableFunctionalName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rfs_TableFunctionalName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_Id")]
        public int Cnx_Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableSchema")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rfs_TableSchema { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableQuerySelect")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rfs_TableQuerySelect { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableQueryInsert")]
        public string Rfs_TableQueryInsert { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableQueryDelete")]
        public string Rfs_TableQueryDelete { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableQueryUpdate")]
        public string Rfs_TableQueryUpdate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableQueryUpdateColumns")]
        public string Rfs_TableQueryUpdateColumns { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableQueryUpdateKeys")]
        public string Rfs_TableQueryUpdateKeys { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableQueryCriteria")]
        public string Rfs_TableQueryCriteria { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_Description")]
        public string Rfs_Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableTypology")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RefManagerTypologyType Rfs_TableTypology { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_ScenarioId")]
        public int? Rfs_ScenarioId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_ParamLabelObjectCode")]
        public string Rfs_ParamLabelObjectCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_LabelCodeFieldName")]
        public string Rfs_LabelCodeFieldName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_Documentation")]
        public string Rfs_Documentation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_ManagerId")]
        public string Rfs_ManagerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_LabelDataClonedInProgressListJson")]
        public string Rfs_LabelDataClonedInProgressListJson { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableDataToApprouve")]
        public bool Rfs_TableDataToApprouve { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableDataApproved")]
        public bool Rfs_TableDataApproved { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableDataApprovalDate")]
        public System.DateTimeOffset? Rfs_TableDataApprovalDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableDataApprovedBy")]
        public string Rfs_TableDataApprovedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableDataNeedToBeRefreshed")]
        public bool Rfs_TableDataNeedToBeRefreshed { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_LastRefreshDate")]
        public System.DateTimeOffset? Rfs_LastRefreshDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_IsUpdateSentToGdb")]
        public bool Rfs_IsUpdateSentToGdb { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_SendDateToGdb")]
        public System.DateTimeOffset? Rfs_SendDateToGdb { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_IsBackupNeeded")]
        public bool Rfs_IsBackupNeeded { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableDataMaxRowsExpectedToReceive")]
        public int? Rfs_TableDataMaxRowsExpectedToReceive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableDataMinRowsExpectedToSend")]
        public int? Rfs_TableDataMinRowsExpectedToSend { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_TableDataMaxRowsExpectedToSend")]
        public int? Rfs_TableDataMaxRowsExpectedToSend { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_StatusCode")]
        public string Rfs_StatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_CreationDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Rfs_CreationDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_CreatedBy")]
        public string Rfs_CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_UpdateDate")]
        public System.DateTimeOffset? Rfs_UpdateDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_UpdateBy")]
        public string Rfs_UpdateBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TR_CNX_Connections")]
        public TR_CNX_Connections TR_CNX_Connections { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TX_RFX_ReferentialSettingsData")]
        public TX_RFX_ReferentialSettingsData TX_RFX_ReferentialSettingsData { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TR_CNX_Connections
    {

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_Id")]
        public int Cnx_Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_Code")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Cnx_Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_Label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Cnx_Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_DatabaseType")]
        public int Cnx_DatabaseType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_ServerName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Cnx_ServerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_Port")]
        public int Cnx_Port { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_DatabaseName")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Cnx_DatabaseName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_Login")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Cnx_Login { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_Password")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Cnx_Password { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_CreationDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Cnx_CreationDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Cnx_IsActive")]
        public bool Cnx_IsActive { get; set; } = false;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TX_RFX_ReferentialSettingsData
    {

        [System.Text.Json.Serialization.JsonPropertyName("Rfx_id")]
        public int Rfx_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfs_id")]
        public int Rfs_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfx_TableData")]
        public string Rfx_TableData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfx_TableMetadata")]
        public string Rfx_TableMetadata { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfx_TableDataUpdateDate")]
        public System.DateTimeOffset? Rfx_TableDataUpdateDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfx_TableDataUpdatedBy")]
        public string Rfx_TableDataUpdatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfx_TableDataBackup")]
        public string Rfx_TableDataBackup { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfx_TableMetadataBackup")]
        public string Rfx_TableMetadataBackup { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfx_TableDataBackupDate")]
        public System.DateTimeOffset? Rfx_TableDataBackupDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Rfx_TableDataBackupUpdatedBy")]
        public string Rfx_TableDataBackupUpdatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TM_RFS_ReferentialSettings")]
        public TM_RFS_ReferentialSettings TM_RFS_ReferentialSettings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TBD_BATCH_DEMANDES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TBD_BATCH_DEMANDEID")]
        public int TBD_BATCH_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDEID")]
        public int TD_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBD_ORDRE_EXECUTION")]
        public int TBD_ORDRE_EXECUTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBD_EXECUTION")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TBD_EXECUTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBD_CODE_RETOUR")]
        public int? TBD_CODE_RETOUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEB_ETAT_BATCHID")]
        public int TEB_ETAT_BATCHID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBD_DATE_DEBUT_EXECUTION")]
        public System.DateTimeOffset? TBD_DATE_DEBUT_EXECUTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBD_DATE_FIN_EXECUTION")]
        public System.DateTimeOffset? TBD_DATE_FIN_EXECUTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("T")]
        public TD_DEMANDES T { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEB_ETAT_BATCH")]
        public TEB_ETAT_BATCHS TEB_ETAT_BATCH { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TBS_BATCH_SCENARIOS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TEB_ETAT_BATCHID")]
        public int TEB_ETAT_BATCHID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBS_ORDRE_EXECUTION")]
        public int TBS_ORDRE_EXECUTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEB_ETAT_BATCH")]
        public TEB_ETAT_BATCHS TEB_ETAT_BATCH { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIO")]
        public TS_SCENARIOS TS_SCENARIO { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCMD_COMMANDES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDEID")]
        public int TCMD_COMMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DATE_CREATION")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TCMD_DATE_CREATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DATE_PASSAGE_CMD")]
        public System.DateTimeOffset? TCMD_DATE_PASSAGE_CMD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DATE_LIVRAISON_SOUHAITEE")]
        public System.DateTimeOffset? TCMD_DATE_LIVRAISON_SOUHAITEE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DATE_MODIF")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TCMD_DATE_MODIF { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DATE_PRISE_EN_CHARGE")]
        public System.DateTimeOffset? TCMD_DATE_PRISE_EN_CHARGE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DATE_PREVISIONNELLE_LIVRAISON")]
        public System.DateTimeOffset? TCMD_DATE_PREVISIONNELLE_LIVRAISON { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DATE_LIVRAISON")]
        public System.DateTimeOffset? TCMD_DATE_LIVRAISON { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DATE_CLOTURE")]
        public System.DateTimeOffset? TCMD_DATE_CLOTURE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_COMMANDITAIREID")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TRU_COMMANDITAIREID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_EXPLOITANTID")]
        public string TRU_EXPLOITANTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMENTAIRE")]
        public string TCMD_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_PHASEID")]
        public int TCMD_PH_PHASEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_ORIGINEID")]
        public int? TCMD_ORIGINEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_MC_MODE_CREATIONID")]
        public int TCMD_MC_MODE_CREATIONID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDOM_DOMAINEID")]
        public int? TDOM_DOMAINEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int? TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int? TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_MC_MODE_CREATION")]
        public TCMD_MC_MODE_CREATIONS TCMD_MC_MODE_CREATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_ORIGINE")]
        public TCMD_COMMANDES TCMD_ORIGINE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_PHASE")]
        public TCMD_PH_PHASES TCMD_PH_PHASE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_COMMANDITAIRE")]
        public TRU_USERS TRU_COMMANDITAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_EXPLOITANT")]
        public TRU_USERS TRU_EXPLOITANT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETAT")]
        public TE_ETATS TE_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIO")]
        public TS_SCENARIOS TS_SCENARIO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("InverseTCMD_ORIGINE")]
        public System.Collections.Generic.ICollection<TCMD_COMMANDES> InverseTCMD_ORIGINE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DA_DEMANDES_ASSOCIEES")]
        public System.Collections.Generic.ICollection<TCMD_DA_DEMANDES_ASSOCIEES> TCMD_DA_DEMANDES_ASSOCIEES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DOC_DOCUMENTS")]
        public System.Collections.Generic.ICollection<TCMD_DOC_DOCUMENTS> TCMD_DOC_DOCUMENTS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_SP_SUIVI_PHASES")]
        public System.Collections.Generic.ICollection<TCMD_SP_SUIVI_PHASES> TCMD_SP_SUIVI_PHASES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDC_DEMANDES_COMMANDES")]
        public System.Collections.Generic.ICollection<TDC_DEMANDES_COMMANDES> TDC_DEMANDES_COMMANDES { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCMD_CR_CMD_RAISON_PHASES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_CR_CMD_RAISON_PHASEID")]
        public int TCMD_CR_CMD_RAISON_PHASEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_SP_SUIVI_PHASEID")]
        public int TCMD_SP_SUIVI_PHASEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_RP_RAISON_PHASEID")]
        public int TCMD_RP_RAISON_PHASEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_RP_RAISON_PHASE")]
        public TCMD_RP_RAISON_PHASES TCMD_RP_RAISON_PHASE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_SP_SUIVI_PHASE")]
        public TCMD_SP_SUIVI_PHASES TCMD_SP_SUIVI_PHASE { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCMD_DA_DEMANDES_ASSOCIEES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DA_DEMANDES_ASSOCIEEID")]
        public int TCMD_DA_DEMANDES_ASSOCIEEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDEID")]
        public int TCMD_COMMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDEID")]
        public int TD_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DA_COMMENTAIRE")]
        public string TCMD_DA_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DA_VERSION_NOTABLE")]
        public int? TCMD_DA_VERSION_NOTABLE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DA_DATE_ASSOCIATION")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TCMD_DA_DATE_ASSOCIATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_AUTEURID")]
        public string TRU_AUTEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDE")]
        public TCMD_COMMANDES TCMD_COMMANDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_AUTEUR")]
        public TRU_USERS TRU_AUTEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDE")]
        public TD_DEMANDES TD_DEMANDE { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCMD_DOC_DOCUMENTS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DOC_DOCUMENTID")]
        public int TCMD_DOC_DOCUMENTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DOC_FILENAME")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_DOC_FILENAME { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DOC_DATE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TCMD_DOC_DATE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DOC_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_DOC_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDEID")]
        public int TCMD_COMMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_TD_TYPE_DOCUMENTID")]
        public int? TCMD_TD_TYPE_DOCUMENTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DOC_TAILLE")]
        public int? TCMD_DOC_TAILLE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDE")]
        public TCMD_COMMANDES TCMD_COMMANDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_TD_TYPE_DOCUMENT")]
        public TCMD_TD_TYPE_DOCUMENTS TCMD_TD_TYPE_DOCUMENT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCMD_MC_MODE_CREATIONS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_MC_MODE_CREATIONID")]
        public int TCMD_MC_MODE_CREATIONID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_MC_CODE")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_MC_CODE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_MC_LIB_FR")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_MC_LIB_FR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_MC_LIB_EN")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_MC_LIB_EN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDES")]
        public System.Collections.Generic.ICollection<TCMD_COMMANDES> TCMD_COMMANDES { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCMD_PH_PHASES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_PHASEID")]
        public int TCMD_PH_PHASEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_CODE")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_PH_CODE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_LIB_FR")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_PH_LIB_FR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_LIB_EN")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_PH_LIB_EN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_DELAI_RECYCLAGE")]
        public int? TCMD_PH_DELAI_RECYCLAGE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDES")]
        public System.Collections.Generic.ICollection<TCMD_COMMANDES> TCMD_COMMANDES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_RP_RAISON_PHASES")]
        public System.Collections.Generic.ICollection<TCMD_RP_RAISON_PHASES> TCMD_RP_RAISON_PHASES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_SP_SUIVI_PHASESTCMD_PH_PHASE_APRES")]
        public System.Collections.Generic.ICollection<TCMD_SP_SUIVI_PHASES> TCMD_SP_SUIVI_PHASESTCMD_PH_PHASE_APRES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_SP_SUIVI_PHASESTCMD_PH_PHASE_AVANT")]
        public System.Collections.Generic.ICollection<TCMD_SP_SUIVI_PHASES> TCMD_SP_SUIVI_PHASESTCMD_PH_PHASE_AVANT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCMD_RP_RAISON_PHASES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_RP_RAISON_PHASEID")]
        public int TCMD_RP_RAISON_PHASEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_RP_LIB_FR")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_RP_LIB_FR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_RP_LIB_EN")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_RP_LIB_EN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_PHASEID")]
        public int? TCMD_PH_PHASEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_PHASE")]
        public TCMD_PH_PHASES TCMD_PH_PHASE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_CR_CMD_RAISON_PHASES")]
        public System.Collections.Generic.ICollection<TCMD_CR_CMD_RAISON_PHASES> TCMD_CR_CMD_RAISON_PHASES { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCMD_SP_SUIVI_PHASES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_SP_SUIVI_PHASEID")]
        public int TCMD_SP_SUIVI_PHASEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDEID")]
        public int TCMD_COMMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_SP_DATE_MODIF")]
        public System.DateTimeOffset? TCMD_SP_DATE_MODIF { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_AUTEUR_MODIFID")]
        public string TRU_AUTEUR_MODIFID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_SP_COMMENTAIRE")]
        public string TCMD_SP_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_PHASE_AVANTID")]
        public int? TCMD_PH_PHASE_AVANTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_PHASE_APRESID")]
        public int TCMD_PH_PHASE_APRESID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDE")]
        public TCMD_COMMANDES TCMD_COMMANDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_PHASE_APRES")]
        public TCMD_PH_PHASES TCMD_PH_PHASE_APRES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_PH_PHASE_AVANT")]
        public TCMD_PH_PHASES TCMD_PH_PHASE_AVANT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_AUTEUR_MODIF")]
        public TRU_USERS TRU_AUTEUR_MODIF { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_CR_CMD_RAISON_PHASES")]
        public System.Collections.Generic.ICollection<TCMD_CR_CMD_RAISON_PHASES> TCMD_CR_CMD_RAISON_PHASES { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TCMD_TD_TYPE_DOCUMENTS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_TD_TYPE_DOCUMENTID")]
        public int TCMD_TD_TYPE_DOCUMENTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_TD_TYPE")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_TD_TYPE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_TD_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TCMD_TD_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DOC_DOCUMENTS")]
        public System.Collections.Generic.ICollection<TCMD_DOC_DOCUMENTS> TCMD_DOC_DOCUMENTS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TC_CATEGORIES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TC_CATEGORIEID")]
        public int TC_CATEGORIEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TC_NOM")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TC_NOM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TC_DATE_CREATION")]
        public System.DateTimeOffset TC_DATE_CREATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TC_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TC_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTERS")]
        public System.Collections.Generic.ICollection<TEM_ETAT_MASTERS> TEM_ETAT_MASTERS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TDC_DEMANDES_COMMANDES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TDC_DEMANDES_COMMANDEID")]
        public int TDC_DEMANDES_COMMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDEID")]
        public int TCMD_COMMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDEID")]
        public int TD_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDE")]
        public TCMD_COMMANDES TCMD_COMMANDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDE")]
        public TD_DEMANDES TD_DEMANDE { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TDP_DEMANDE_PROCESS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TDP_DEMANDE_PROCESSID")]
        public int TDP_DEMANDE_PROCESSID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDEID")]
        public int TD_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDP_NUM_ETAPE")]
        public int TDP_NUM_ETAPE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDP_ETAPE")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TDP_ETAPE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDP_STATUT")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string TDP_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDP_EXTRA_INFO")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TDP_EXTRA_INFO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDE")]
        public TD_DEMANDES TD_DEMANDE { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TDQ_DEMANDE_QUALIFS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_DEMANDE_QUALIFID")]
        public int TDQ_DEMANDE_QUALIFID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDEID")]
        public int TD_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_NUM_ORDRE")]
        public int? TDQ_NUM_ORDRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_CODE")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TDQ_CODE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_NOM")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TDQ_NOM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_VALEUR")]
        public int? TDQ_VALEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_NATURE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TDQ_NATURE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_DATASET")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TDQ_DATASET { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_OBJECTIF")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TDQ_OBJECTIF { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_TYPOLOGIE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TDQ_TYPOLOGIE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_COMMENT")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TDQ_COMMENT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_DATE_PROD")]
        public System.DateTimeOffset? TDQ_DATE_PROD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDE")]
        public TD_DEMANDES TD_DEMANDE { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TD_DEMANDES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDEID")]
        public int TD_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_DEMANDE")]
        public System.DateTimeOffset TD_DATE_DEMANDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_EXECUTION_SOUHAITEE")]
        public System.DateTimeOffset? TD_DATE_EXECUTION_SOUHAITEE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_PRISE_EN_CHARGE")]
        public System.DateTimeOffset? TD_DATE_PRISE_EN_CHARGE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_LIVRAISON")]
        public System.DateTimeOffset? TD_DATE_LIVRAISON { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_COMMENTAIRE_UTILISATEUR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TD_COMMENTAIRE_UTILISATEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_INFO_RETOUR_TRAITEMENT")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TD_INFO_RETOUR_TRAITEMENT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_DEMANDEURID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_DEMANDEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEURID")]
        public int? TSRV_SERVEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int? TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_GESTIONNAIRE_VALIDEURID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_GESTIONNAIRE_VALIDEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDE_ORIGINEID")]
        public int? TD_DEMANDE_ORIGINEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_PLANIF_ORIGINEID")]
        public int? TPF_PLANIF_ORIGINEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DUREE_PRODUCTION_REEL")]
        public int? TD_DUREE_PRODUCTION_REEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_COMMENTAIRE_GESTIONNAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TD_COMMENTAIRE_GESTIONNAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_AVIS_GESTIONNAIRE")]
        public System.DateTimeOffset? TD_DATE_AVIS_GESTIONNAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_SEND_MAIL_GESTIONNAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TD_SEND_MAIL_GESTIONNAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_SEND_MAIL_CLIENT")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TD_SEND_MAIL_CLIENT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_RESULT_EXIST_FILE")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TD_RESULT_EXIST_FILE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_IGNORE_RESULT")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TD_IGNORE_RESULT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_SUSPEND_EXECUTION")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TD_SUSPEND_EXECUTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_RESULT_FILE_SIZE")]
        public int? TD_RESULT_FILE_SIZE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_RESULT_NB_DOWNLOAD")]
        public int? TD_RESULT_NB_DOWNLOAD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_DERNIER_DOWNLOAD")]
        public System.DateTimeOffset? TD_DATE_DERNIER_DOWNLOAD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_PREREQUIS_DELAI_CHK")]
        public int? TD_PREREQUIS_DELAI_CHK { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_QUALIF_EXIST_FILE")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TD_QUALIF_EXIST_FILE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_QUALIF_BILAN")]
        public int? TD_QUALIF_BILAN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_QUALIF_FILE_SIZE")]
        public int? TD_QUALIF_FILE_SIZE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_GUID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TD_GUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETAT")]
        public TE_ETATS TE_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEUR")]
        public TSRV_SERVEURS TSRV_SERVEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBD_BATCH_DEMANDES")]
        public System.Collections.Generic.ICollection<TBD_BATCH_DEMANDES> TBD_BATCH_DEMANDES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPD_PREREQUIS_DEMANDES")]
        public System.Collections.Generic.ICollection<TPD_PREREQUIS_DEMANDES> TPD_PREREQUIS_DEMANDES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_PLANIFS")]
        public System.Collections.Generic.ICollection<TPF_PLANIFS> TPF_PLANIFS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRD_RESSOURCE_DEMANDES")]
        public System.Collections.Generic.ICollection<TRD_RESSOURCE_DEMANDES> TRD_RESSOURCE_DEMANDES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDQ_DEMANDE_QUALIFS")]
        public System.Collections.Generic.ICollection<TDQ_DEMANDE_QUALIFS> TDQ_DEMANDE_QUALIFS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDP_DEMANDE_PROCESS")]
        public System.Collections.Generic.ICollection<TDP_DEMANDE_PROCESS> TDP_DEMANDE_PROCESS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DA_DEMANDES_ASSOCIEES_TD_DEMANDE")]
        public System.Collections.Generic.ICollection<TCMD_DA_DEMANDES_ASSOCIEES> TCMD_DA_DEMANDES_ASSOCIEES_TD_DEMANDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TDC_DEMANDES_COMMANDES_TD_DEMANDE")]
        public System.Collections.Generic.ICollection<TDC_DEMANDES_COMMANDES> TDC_DEMANDES_COMMANDES_TD_DEMANDE { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TEB_ETAT_BATCHS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TEB_ETAT_BATCHID")]
        public int TEB_ETAT_BATCHID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEB_NOM_AFFICHAGE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TEB_NOM_AFFICHAGE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEB_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TEB_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEB_CMD")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TEB_CMD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEB_DATE_CREATION")]
        public System.DateTimeOffset TEB_DATE_CREATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETAT")]
        public TE_ETATS TE_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBD_BATCH_DEMANDES")]
        public System.Collections.Generic.ICollection<TBD_BATCH_DEMANDES> TBD_BATCH_DEMANDES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBS_BATCH_SCENARIOS")]
        public System.Collections.Generic.ICollection<TBS_BATCH_SCENARIOS> TBS_BATCH_SCENARIOS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TEL_ETAT_LOGICIELS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TEL_ETAT_LOGICIELID")]
        public int TEL_ETAT_LOGICIELID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TL_LOGICIELID")]
        public int TL_LOGICIELID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETAT")]
        public TE_ETATS TE_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TL_LOGICIEL")]
        public TL_LOGICIELS TL_LOGICIEL { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TEMF_ETAT_MASTER_FERMES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TEMF_ETAT_MASTER_FERMEID")]
        public int TEMF_ETAT_MASTER_FERMEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTERID")]
        public int TEM_ETAT_MASTERID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TF_FERMEID")]
        public int TF_FERMEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEMF_DATE_AJOUT")]
        public System.DateTimeOffset? TEMF_DATE_AJOUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEMF_DATE_SUPPRESSION")]
        public System.DateTimeOffset? TEMF_DATE_SUPPRESSION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEMF_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TEMF_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEMF_ORDRE_PRIORITE")]
        public int? TEMF_ORDRE_PRIORITE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTER")]
        public TEM_ETAT_MASTERS TEM_ETAT_MASTER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TF_FERME")]
        public TF_FERMES TF_FERME { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TEM_ETAT_MASTERS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTERID")]
        public int TEM_ETAT_MASTERID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_NOM_ETAT_MASTER")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TEM_NOM_ETAT_MASTER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_DATE_CREATION")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TEM_DATE_CREATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID_OLD")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID_OLD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TEM_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTER_PARENTID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TEM_ETAT_MASTER_PARENTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_RESPONSABLE_FONCTIONNELID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_RESPONSABLE_FONCTIONNELID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_RESPONSABLE_TECHNIQUEID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_RESPONSABLE_TECHNIQUEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TP_PERIMETREID")]
        public int TP_PERIMETREID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TC_CATEGORIEID")]
        public int TC_CATEGORIEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_GUID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TEM_GUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_RESPONSABLE_FONCTIONNEL")]
        public TRU_USERS TRU_RESPONSABLE_FONCTIONNEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_RESPONSABLE_TECHNIQUE")]
        public TRU_USERS TRU_RESPONSABLE_TECHNIQUE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TC_CATEGORIE")]
        public TC_CATEGORIES TC_CATEGORIE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TP_PERIMETRE")]
        public TP_PERIMETRES TP_PERIMETRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEMF_ETAT_MASTER_FERMES")]
        public System.Collections.Generic.ICollection<TEMF_ETAT_MASTER_FERMES> TEMF_ETAT_MASTER_FERMES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATS")]
        public System.Collections.Generic.ICollection<TE_ETATS> TE_ETATS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TEP_ETAT_PREREQUISS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TEP_ETAT_PREREQUISID")]
        public int TEP_ETAT_PREREQUISID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_DATE_MAJ")]
        public System.DateTimeOffset? TEP_DATE_MAJ { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_NATURE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string TEP_NATURE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_PATH")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TEP_PATH { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_FILEPATTERN")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TEP_FILEPATTERN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_IS_PATTERN")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TEP_IS_PATTERN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TEP_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETAT")]
        public TE_ETATS TE_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPD_PREREQUIS_DEMANDES")]
        public System.Collections.Generic.ICollection<TPD_PREREQUIS_DEMANDES> TPD_PREREQUIS_DEMANDES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPS_PREREQUIS_SCENARIOS")]
        public System.Collections.Generic.ICollection<TPS_PREREQUIS_SCENARIOS> TPS_PREREQUIS_SCENARIOS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TER_ETAT_RESSOURCES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TER_ETAT_RESSOURCEID")]
        public int TER_ETAT_RESSOURCEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_NOM_FICHIER")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TER_NOM_FICHIER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TER_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_PATH_RELATIF")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TER_PATH_RELATIF { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_MODELE_DOC")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TER_MODELE_DOC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_MODELE_DATE")]
        public System.DateTimeOffset? TER_MODELE_DATE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_MODELE_TAILLE")]
        public int? TER_MODELE_TAILLE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_IS_PATTERN")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TER_IS_PATTERN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_NOM_MODELE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TER_NOM_MODELE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETAT")]
        public TE_ETATS TE_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRD_RESSOURCE_DEMANDES")]
        public System.Collections.Generic.ICollection<TRD_RESSOURCE_DEMANDES> TRD_RESSOURCE_DEMANDES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRS_RESSOURCE_SCENARIOS")]
        public System.Collections.Generic.ICollection<TRS_RESSOURCE_SCENARIOS> TRS_RESSOURCE_SCENARIOS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TE_ETATS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTERID")]
        public int TEM_ETAT_MASTERID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_NOM_ETAT")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TE_NOM_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_NOM_DATABASE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TE_NOM_DATABASE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_NOM_SERVEUR_CUBE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TE_NOM_SERVEUR_CUBE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_INDICE_REVISION_L1")]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int TE_INDICE_REVISION_L1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_INDICE_REVISION_L2")]
        [System.ComponentModel.DataAnnotations.Range(0, 99)]
        public int TE_INDICE_REVISION_L2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_INDICE_REVISION_L3")]
        [System.ComponentModel.DataAnnotations.Range(0, 99)]
        public int TE_INDICE_REVISION_L3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_VERSION")]
        public string TE_VERSION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_FULLNAME")]
        public string TE_FULLNAME { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_DATE_REVISION")]
        public System.DateTimeOffset TE_DATE_REVISION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID_OLD")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID_OLD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_TYPE_SORTIE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TE_TYPE_SORTIE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_GENERE_CUBE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TE_GENERE_CUBE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TE_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_INFO_REVISION")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TE_INFO_REVISION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_DUREE_PRODUCTION_ESTIMEE")]
        public int? TE_DUREE_PRODUCTION_ESTIMEE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_DUREE_DERNIERE_PRODUCTION")]
        public int? TE_DUREE_DERNIERE_PRODUCTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_DATE_DERNIERE_PRODUCTION")]
        public System.DateTimeOffset? TE_DATE_DERNIERE_PRODUCTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_GUID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TE_GUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PARENT_ETATID")]
        public int? PARENT_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_VALIDATION_IMPLICITE")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TE_VALIDATION_IMPLICITE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_SEND_MAIL_GESTIONNAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TE_SEND_MAIL_GESTIONNAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_SEND_MAIL_CLIENT")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TE_SEND_MAIL_CLIENT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ENV_VIERGE_TAILLE")]
        public int? TE_ENV_VIERGE_TAILLE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ENV_VIERGE_UPLOADED")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TE_ENV_VIERGE_UPLOADED { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_ENV_VIERGE_AUTEURID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_ENV_VIERGE_AUTEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_DECLARANTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_DECLARANTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ENV_VIERGE_DATE_DIAG_VALIDE")]
        public System.DateTimeOffset? TE_ENV_VIERGE_DATE_DIAG_VALIDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ENV_VIERGE_DATE_MODIF_HORS_ZIP")]
        public System.DateTimeOffset? TE_ENV_VIERGE_DATE_MODIF_HORS_ZIP { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDES")]
        public System.Collections.Generic.ICollection<TD_DEMANDES> TD_DEMANDES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEB_ETAT_BATCHS")]
        public System.Collections.Generic.ICollection<TEB_ETAT_BATCHS> TEB_ETAT_BATCHS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEL_ETAT_LOGICIELS")]
        public System.Collections.Generic.ICollection<TEL_ETAT_LOGICIELS> TEL_ETAT_LOGICIELS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_ETAT_PREREQUISS")]
        public System.Collections.Generic.ICollection<TEP_ETAT_PREREQUISS> TEP_ETAT_PREREQUISS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_ETAT_RESSOURCES")]
        public System.Collections.Generic.ICollection<TER_ETAT_RESSOURCES> TER_ETAT_RESSOURCES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOS")]
        public System.Collections.Generic.ICollection<TS_SCENARIOS> TS_SCENARIOS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDES_TE_ETAT")]
        public System.Collections.Generic.ICollection<TCMD_COMMANDES> TCMD_COMMANDES_TE_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTER")]
        public TEM_ETAT_MASTERS TEM_ETAT_MASTER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_ENV_VIERGE_AUTEUR")]
        public TRU_USERS TRU_ENV_VIERGE_AUTEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_DECLARANT")]
        public TRU_USERS TRU_DECLARANT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TF_FERMES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TF_FERMEID")]
        public int TF_FERMEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TF_DESCR")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TF_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TF_EN_MAINTENANCE")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TF_EN_MAINTENANCE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEMF_ETAT_MASTER_FERMES")]
        public System.Collections.Generic.ICollection<TEMF_ETAT_MASTER_FERMES> TEMF_ETAT_MASTER_FERMES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUF_PARALLELEU_FERMES")]
        public System.Collections.Generic.ICollection<TPUF_PARALLELEU_FERMES> TPUF_PARALLELEU_FERMES { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TH_HABILITATIONS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TH_HABILITATIONID")]
        public int TH_HABILITATIONID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USERID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_USERID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTE_TEAMID")]
        public int? TTE_TEAMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int? TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSG_SCENARIO_GPEID")]
        public int? TSG_SCENARIO_GPEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_DROIT_CONCERNE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string TH_DROIT_CONCERNE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_EST_HABILITE")]
        public int TH_EST_HABILITE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_DATE_INITIALISATION")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TH_DATE_INITIALISATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_INITIALISATION_AUTEURID")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TRU_INITIALISATION_AUTEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_MAJ_DATE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TH_MAJ_DATE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_MAJ_AUTEURID")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TRU_MAJ_AUTEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TH_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_HERITE_HABILITATIONID")]
        public int? TH_HERITE_HABILITATIONID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USER")]
        public TRU_USERS TRU_USER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTE_TEAM")]
        public TTE_TEAMS TTE_TEAM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIO")]
        public TS_SCENARIOS TS_SCENARIO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSG_SCENARIO_GPE")]
        public TSG_SCENARIO_GPES TSG_SCENARIO_GPE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_INITIALISATION_AUTEUR")]
        public TRU_USERS TRU_INITIALISATION_AUTEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_MAJ_AUTEUR")]
        public TRU_USERS TRU_MAJ_AUTEUR { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TI_INFOS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TI_INFOID")]
        public int TI_INFOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TI_DATE")]
        public System.DateTimeOffset? TI_DATE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TI_MSG")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TI_MSG { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TI_MSG_EN")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TI_MSG_EN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TI_IMG")]
        public byte[] TI_IMG { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TI_DT_DEBUT_VALIDITE")]
        public System.DateTimeOffset TI_DT_DEBUT_VALIDITE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TI_DT_FIN_VALIDITE")]
        public System.DateTimeOffset? TI_DT_FIN_VALIDITE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TLEM_LOGICIEL_EDITEUR_MODELES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TLEM_LOGICIEL_EDITEUR_MODELEID")]
        public int TLEM_LOGICIEL_EDITEUR_MODELEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLE_LOGICIEL_EDITEURID")]
        public int TLE_LOGICIEL_EDITEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLEM_ACTION")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TLEM_ACTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLEM_FILE_TYPE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TLEM_FILE_TYPE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLEM_PATH_NAME")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string TLEM_PATH_NAME { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLEM_FILENAME_PATTERN")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string TLEM_FILENAME_PATTERN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLEM_INFO")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TLEM_INFO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLE_LOGICIEL_EDITEUR")]
        public TLE_LOGICIEL_EDITEURS TLE_LOGICIEL_EDITEUR { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TLE_LOGICIEL_EDITEURS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TLE_LOGICIEL_EDITEURID")]
        public int TLE_LOGICIEL_EDITEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLE_EDITEUR")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TLE_EDITEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLEM_LOGICIEL_EDITEUR_MODELES")]
        public System.Collections.Generic.ICollection<TLEM_LOGICIEL_EDITEUR_MODELES> TLEM_LOGICIEL_EDITEUR_MODELES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TL_LOGICIELS")]
        public System.Collections.Generic.ICollection<TL_LOGICIELS> TL_LOGICIELS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TL_LOGICIELS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TL_LOGICIELID")]
        public int TL_LOGICIELID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TL_NOM_LOGICIEL")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TL_NOM_LOGICIEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TL_LOGICIEL_VERSION")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TL_LOGICIEL_VERSION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TL_DATE_LOGICIEL")]
        public System.DateTimeOffset? TL_DATE_LOGICIEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLE_LOGICIEL_EDITEURID")]
        public int? TLE_LOGICIEL_EDITEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TLE_LOGICIEL_EDITEUR")]
        public TLE_LOGICIEL_EDITEURS TLE_LOGICIEL_EDITEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEL_ETAT_LOGICIELS")]
        public System.Collections.Generic.ICollection<TEL_ETAT_LOGICIELS> TEL_ETAT_LOGICIELS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSL_SERVEUR_LOGICIELS")]
        public System.Collections.Generic.ICollection<TSL_SERVEUR_LOGICIELS> TSL_SERVEUR_LOGICIELS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TPD_PREREQUIS_DEMANDES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TPD_PREREQUIS_DEMANDEID")]
        public int TPD_PREREQUIS_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDEID")]
        public int TD_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_ETAT_PREREQUISID")]
        public int TEP_ETAT_PREREQUISID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPD_VALIDE")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TPD_VALIDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPD_DATE_VALIDATION")]
        public System.DateTimeOffset? TPD_DATE_VALIDATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPD_DATE_LAST_CHECK")]
        public System.DateTimeOffset? TPD_DATE_LAST_CHECK { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPD_NB_FILE_TROUVE")]
        public int? TPD_NB_FILE_TROUVE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPD_MSG_LAST_CHECK")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string TPD_MSG_LAST_CHECK { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDE")]
        public TD_DEMANDES TD_DEMANDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_ETAT_PREREQUIS")]
        public TEP_ETAT_PREREQUISS TEP_ETAT_PREREQUIS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TPF_PLANIFS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TPF_PLANIFID")]
        public int TPF_PLANIFID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_DATE_DEBUT")]
        public System.DateTimeOffset TPF_DATE_DEBUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_DATE_FIN")]
        public System.DateTimeOffset? TPF_DATE_FIN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_DEMANDE_ORIGINEID")]
        public int TPF_DEMANDE_ORIGINEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_PREREQUIS_DELAI_CHK")]
        public int? TPF_PREREQUIS_DELAI_CHK { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_CRON")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPF_CRON { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_TIMEZONE_INFOID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPF_TIMEZONE_INFOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_DECLARANTID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_DECLARANTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_DEMANDE_ORIGINE")]
        public TD_DEMANDES TPF_DEMANDE_ORIGINE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TPR_PROFILS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TPR_PROFILID")]
        public int TPR_PROFILID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPR_LIB")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPR_LIB { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TPS_PREREQUIS_SCENARIOS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TEP_ETAT_PREREQUISID")]
        public int TEP_ETAT_PREREQUISID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPS_NB_FILE_MIN")]
        public int? TPS_NB_FILE_MIN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPS_NB_FILE_MAX")]
        public int? TPS_NB_FILE_MAX { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPS_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPS_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_ETAT_PREREQUIS")]
        public TEP_ETAT_PREREQUISS TEP_ETAT_PREREQUIS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIO")]
        public TS_SCENARIOS TS_SCENARIO { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TPUF_PARALLELEU_FERMES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TPUF_PARALLELEU_FERMEID")]
        public int TPUF_PARALLELEU_FERMEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TF_FERMEID")]
        public int TF_FERMEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_PARALLELEUID")]
        public int TPU_PARALLELEUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUF_DATE_MODIFICATION")]
        public System.DateTimeOffset? TPUF_DATE_MODIFICATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUF_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPUF_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TF_FERME")]
        public TF_FERMES TF_FERME { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_PARALLELEU")]
        public TPU_PARALLELEUS TPU_PARALLELEU { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TPUP_PARALLELEU_PARAMS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TPUP_PARALLELEU_PARAMID")]
        public int TPUP_PARALLELEU_PARAMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_PARALLELEUID")]
        public int TPU_PARALLELEUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUP_KEY")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPUP_KEY { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUP_VALUE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPUP_VALUE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUP_TYPE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPUP_TYPE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUP_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPUP_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_PARALLELEU")]
        public TPU_PARALLELEUS TPU_PARALLELEU { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TPU_PARALLELEUS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TPU_PARALLELEUID")]
        public int TPU_PARALLELEUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_INSTANCE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPU_INSTANCE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_DATE_PREMIERE_ACTIVITE")]
        public System.DateTimeOffset? TPU_DATE_PREMIERE_ACTIVITE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_DATE_DERNIERE_ACTIVITE")]
        public System.DateTimeOffset? TPU_DATE_DERNIERE_ACTIVITE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_DUREE_EXPLOITATION")]
        public int? TPU_DUREE_EXPLOITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TPU_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEURID")]
        public int TSRV_SERVEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEUR")]
        public TSRV_SERVEURS TSRV_SERVEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUF_PARALLELEU_FERMES")]
        public System.Collections.Generic.ICollection<TPUF_PARALLELEU_FERMES> TPUF_PARALLELEU_FERMES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUP_PARALLELEU_PARAMS")]
        public System.Collections.Generic.ICollection<TPUP_PARALLELEU_PARAMS> TPUP_PARALLELEU_PARAMS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TP_PERIMETRES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TP_PERIMETREID")]
        public int TP_PERIMETREID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TP_PERIMETRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TP_PERIMETRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TP_DATE_CREATION")]
        public System.DateTimeOffset? TP_DATE_CREATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TP_LOGO")]
        public byte[] TP_LOGO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TQM_QUALIF_MODELEID")]
        public int? TQM_QUALIF_MODELEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TQM_QUALIF_MODELE")]
        public TQM_QUALIF_MODELES TQM_QUALIF_MODELE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTERS")]
        public System.Collections.Generic.ICollection<TEM_ETAT_MASTERS> TEM_ETAT_MASTERS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TQM_QUALIF_MODELES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TQM_QUALIF_MODELEID")]
        public int TQM_QUALIF_MODELEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TQM_LIB")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TQM_LIB { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TQM_VALEUR_MIN")]
        public int? TQM_VALEUR_MIN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TQM_VALEUR_MAX")]
        public int? TQM_VALEUR_MAX { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TP_PERIMETRES")]
        public System.Collections.Generic.ICollection<TP_PERIMETRES> TP_PERIMETRES { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRAPLAS_APPLICATIONS_AUTH_SCENARIOS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRAPLAS_APPLICATIONS_AUTH_SCENARIOID")]
        public int TRAPLAS_APPLICATIONS_AUTH_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRAS_AUTH_SCENARIOID")]
        public int TRAS_AUTH_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_CLIENTAPPLICATIONID")]
        public int TRCLI_CLIENTAPPLICATIONID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRAS_AUTH_SCENARIO")]
        public TRAS_AUTH_SCENARIOS TRAS_AUTH_SCENARIO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_CLIENTAPPLICATION")]
        public TRCLI_CLIENTAPPLICATIONS TRCLI_CLIENTAPPLICATION { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRAS_AUTH_SCENARIOS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRAS_AUTH_SCENARIOID")]
        public int TRAS_AUTH_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRAS_LABEL")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRAS_LABEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRAS_DESCRIPTION")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRAS_DESCRIPTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRAPLAS_APPLICATIONS_AUTH_SCENARIOS")]
        public System.Collections.Generic.ICollection<TRAPLAS_APPLICATIONS_AUTH_SCENARIOS> TRAPLAS_APPLICATIONS_AUTH_SCENARIOS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRCCL_CATALOG_CLAIMS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRCCL_CATALOG_CLAIMID")]
        public int TRCCL_CATALOG_CLAIMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCCL_STATUS")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRCCL_STATUS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_CLAIMID")]
        public int TRCL_CLAIMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCCL_VALUE")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string TRCCL_VALUE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCCL_VALUE_LABEL")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string TRCCL_VALUE_LABEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCCL_DESCRIPTION")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRCCL_DESCRIPTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCCL_KIND")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRCCL_KIND { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_CLAIM")]
        public TRCL_CLAIMS TRCL_CLAIM { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRCLICL_CLIENTAPPLICATIONS_CLAIMS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRCLICL_CLIENTAPPLICATION_CLAIMID")]
        public int TRCLICL_CLIENTAPPLICATION_CLAIMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_CLAIMID")]
        public int TRCL_CLAIMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_CLIENTAPPLICATIONID")]
        public int TRCLI_CLIENTAPPLICATIONID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLICL_CLAIM_VALUE")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string TRCLICL_CLAIM_VALUE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLICL_DESCRIPTION")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRCLICL_DESCRIPTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLICL_STATUS")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRCLICL_STATUS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_CLIENTAPPLICATION")]
        public TRCLI_CLIENTAPPLICATIONS TRCLI_CLIENTAPPLICATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_CLAIM")]
        public TRCL_CLAIMS TRCL_CLAIM { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRCLI_CLIENTAPPLICATIONS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_CLIENTAPPLICATIONID")]
        public int TRCLI_CLIENTAPPLICATIONID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_LABEL")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRCLI_LABEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_DESCRIPTION")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRCLI_DESCRIPTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_STATUS")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRCLI_STATUS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_AUTH_PUBLIC")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRCLI_AUTH_PUBLIC { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_AUTH_SECRET")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRCLI_AUTH_SECRET { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLICL_CLIENTAPPLICATIONS_CLAIMS")]
        public System.Collections.Generic.ICollection<TRCLICL_CLIENTAPPLICATIONS_CLAIMS> TRCLICL_CLIENTAPPLICATIONS_CLAIMS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRAPLAS_APPLICATIONS_AUTH_SCENARIOS")]
        public System.Collections.Generic.ICollection<TRAPLAS_APPLICATIONS_AUTH_SCENARIOS> TRAPLAS_APPLICATIONS_AUTH_SCENARIOS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRUCL_USERS_CLAIMS")]
        public System.Collections.Generic.ICollection<TRUCL_USERS_CLAIMS> TRUCL_USERS_CLAIMS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRCL_CLAIMS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_CLAIMID")]
        public int TRCL_CLAIMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_STATUS")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRCL_STATUS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_CLAIM_NAME")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string TRCL_CLAIM_NAME { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_CLAIM_DESCRIPTION")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRCL_CLAIM_DESCRIPTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_MULTIVALUE")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRCLI_MULTIVALUE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLICL_CLIENTAPPLICATIONS_CLAIMS")]
        public System.Collections.Generic.ICollection<TRCLICL_CLIENTAPPLICATIONS_CLAIMS> TRCLICL_CLIENTAPPLICATIONS_CLAIMS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRUCL_USERS_CLAIMS")]
        public System.Collections.Generic.ICollection<TRUCL_USERS_CLAIMS> TRUCL_USERS_CLAIMS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCCL_CATALOG_CLAIMS")]
        public System.Collections.Generic.ICollection<TRCCL_CATALOG_CLAIMS> TRCCL_CATALOG_CLAIMS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRD_RESSOURCE_DEMANDES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRD_RESSOURCE_DEMANDEID")]
        public int TRD_RESSOURCE_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDEID")]
        public int TD_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_ETAT_RESSOURCEID")]
        public int TER_ETAT_RESSOURCEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRD_NOM_FICHIER")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRD_NOM_FICHIER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRD_NOM_FICHIER_ORIGINAL")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRD_NOM_FICHIER_ORIGINAL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRD_FICHIER_PRESENT")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRD_FICHIER_PRESENT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRD_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRD_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRD_TAILLE_FICHIER")]
        public int? TRD_TAILLE_FICHIER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("T")]
        public TD_DEMANDES T { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_ETAT_RESSOURCE")]
        public TER_ETAT_RESSOURCES TER_ETAT_RESSOURCE { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRST_STATUTS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_INFO")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRST_INFO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_INFO_EN")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRST_INFO_EN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE01")]
        public int? TRST_REGLE01 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE02")]
        public int? TRST_REGLE02 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE03")]
        public int? TRST_REGLE03 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE04")]
        public int? TRST_REGLE04 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE05")]
        public int? TRST_REGLE05 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE06")]
        public int? TRST_REGLE06 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE07")]
        public int? TRST_REGLE07 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE08")]
        public int? TRST_REGLE08 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE09")]
        public int? TRST_REGLE09 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_REGLE10")]
        public int? TRST_REGLE10 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRST_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEP_ETAT_PREREQUISS")]
        public System.Collections.Generic.ICollection<TEP_ETAT_PREREQUISS> TEP_ETAT_PREREQUISS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TF_FERMES")]
        public System.Collections.Generic.ICollection<TF_FERMES> TF_FERMES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TI_INFOS")]
        public System.Collections.Generic.ICollection<TI_INFOS> TI_INFOS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_PLANIFS")]
        public System.Collections.Generic.ICollection<TPF_PLANIFS> TPF_PLANIFS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPR_PROFILS")]
        public System.Collections.Generic.ICollection<TPR_PROFILS> TPR_PROFILS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUF_PARALLELEU_FERMES")]
        public System.Collections.Generic.ICollection<TPUF_PARALLELEU_FERMES> TPUF_PARALLELEU_FERMES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPUP_PARALLELEU_PARAMS")]
        public System.Collections.Generic.ICollection<TPUP_PARALLELEU_PARAMS> TPUP_PARALLELEU_PARAMS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_PARALLELEUS")]
        public System.Collections.Generic.ICollection<TPU_PARALLELEUS> TPU_PARALLELEUS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TP_PERIMETRES")]
        public System.Collections.Generic.ICollection<TP_PERIMETRES> TP_PERIMETRES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSP_SERVEUR_PARAMS")]
        public System.Collections.Generic.ICollection<TSP_SERVEUR_PARAMS> TSP_SERVEUR_PARAMS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEURS")]
        public System.Collections.Generic.ICollection<TSRV_SERVEURS> TSRV_SERVEURS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTERS")]
        public System.Collections.Generic.ICollection<TEM_ETAT_MASTERS> TEM_ETAT_MASTERS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATS")]
        public System.Collections.Generic.ICollection<TE_ETATS> TE_ETATS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOS")]
        public System.Collections.Generic.ICollection<TS_SCENARIOS> TS_SCENARIOS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEB_ETAT_BATCHS")]
        public System.Collections.Generic.ICollection<TEB_ETAT_BATCHS> TEB_ETAT_BATCHS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSGA_SCENARIO_GPE_ASSOCIE")]
        public System.Collections.Generic.ICollection<TSGA_SCENARIO_GPE_ASSOCIES> TSGA_SCENARIO_GPE_ASSOCIE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_HABILITATION")]
        public System.Collections.Generic.ICollection<TH_HABILITATIONS> TH_HABILITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSG_SCENARIO_GPE")]
        public System.Collections.Generic.ICollection<TSG_SCENARIO_GPES> TSG_SCENARIO_GPE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTE_TEAM")]
        public System.Collections.Generic.ICollection<TTE_TEAMS> TTE_TEAM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TUTE_USER_TEAM")]
        public System.Collections.Generic.ICollection<TUTE_USER_TEAMS> TUTE_USER_TEAM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TR_MEL_EMail_Templates")]
        public System.Collections.Generic.ICollection<TR_MEL_EMail_Templates> TR_MEL_EMail_Templates { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRS_RESSOURCE_SCENARIOS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TER_ETAT_RESSOURCEID")]
        public int TER_ETAT_RESSOURCEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRS_FICHIER_OBLIGATOIRE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRS_FICHIER_OBLIGATOIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRS_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRS_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TER_ETAT_RESSOURCE")]
        public TER_ETAT_RESSOURCES TER_ETAT_RESSOURCE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIO")]
        public TS_SCENARIOS TS_SCENARIO { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRTZ_TZS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRTZ_TZID")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TRTZ_TZID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRTZ_PREFERED_TZ")]
        public int? TRTZ_PREFERED_TZ { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRTZ_INFO_TZ")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string TRTZ_INFO_TZ { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USER")]
        public System.Collections.Generic.ICollection<TRU_USERS> TRU_USER { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRUCL_USERS_CLAIMS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRUCL_USER_CLAIMID")]
        public int TRUCL_USER_CLAIMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USERID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_USERID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_CLAIMID")]
        public int TRCL_CLAIMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRUCL_CLAIM_VALUE")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string TRUCL_CLAIM_VALUE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_CLIENTAPPLICATIONID")]
        public int TRCLI_CLIENTAPPLICATIONID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRUCL_DESCRIPTION")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TRUCL_DESCRIPTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRUCL_STATUS")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRUCL_STATUS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCL_CLAIM")]
        public TRCL_CLAIMS TRCL_CLAIM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USER")]
        public TRU_USERS TRU_USER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRCLI_CLIENTAPPLICATION")]
        public TRCLI_CLIENTAPPLICATIONS TRCLI_CLIENTAPPLICATION { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TRU_USERS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USERID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_USERID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_STATUS")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[AI]")]
        public string TRU_STATUS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_LOGIN")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TRU_LOGIN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_PWD")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string TRU_PWD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_NAME")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TRU_NAME { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_FIRST_NAME")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TRU_FIRST_NAME { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_FULLNAME")]
        public string TRU_FULLNAME { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_EMAIL")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string TRU_EMAIL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_ALLOW_INTERNAL_AUTH")]
        public bool TRU_ALLOW_INTERNAL_AUTH { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRLG_LNGID")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TRLG_LNGID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRTZ_TZID")]
        [System.ComponentModel.DataAnnotations.Required]
        public string TRTZ_TZID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRUCL_USERS_CLAIMS")]
        public System.Collections.Generic.ICollection<TRUCL_USERS_CLAIMS> TRUCL_USERS_CLAIMS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTAU_AUTHENTIFICATIONS")]
        public System.Collections.Generic.ICollection<TTAU_AUTHENTIFICATIONS> TTAU_AUTHENTIFICATIONS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTERSTRU_RESPONSABLE_FONCTIONNEL")]
        public System.Collections.Generic.ICollection<TEM_ETAT_MASTERS> TEM_ETAT_MASTERSTRU_RESPONSABLE_FONCTIONNEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_ETAT_MASTERSTRU_RESPONSABLE_TECHNIQUE")]
        public System.Collections.Generic.ICollection<TEM_ETAT_MASTERS> TEM_ETAT_MASTERSTRU_RESPONSABLE_TECHNIQUE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATSTRU_ENV_VIERGE_AUTEUR")]
        public System.Collections.Generic.ICollection<TE_ETATS> TE_ETATSTRU_ENV_VIERGE_AUTEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATSTRU_DECLARANT")]
        public System.Collections.Generic.ICollection<TE_ETATS> TE_ETATSTRU_DECLARANT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("VDTFH_HABILITATION")]
        public System.Collections.Generic.ICollection<VDTFH_HABILITATIONS> VDTFH_HABILITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_HABILITATION")]
        public System.Collections.Generic.ICollection<TH_HABILITATIONS> TH_HABILITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_INITIALISATION_AUTEUR_TH_HABILITATION")]
        public System.Collections.Generic.ICollection<TH_HABILITATIONS> TRU_INITIALISATION_AUTEUR_TH_HABILITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_MAJ_AUTEUR_TH_HABILITATION")]
        public System.Collections.Generic.ICollection<TH_HABILITATIONS> TRU_MAJ_AUTEUR_TH_HABILITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TUTE_USER_TEAM")]
        public System.Collections.Generic.ICollection<TUTE_USER_TEAMS> TUTE_USER_TEAM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDES_TRU_COMMANDITAIRE")]
        public System.Collections.Generic.ICollection<TCMD_COMMANDES> TCMD_COMMANDES_TRU_COMMANDITAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDES_TRU_EXPLOITANT")]
        public System.Collections.Generic.ICollection<TCMD_COMMANDES> TCMD_COMMANDES_TRU_EXPLOITANT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_SP_SUIVI_PHASES_TRU_AUTEUR_MODIF")]
        public System.Collections.Generic.ICollection<TCMD_SP_SUIVI_PHASES> TCMD_SP_SUIVI_PHASES_TRU_AUTEUR_MODIF { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_DA_DEMANDES_ASSOCIEES_TRU_AUTEUR")]
        public System.Collections.Generic.ICollection<TCMD_DA_DEMANDES_ASSOCIEES> TCMD_DA_DEMANDES_ASSOCIEES_TRU_AUTEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TR_LNG_Languages")]
        public TR_LNG_Languages TR_LNG_Languages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRTZ_TZ")]
        public TRTZ_TZS TRTZ_TZ { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TR_LNG_Languages
    {

        [System.Text.Json.Serialization.JsonPropertyName("lng_id")]
        public System.Guid Lng_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lng_code")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string Lng_code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lng_label")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Lng_label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lng_is_preferred_language")]
        public bool Lng_is_preferred_language { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("TR_MEL_EMail_Templates")]
        public System.Collections.Generic.ICollection<TR_MEL_EMail_Templates> TR_MEL_EMail_Templates { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USERS")]
        public System.Collections.Generic.ICollection<TRU_USERS> TRU_USERS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TR_MEL_EMail_Templates
    {

        [System.Text.Json.Serialization.JsonPropertyName("mel_id")]
        public System.Guid Mel_id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_code")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Mel_code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_additional_code")]
        public string Mel_additional_code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_description")]
        public string Mel_description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sta_code")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string Sta_code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lng_code")]
        public string Lng_code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_email_subject")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Mel_email_subject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_email_body")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Mel_email_body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_email_footer")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Mel_email_footer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_comments")]
        public string Mel_comments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_email_recipients")]
        public string Mel_email_recipients { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_email_recipients_in_cc")]
        public string Mel_email_recipients_in_cc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_email_recipients_in_bcc")]
        public string Mel_email_recipients_in_bcc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_email_importance")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string Mel_email_importance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_creation_date")]
        public System.DateTimeOffset Mel_creation_date { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_created_by")]
        public string Mel_created_by { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_update_date")]
        public System.DateTimeOffset? Mel_update_date { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mel_update_by")]
        public string Mel_update_by { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TR_LNG_Languages")]
        public TR_LNG_Languages TR_LNG_Languages { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TSGA_SCENARIO_GPE_ASSOCIES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TSGA_SCENARIO_GPE_ASSOCIEID")]
        public int TSGA_SCENARIO_GPE_ASSOCIEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSG_SCENARIO_GPEID")]
        public int TSG_SCENARIO_GPEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSGA_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSGA_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSGA_DATE_CREATION")]
        public System.DateTimeOffset TSGA_DATE_CREATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSG_SCENARIO_GPE")]
        public TSG_SCENARIO_GPES TSG_SCENARIO_GPE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIO")]
        public TS_SCENARIOS TS_SCENARIO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TSG_SCENARIO_GPES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TSG_SCENARIO_GPEID")]
        public int TSG_SCENARIO_GPEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSG_NOM")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TSG_NOM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSG_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSG_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSG_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSG_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSG_DATE_MAJ")]
        public System.DateTimeOffset TSG_DATE_MAJ { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSGA_SCENARIO_GPE_ASSOCIE")]
        public System.Collections.Generic.ICollection<TSGA_SCENARIO_GPE_ASSOCIES> TSGA_SCENARIO_GPE_ASSOCIE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_HABILITATION")]
        public System.Collections.Generic.ICollection<TH_HABILITATIONS> TH_HABILITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TSL_SERVEUR_LOGICIELS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TSL_SERVEUR_LOGICIELID")]
        public int TSL_SERVEUR_LOGICIELID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEURID")]
        public int TSRV_SERVEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TL_LOGICIELID")]
        public int TL_LOGICIELID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TL_LOGICIEL")]
        public TL_LOGICIELS TL_LOGICIEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEUR")]
        public TSRV_SERVEURS TSRV_SERVEUR { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TSP_SERVEUR_PARAMS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TSP_SERVEUR_PARAMID")]
        public int TSP_SERVEUR_PARAMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEURID")]
        public int TSRV_SERVEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSP_KEY")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSP_KEY { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSP_VALUE")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSP_VALUE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSP_TYPE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSP_TYPE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSP_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSP_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEUR")]
        public TSRV_SERVEURS TSRV_SERVEUR { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TSRV_SERVEURS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEURID")]
        public int TSRV_SERVEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_NOM")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSRV_NOM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_IP")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string TSRV_IP { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_DATE_ACTIVATION")]
        public System.DateTimeOffset? TSRV_DATE_ACTIVATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_DATE_DERNIERE_ACTIVITE")]
        public System.DateTimeOffset? TSRV_DATE_DERNIERE_ACTIVITE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_DUREE_EXPLOITATION")]
        public int? TSRV_DUREE_EXPLOITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_OS")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSRV_OS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TSRV_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDES")]
        public System.Collections.Generic.ICollection<TD_DEMANDES> TD_DEMANDES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPU_PARALLELEUS")]
        public System.Collections.Generic.ICollection<TPU_PARALLELEUS> TPU_PARALLELEUS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSL_SERVEUR_LOGICIELS")]
        public System.Collections.Generic.ICollection<TSL_SERVEUR_LOGICIELS> TSL_SERVEUR_LOGICIELS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSP_SERVEUR_PARAMS")]
        public System.Collections.Generic.ICollection<TSP_SERVEUR_PARAMS> TSP_SERVEUR_PARAMS { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TS_SCENARIOS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_NOM_SCENARIO")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TS_NOM_SCENARIO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TS_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID_OLD")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TRST_STATUTID_OLD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_IS_DEFAULT")]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string TS_IS_DEFAULT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_GUID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TS_GUID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETAT")]
        public TE_ETATS TE_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBS_BATCH_SCENARIOS")]
        public System.Collections.Generic.ICollection<TBS_BATCH_SCENARIOS> TBS_BATCH_SCENARIOS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPS_PREREQUIS_SCENARIOS")]
        public System.Collections.Generic.ICollection<TPS_PREREQUIS_SCENARIOS> TPS_PREREQUIS_SCENARIOS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRS_RESSOURCE_SCENARIOS")]
        public System.Collections.Generic.ICollection<TRS_RESSOURCE_SCENARIOS> TRS_RESSOURCE_SCENARIOS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("VDE_DEMANDES_ETENDUE")]
        public System.Collections.Generic.ICollection<VDE_DEMANDES_ETENDUES> VDE_DEMANDES_ETENDUE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("VDTFH_HABILITATION")]
        public System.Collections.Generic.ICollection<VDTFH_HABILITATIONS> VDTFH_HABILITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_HABILITATION")]
        public System.Collections.Generic.ICollection<TH_HABILITATIONS> TH_HABILITATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSGA_SCENARIO_GPE_ASSOCIE")]
        public System.Collections.Generic.ICollection<TSGA_SCENARIO_GPE_ASSOCIES> TSGA_SCENARIO_GPE_ASSOCIE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("VPE_PLANIF_ENTETE")]
        public System.Collections.Generic.ICollection<VPE_PLANIF_ENTETES> VPE_PLANIF_ENTETE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TCMD_COMMANDES_TS_SCENARIO")]
        public System.Collections.Generic.ICollection<TCMD_COMMANDES> TCMD_COMMANDES_TS_SCENARIO { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TTAU_AUTHENTIFICATIONS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TTAU_AUTHENTIFICATIONID")]
        public int TTAU_AUTHENTIFICATIONID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USERID")]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_USERID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTAU_AUTH_CODE")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string TTAU_AUTH_CODE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTAU_AUTH_CODE_EXP")]
        public System.DateTimeOffset? TTAU_AUTH_CODE_EXP { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTAU_REFRESH_TOKEN")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string TTAU_REFRESH_TOKEN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTAU_REFRESH_TOKEN_EXP")]
        public System.DateTimeOffset? TTAU_REFRESH_TOKEN_EXP { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USER")]
        public TRU_USERS TRU_USER { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TTE_TEAMS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TTE_TEAMID")]
        public int TTE_TEAMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTE_NOM")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string TTE_NOM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTE_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TTE_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTE_DESCR")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TTE_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTE_DATE_CREATION")]
        public System.DateTimeOffset TTE_DATE_CREATION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TUTE_USER_TEAMS")]
        public System.Collections.Generic.ICollection<TUTE_USER_TEAMS> TUTE_USER_TEAMS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TH_HABILITATIONS")]
        public System.Collections.Generic.ICollection<TH_HABILITATIONS> TH_HABILITATIONS { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TUTE_USER_TEAMS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TUTE_USER_TEAMID")]
        public int TUTE_USER_TEAMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USERID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_USERID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTE_TEAMID")]
        public int TTE_TEAMID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TUTE_COMMENTAIRE")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string TUTE_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TUTE_DATE_MAJ")]
        public System.DateTimeOffset TUTE_DATE_MAJ { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUTID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string TRST_STATUTID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USER")]
        public TRU_USERS TRU_USER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TTE_TEAM")]
        public TTE_TEAMS TTE_TEAM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRST_STATUT")]
        public TRST_STATUTS TRST_STATUT { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VDE_DEMANDES_ETENDUES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDEID")]
        public int TD_DEMANDEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_NOM_ETAT")]
        public string TE_NOM_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_NOM_ETAT_VERSION")]
        public string TE_NOM_ETAT_VERSION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("VERSION")]
        public string VERSION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_COMMENTAIRE")]
        public string TE_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_NOM_SCENARIO")]
        public string TS_NOM_SCENARIO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_DESCR")]
        public string TS_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CATEGORIE")]
        public string CATEGORIE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TC_CATEGORIEID")]
        public int TC_CATEGORIEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("STATUT_ETAT_FR")]
        public string STATUT_ETAT_FR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("STATUT_ETAT_EN")]
        public string STATUT_ETAT_EN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_COMMENTAIRE_UTILISATEUR")]
        public string TD_COMMENTAIRE_UTILISATEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_DEMANDE")]
        public System.DateTimeOffset TD_DATE_DEMANDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_DERNIER_DOWNLOAD")]
        public System.DateTimeOffset? TD_DATE_DERNIER_DOWNLOAD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_EXECUTION_SOUHAITEE")]
        public System.DateTimeOffset? TD_DATE_EXECUTION_SOUHAITEE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_LIVRAISON")]
        public System.DateTimeOffset? TD_DATE_LIVRAISON { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_PRISE_EN_CHARGE")]
        public System.DateTimeOffset? TD_DATE_PRISE_EN_CHARGE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DATE_PIVOT")]
        public System.DateTimeOffset? TD_DATE_PIVOT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DEMANDE_ORIGINEID")]
        public int? TD_DEMANDE_ORIGINEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_DUREE_PRODUCTION_REEL")]
        public int? TD_DUREE_PRODUCTION_REEL { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_INFO_RETOUR_TRAITEMENT")]
        public string TD_INFO_RETOUR_TRAITEMENT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_QUALIF_BILAN")]
        public int? TD_QUALIF_BILAN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_QUALIF_EXIST_FILE")]
        public string TD_QUALIF_EXIST_FILE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_QUALIF_FILE_SIZE")]
        public int? TD_QUALIF_FILE_SIZE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_RESULT_EXIST_FILE")]
        public string TD_RESULT_EXIST_FILE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_RESULT_FILE_SIZE")]
        public int? TD_RESULT_FILE_SIZE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_SUSPEND_EXECUTION")]
        public string TD_SUSPEND_EXECUTION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_IGNORE_RESULT")]
        public string TD_IGNORE_RESULT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TD_RESULT_NB_DOWNLOAD")]
        public int? TD_RESULT_NB_DOWNLOAD { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_SERVEURID")]
        public int? TSRV_SERVEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TSRV_NOM")]
        public string TSRV_NOM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("REFERENT")]
        public string REFERENT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("REFERENT_TECH")]
        public string REFERENT_TECH { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int? TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TPF_PLANIF_ORIGINEID")]
        public int? TPF_PLANIF_ORIGINEID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_DEMANDEURID")]
        public string TRU_DEMANDEURID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DEMANDEUR")]
        public string DEMANDEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CODE_STATUT_DEMANDE")]
        public string CODE_STATUT_DEMANDE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("STATUT_DEMANDE_FR")]
        public string STATUT_DEMANDE_FR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("STATUT_DEMANDE_EN")]
        public string STATUT_DEMANDE_EN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NB_RESSOURCES")]
        public int NB_RESSOURCES { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TBD_CODE_RETOUR")]
        public int? TBD_CODE_RETOUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIO")]
        public TS_SCENARIOS TS_SCENARIO { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VDTFH_HABILITATIONS
    {

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USERID")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TRU_USERID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PRODUCTEUR")]
        public int PRODUCTEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CONTREMAITRE")]
        public int CONTREMAITRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CONTROLEUR")]
        public int CONTROLEUR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TRU_USER")]
        public TRU_USERS TRU_USER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIO")]
        public TS_SCENARIOS TS_SCENARIO { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VPE_PLANIF_ENTETES
    {

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIOID")]
        public int TS_SCENARIOID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CATEGORIE")]
        public string CATEGORIE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TEM_NOM_ETAT_MASTER")]
        public string TEM_NOM_ETAT_MASTER { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_NOM_ETAT")]
        public string TE_NOM_ETAT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_NOM_ETAT_VERSION")]
        public string TE_NOM_ETAT_VERSION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("VERSION")]
        public string VERSION { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_COMMENTAIRE")]
        public string TE_COMMENTAIRE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("STATUT_ETAT_FR")]
        public string STATUT_ETAT_FR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("STATUT_ETAT_EN")]
        public string STATUT_ETAT_EN { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_NOM_SCENARIO")]
        public string TS_NOM_SCENARIO { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_DESCR")]
        public string TS_DESCR { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("REFERENT")]
        public string REFERENT { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("REFERENT_TECH")]
        public string REFERENT_TECH { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TE_ETATID")]
        public int TE_ETATID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ELIGIBLE")]
        public string ELIGIBLE { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TS_SCENARIO")]
        public TS_SCENARIOS TS_SCENARIO { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DatabaseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SqlServer")]
        SqlServer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Oracle")]
        Oracle = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sqlite")]
        Sqlite = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PostGreSql")]
        PostGreSql = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RefManagerTypologyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WithLabel")]
        WithLabel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WithoutLabelUpdate")]
        WithoutLabelUpdate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WithoutLabelAddReplace")]
        WithoutLabelAddReplace = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("HttpStatusCode")]
        public string HttpStatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Count")]
        public long Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Message")]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Licence
    {

        [System.Text.Json.Serialization.JsonPropertyName("IsTrialVersion")]
        public bool IsTrialVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerName")]
        public string CustomerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerRefCode")]
        public string CustomerRefCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerEmail")]
        public string CustomerEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DefaultExpirationTimeInDays")]
        public int DefaultExpirationTimeInDays { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EndValidationDate")]
        public System.DateTimeOffset? EndValidationDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LicenseKey")]
        public string LicenseKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LicenseType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LicenseType LicenseType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LicenseMessage")]
        public string LicenseMessage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LicenseType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Trial")]
        Trial = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LimitedTime")]
        LimitedTime = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Perpetual")]
        Perpetual = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MenuCategoryType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Management")]
        Management = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Admin")]
        Admin = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Technical")]
        Technical = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LeftMenu")]
        LeftMenu = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RightMenu")]
        RightMenu = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ProfileMenu")]
        ProfileMenu = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("UpdateVersionNumber")]
        public Version UpdateVersionNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsUpdateAvailable")]
        public bool IsUpdateAvailable { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserMenu
    {

        [System.Text.Json.Serialization.JsonPropertyName("Code")]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("MenuCategory")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MenuCategoryType MenuCategory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Url")]
        public string Url { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("HeaderImageUrl")]
        public string HeaderImageUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SideMenuImageUrl")]
        public string SideMenuImageUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SubMenu")]
        public System.Collections.Generic.ICollection<UserMenu> SubMenu { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsVisible")]
        public bool IsVisible { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsDisabled")]
        public bool IsDisabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CatalogApi
    {

        [System.Text.Json.Serialization.JsonPropertyName("TraceId")]
        public string TraceId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Function")]
        public string Function { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Version")]
        public string Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Success")]
        public bool Success { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StatusCode")]
        public int StatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ErrorMessage")]
        public string ErrorMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Value")]
        public object Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatabaseSettings
    {

        [System.Text.Json.Serialization.JsonPropertyName("DatabaseType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DatabaseType DatabaseType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServerName")]
        public string ServerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Port")]
        public int Port { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DatabaseName")]
        public string DatabaseName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Login")]
        public string Login { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Password")]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailTemplate
    {

        [System.Text.Json.Serialization.JsonPropertyName("From")]
        public string From { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("To")]
        public string To { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Subject")]
        public string Subject { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Body")]
        public string Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TextFormatHtml")]
        public bool TextFormatHtml { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Importance")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Importance Importance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Priority")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Priority Priority { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CultureInfo")]
        public string CultureInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TimeZone")]
        public string TimeZone { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Importance
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Priority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Highest")]
        Highest = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Lowest")]
        Lowest = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GdbRequestAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Read")]
        Read = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Write")]
        Write = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GdbRequestHandled
    {

        [System.Text.Json.Serialization.JsonPropertyName("RequestId")]
        public string RequestId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("RequestAction")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GdbRequestAction RequestAction { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("GlobalResult")]
        public bool GlobalResult { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ReferentielInfos")]
        public System.Collections.Generic.ICollection<ReferentielInfoHandled> ReferentielInfos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GdbRequestToHandle
    {

        [System.Text.Json.Serialization.JsonPropertyName("RequestId")]
        public string RequestId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ReferentielInfos")]
        public System.Collections.Generic.ICollection<ReferentielInfo> ReferentielInfos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResponse_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null
    {

        [System.Text.Json.Serialization.JsonPropertyName("Message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("HasError")]
        public bool HasError { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ErrorMessage")]
        public string ErrorMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExceptionDetail")]
        public string ExceptionDetail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public System.Collections.Generic.ICollection<TM_RFS_ReferentialSettings> Result { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResponse_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null
    {

        [System.Text.Json.Serialization.JsonPropertyName("Message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("HasError")]
        public bool HasError { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ErrorMessage")]
        public string ErrorMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExceptionDetail")]
        public string ExceptionDetail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public System.Collections.Generic.ICollection<TR_CNX_Connections> Result { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedResponse_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null
    {

        [System.Text.Json.Serialization.JsonPropertyName("Message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("HasError")]
        public bool HasError { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ErrorMessage")]
        public string ErrorMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExceptionDetail")]
        public string ExceptionDetail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public System.Collections.Generic.ICollection<TR_MEL_EMail_Templates> Result { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferentielInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("TableName")]
        public string TableName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TableData")]
        public string TableData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TableMeta")]
        public string TableMeta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DatabaseSettings")]
        public DatabaseSettings DatabaseSettings { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Typology")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RefManagerTypologyType Typology { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Schema")]
        public string Schema { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SelectQuery")]
        public string SelectQuery { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SqlCriteria")]
        public string SqlCriteria { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Update")]
        public UpdateInfo Update { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("MaxRowsToRead")]
        public int MaxRowsToRead { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferentielInfoHandled
    {

        [System.Text.Json.Serialization.JsonPropertyName("TableName")]
        public string TableName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TableData")]
        public string TableData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TableMeta")]
        public string TableMeta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ErrorMessage")]
        public string ErrorMessage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("Columns")]
        public System.Collections.Generic.ICollection<string> Columns { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PrimaryKeys")]
        public System.Collections.Generic.ICollection<string> PrimaryKeys { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Authorizations
    {

        [System.Text.Json.Serialization.JsonPropertyName("IsAuthorized")]
        public bool IsAuthorized { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Action")]
        public string Action { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchsAttributes
    {

        [System.Text.Json.Serialization.JsonPropertyName("OrdreExecution")]
        public int OrdreExecution { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NomFichier")]
        public string NomFichier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SubmitExec")]
        public bool SubmitExec { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExitCode")]
        public int? ExitCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProcessId")]
        public int? ProcessId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Demandes
    {

        [System.Text.Json.Serialization.JsonPropertyName("DemandeId")]
        public int? DemandeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EtatId")]
        public int? EtatId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsValidQualifAttributes")]
        public bool? IsValidQualifAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StartedAt")]
        public System.DateTimeOffset? StartedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("JsonData")]
        public byte[] JsonData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ListBatchsAttributes")]
        public System.Collections.Generic.ICollection<BatchsAttributes> ListBatchsAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ListRessourcesAttributes")]
        public System.Collections.Generic.ICollection<RessourcesAttributes> ListRessourcesAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ListParamAttributes")]
        public System.Collections.Generic.ICollection<ParamAttributes> ListParamAttributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParamAttributes
    {

        [System.Text.Json.Serialization.JsonPropertyName("Key")]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Value")]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RessourcesAttributes
    {

        [System.Text.Json.Serialization.JsonPropertyName("DemandeOrigine")]
        public int DemandeOrigine { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NomFichier")]
        public string NomFichier { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Destination")]
        public string Destination { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsTransfertStarted")]
        public bool IsTransfertStarted { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkerNode
    {

        [System.Text.Json.Serialization.JsonPropertyName("ServiceName")]
        public string ServiceName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServerName")]
        public string ServerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServerOs")]
        public string ServerOs { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FileName")]
        public string FileName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Version")]
        public string Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Folder")]
        public string Folder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("WorkingFilesStorage")]
        public string WorkingFilesStorage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CanUseRefManagerFeature")]
        public bool CanUseRefManagerFeature { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsRefManagerRunning")]
        public bool IsRefManagerRunning { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Machine")]
        public string Machine { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsFree")]
        public bool? IsFree { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StartedAt")]
        public System.DateTimeOffset? StartedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LastCmdResult")]
        public bool? LastCmdResult { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LastCmdError")]
        public string LastCmdError { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Demande")]
        public Demandes Demande { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StepWorkflow")]
        public string StepWorkflow { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StepNumber")]
        public int StepNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Resilience")]
        public bool Resilience { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StepStartedAt")]
        public System.DateTimeOffset? StepStartedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LastJobRun")]
        public System.DateTimeOffset? LastJobRun { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Authorization")]
        public Authorizations Authorization { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchDoc
    {

        [System.Text.Json.Serialization.JsonPropertyName("PatchDocs")]
        public System.Collections.Generic.ICollection<byte[]> PatchDocs { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EntityIds")]
        public System.Collections.Generic.ICollection<object> EntityIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileUploadRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Extension")]
        public string Extension { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Data")]
        public string Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("Messages")]
        public System.Collections.Generic.ICollection<string> Messages { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Source")]
        public string Source { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Exception")]
        public string Exception { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ErrorId")]
        public string ErrorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SupportMessage")]
        public string SupportMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StatusCode")]
        public int StatusCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessPermission
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileManagerDirectoryContent
    {

        [System.Text.Json.Serialization.JsonPropertyName("Path")]
        public string Path { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Action")]
        public string Action { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NewName")]
        public string NewName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Names")]
        public System.Collections.Generic.ICollection<string> Names { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Size")]
        public long Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PreviousName")]
        public string PreviousName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateModified")]
        public System.DateTimeOffset DateModified { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("HasChild")]
        public bool HasChild { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsFile")]
        public bool IsFile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FilterPath")]
        public string FilterPath { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FilterId")]
        public string FilterId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ParentId")]
        public string ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TargetPath")]
        public string TargetPath { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("RenameFiles")]
        public System.Collections.Generic.ICollection<string> RenameFiles { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("UploadFiles")]
        public System.Collections.Generic.ICollection<byte[]> UploadFiles { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CaseSensitive")]
        public bool CaseSensitive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SearchString")]
        public string SearchString { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ShowHiddenItems")]
        public bool ShowHiddenItems { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ShowFileExtension")]
        public bool ShowFileExtension { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Data")]
        public System.Collections.Generic.ICollection<FileManagerDirectoryContent> Data { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TargetData")]
        public FileManagerDirectoryContent TargetData { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Permission")]
        public AccessPermission Permission { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshTokenRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("Token")]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("RefreshToken")]
        public string RefreshToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Password")]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("Token")]
        public string Token { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("RefreshToken")]
        public string RefreshToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("RefreshTokenExpiryTime")]
        public System.DateTimeOffset RefreshTokenExpiryTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangePasswordRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("Password")]
        public string Password { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NewPassword")]
        public string NewPassword { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ConfirmNewPassword")]
        public string ConfirmNewPassword { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateUserRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FirstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PhoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Image")]
        public FileUploadRequest Image { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DeleteCurrentImage")]
        public bool DeleteCurrentImage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDetailsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("Id")]
        public System.Guid Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("UserName")]
        public string UserName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FirstName")]
        public string FirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LastName")]
        public string LastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsActive")]
        public bool IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EmailConfirmed")]
        public bool EmailConfirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PhoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ImageUrl")]
        public string ImageUrl { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferentialTable
    {

        [System.Text.Json.Serialization.JsonPropertyName("DataModel")]
        public System.Collections.Generic.ICollection<ReferentialTableDataModel> DataModel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LabelCode")]
        public string LabelCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Datas")]
        public System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>> Datas { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferentialTableDataModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("ColumnName")]
        public string ColumnName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ColumnId")]
        public int ColumnId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DataType")]
        public string DataType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ManagedType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ManagedTypes ManagedType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsNullable")]
        public bool IsNullable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsColumnKey")]
        public bool IsColumnKey { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ColumnType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ColumnType ColumnType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EditType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EditType EditType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferentialTableInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("DataModel")]
        public System.Collections.Generic.ICollection<ReferentialTableDataModel> DataModel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LabelCode")]
        public string LabelCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HttpValidationProblemDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string Instance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Errors")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Aggregate
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CRUDModel_1OfOfTM_RFS_ReferentialSettingsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null
    {

        [System.Text.Json.Serialization.JsonPropertyName("Action")]
        public string Action { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Table")]
        public string Table { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("KeyColumn")]
        public string KeyColumn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Key")]
        public object Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Value")]
        public TM_RFS_ReferentialSettings Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Added")]
        public System.Collections.Generic.ICollection<TM_RFS_ReferentialSettings> Added { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Changed")]
        public System.Collections.Generic.ICollection<TM_RFS_ReferentialSettings> Changed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Deleted")]
        public System.Collections.Generic.ICollection<TM_RFS_ReferentialSettings> Deleted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Params")]
        public System.Collections.Generic.IDictionary<string, object> Params { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CRUDModel_1OfOfTR_CNX_ConnectionsAndRefManagerAnd_0AndCulture_neutralAndPublicKeyToken_null
    {

        [System.Text.Json.Serialization.JsonPropertyName("Action")]
        public string Action { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Table")]
        public string Table { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("KeyColumn")]
        public string KeyColumn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Key")]
        public object Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Value")]
        public TR_CNX_Connections Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Added")]
        public System.Collections.Generic.ICollection<TR_CNX_Connections> Added { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Changed")]
        public System.Collections.Generic.ICollection<TR_CNX_Connections> Changed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Deleted")]
        public System.Collections.Generic.ICollection<TR_CNX_Connections> Deleted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Params")]
        public System.Collections.Generic.IDictionary<string, object> Params { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CRUDModel_1OfOfTR_MEL_EMail_TemplatesAndUniversAnd_0AndCulture_neutralAndPublicKeyToken_null
    {

        [System.Text.Json.Serialization.JsonPropertyName("Action")]
        public string Action { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Table")]
        public string Table { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("KeyColumn")]
        public string KeyColumn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Key")]
        public object Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Value")]
        public TR_MEL_EMail_Templates Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Added")]
        public System.Collections.Generic.ICollection<TR_MEL_EMail_Templates> Added { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Changed")]
        public System.Collections.Generic.ICollection<TR_MEL_EMail_Templates> Changed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Deleted")]
        public System.Collections.Generic.ICollection<TR_MEL_EMail_Templates> Deleted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Params")]
        public System.Collections.Generic.IDictionary<string, object> Params { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchFilter
    {

        [System.Text.Json.Serialization.JsonPropertyName("Fields")]
        public System.Collections.Generic.ICollection<string> Fields { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Key")]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Operator")]
        public string Operator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IgnoreCase")]
        public bool IgnoreCase { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sort
    {

        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Direction")]
        public string Direction { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Comparer")]
        public object Comparer { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WhereFilter
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ignoreCase")]
        public bool IgnoreCase { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ignoreAccent")]
        public bool IgnoreAccent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isComplex")]
        public bool IsComplex { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operator")]
        public string Operator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("condition")]
        public string Condition { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("predicates")]
        public System.Collections.Generic.ICollection<WhereFilter> Predicates { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataManagerRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("skip")]
        public int Skip { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("take")]
        public int Take { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("antiForgery")]
        public string AntiForgery { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requiresCounts")]
        public bool RequiresCounts { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("table")]
        public string Table { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IdMapping")]
        public string IdMapping { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public System.Collections.Generic.ICollection<string> Group { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("select")]
        public System.Collections.Generic.ICollection<string> Select { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expand")]
        public System.Collections.Generic.ICollection<string> Expand { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sorted")]
        public System.Collections.Generic.ICollection<Sort> Sorted { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("search")]
        public System.Collections.Generic.ICollection<SearchFilter> Search { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("where")]
        public System.Collections.Generic.ICollection<WhereFilter> Where { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("aggregates")]
        public System.Collections.Generic.ICollection<Aggregate> Aggregates { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("params")]
        public System.Collections.Generic.IDictionary<string, object> Params { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("distinct")]
        public System.Collections.Generic.ICollection<string> Distinct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("GroupByFormatter")]
        public System.Collections.Generic.IDictionary<string, string> GroupByFormatter { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServerSideGroup")]
        public bool ServerSideGroup { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("RequiresFilteredRecords")]
        public bool RequiresFilteredRecords { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LazyLoad")]
        public bool LazyLoad { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LazyExpandAllGroup")]
        public bool LazyExpandAllGroup { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ColumnType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Number")]
        Number = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
        Integer = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Double")]
        Double = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Long")]
        Long = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Decimal")]
        Decimal = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CheckBox")]
        CheckBox = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"DateOnly")]
        DateOnly = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TimeOnly")]
        TimeOnly = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EditType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DefaultEdit")]
        DefaultEdit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DropDownEdit")]
        DropDownEdit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BooleanEdit")]
        BooleanEdit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DatePickerEdit")]
        DatePickerEdit = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTimePickerEdit")]
        DateTimePickerEdit = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NumericEdit")]
        NumericEdit = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TimePickerEdit")]
        TimePickerEdit = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyValuePair_2OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e
    {

        [System.Text.Json.Serialization.JsonPropertyName("Key")]
        public string Key { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Value")]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version
    {

        [System.Text.Json.Serialization.JsonPropertyName("Major")]
        public int Major { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Minor")]
        public int Minor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Build")]
        public int Build { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Revision")]
        public int Revision { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("MajorRevision")]
        public int MajorRevision { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("MinorRevision")]
        public int MinorRevision { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625